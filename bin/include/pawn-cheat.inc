#if defined _pawn_cheat_included
	#endinput
#endif
#define _pawn_cheat_included


#if !defined FILTERSCRIPT

#if !defined DEBUG
	#define DEBUG
#endif

#if !defined NO_SUSPICION_LOGS
	#define NO_SUSPICION_LOGS
#endif

#if defined NO_SUSPICION_LOGS
	#pragma unused SUSPICION_1
	#pragma unused SUSPICION_2
#endif

new
	SUSPICION_1[] =			"AC: Suspicion on the ID %d. Reason code: %03d%s",
	SUSPICION_2[] =			"AC: Suspicion on the IP %s. Reason code: %03d%s",
	VERSION_WARNING[] =		"AC: This version of the anticheat is not suitable for the server version",
#if defined DEBUG
	DEBUG_CODE_1[] =		"AC(debug): ID %d exceeded %d flood attempts. Public ID: %d",
	DEBUG_CODE_2[] =		"AC(debug): Invalid version by ID %d. Version: %s",
	DEBUG_CODE_3[] =		"AC(debug): ID %d exceeded %d connections from 1 IP-address",
	DEBUG_CODE_4[] =		"AC(debug): Bad RCON login by IP %s using password %s",
	DEBUG_CODE_5[] =		"AC(debug): ID %d used NOP %s",
#endif
	KICK_MSG[] =			"AC: You were kicked on suspicion of using cheat programs (#%03d)",
	MAX_CONNECTS_MSG[] =	"AC: You exceeded the max number of connections from 1 IP-address",
	UNKNOWN_CLIENT_MSG[] =	"AC: This version of the client is not suitable for playing on the server",
	STATS_STRING_1[] =		" Statistics anticheat",
	STATS_STRING_2[] =		" Detected and prevented:",
	STATS_STRING_3[] =		"  %d cheating attempts",
	STATS_STRING_4[] =		"  %d hacking attempts",
	STATS_STRING_5[] =		"  %d crashing attempts",
	STATS_STRING_6[] =		"  %d flooding attempts",
	STATS_STRING_7[] =		"  %d attacks",
	STATS_STRING_8[] =		" Total detected and punished %d cheaters";


#define PC_SERVER_VERSION			"0.3.7"
#define PC_SERVER_DL_VERSION		"0.3.DL"

#if !defined PC_CLIENT_VERSION
	#define PC_CLIENT_VERSION			"0.3"
#endif


#if !defined PC_USE_VENDING_MACHINES
	#define PC_USE_VENDING_MACHINES		true
#endif

#if !defined PC_USE_TUNING_GARAGES
	#define PC_USE_TUNING_GARAGES		true
#endif

#if !defined PC_USE_PICKUP_WEAPONS
	#define PC_USE_PICKUP_WEAPONS		true
#endif

#if !defined PC_USE_AMMUNATIONS
	#define PC_USE_AMMUNATIONS			true
#endif

#if !defined PC_USE_RESTAURANTS
	#define PC_USE_RESTAURANTS			true
#endif

#if !defined PC_USE_PAYNSPRAY
	#define PC_USE_PAYNSPRAY			true
#endif

#if !defined PC_USE_CASINOS
	#define PC_USE_CASINOS				true
#endif

#if !defined PC_USE_QUERY
	#define PC_USE_QUERY				true
#endif

#if !defined PC_USE_NPC
	#define PC_USE_NPC					true
#endif

#if !defined PC_USE_STATISTICS
	#define PC_USE_STATISTICS			true
#endif

#if !PC_USE_STATISTICS
	#pragma unused STATS_STRING_1
	#pragma unused STATS_STRING_2
	#pragma unused STATS_STRING_3
	#pragma unused STATS_STRING_4
	#pragma unused STATS_STRING_5
	#pragma unused STATS_STRING_6
	#pragma unused STATS_STRING_7
	#pragma unused STATS_STRING_8
#endif

#if !defined AUTOSAVE_SETTINGS_IN_CONFIG
	#define AUTOSAVE_SETTINGS_IN_CONFIG		false
#endif

#if !defined PC_DEFAULT_COLOR
	#define PC_DEFAULT_COLOR				0xC40000AA
#endif

#if !defined PC_MAX_CLASSES
	#define PC_MAX_CLASSES					320
#endif

#if !defined PC_MAX_CONNECTS_FROM_IP
	#define PC_MAX_CONNECTS_FROM_IP			1
#endif

#if !defined PC_MAX_RCON_LOGIN_ATTEMPT
	#define PC_MAX_RCON_LOGIN_ATTEMPT		1
#endif

#if !defined PC_MAX_MSGS_REC_DIFF
	#define PC_MAX_MSGS_REC_DIFF			800
#endif

#if !defined PC_MAX_PING
	#define PC_MAX_PING						500
#endif

#if !defined PC_MIN_TIME_RECONNECT
	#define PC_MIN_TIME_RECONNECT			12		//In seconds
#endif

#if !defined PC_SPEEDHACK_VEH_RESET_DELAY
	#define PC_SPEEDHACK_VEH_RESET_DELAY	3		//In seconds
#endif

#if !defined PC_MAX_NOP_WARNINGS
	#define PC_MAX_NOP_WARNINGS				8
#endif

#if !defined PC_MAX_NOP_TIMER_WARNINGS
	#define PC_MAX_NOP_TIMER_WARNINGS		3
#endif

#if !defined PC_MAX_PING_WARNINGS
	#define PC_MAX_PING_WARNINGS			8
#endif

#if !defined PC_MAX_AIR_WARNINGS
	#define PC_MAX_AIR_WARNINGS				4
#endif

#if !defined PC_MAX_AIR_VEH_WARNINGS
	#define PC_MAX_AIR_VEH_WARNINGS			4
#endif

#if !defined PC_MAX_FLYHACK_VEH_WARNINGS
	#define PC_MAX_FLYHACK_VEH_WARNINGS		3
#endif

#if !defined PC_MAX_FLYHACK_BIKE_WARNINGS
	#define PC_MAX_FLYHACK_BIKE_WARNINGS	5
#endif

#if !defined PC_MAX_CARSHOT_WARNINGS
	#define PC_MAX_CARSHOT_WARNINGS			4
#endif

#if !defined PC_MAX_PRO_AIM_WARNINGS
	#define PC_MAX_PRO_AIM_WARNINGS			2
#endif

#if !defined PC_MAX_AFK_GHOST_WARNINGS
	#define PC_MAX_AFK_GHOST_WARNINGS		2
#endif

#if !defined PC_MAX_RAPID_FIRE_WARNINGS
	#define PC_MAX_RAPID_FIRE_WARNINGS		16
#endif

#if !defined PC_MAX_AUTO_C_WARNINGS
	#define PC_MAX_AUTO_C_WARNINGS			8
#endif

#if !defined PC_MAX_GODMODE_WARNINGS
	#define PC_MAX_GODMODE_WARNINGS			3
#endif

#if !defined PC_MAX_GODMODE_VEH_WARNINGS
	#define PC_MAX_GODMODE_VEH_WARNINGS		3
#endif

#if !defined PC_MAX_SILENT_AIM_WARNINGS
	#define PC_MAX_SILENT_AIM_WARNINGS		2
#endif

#if !defined PC_MAX_FAKE_WEAPON_WARNINGS
	#define PC_MAX_FAKE_WEAPON_WARNINGS		2
#endif

#if !defined PC_MAX_FLYHACK_WARNINGS
	#define PC_MAX_FLYHACK_WARNINGS			2
#endif

#if !defined PC_MAX_TELEPORT_GLITCH_WARNINGS
	#define PC_MAX_TELEPORT_GLITCH_WARNINGS	1
#endif

#if !defined PC_MAX_SPEEDHACK_VEH_WARNINGS
	#define PC_MAX_SPEEDHACK_VEH_WARNINGS	(1 * PC_SPEEDHACK_VEH_RESET_DELAY)
#endif

#if !defined PC_MAX_SPEEDHACK_WARNINGS
	#define PC_MAX_SPEEDHACK_WARNINGS		4
#endif

#if !defined PC_MAX_CJ_RUN_WARNINGS
	#define PC_MAX_CJ_RUN_WARNINGS			3
#endif

#if !defined PC_MAX_MONEY_WARNINGS
	#define PC_MAX_MONEY_WARNINGS			2
#endif

#define PC_fpublic%0(%1) forward%0(%1); public%0(%1)
#define PC_AbsoluteAngle(%0) ((floatround(%0, floatround_floor) % 360) + floatfract(%0))
#define PC_abs(%0) (((%0) < 0) ? (-(%0)) : ((%0)))


static bool:PC_ACAllow[] =
{
	true,	//0 Anti-AirBreak (onfoot)
	false,	//1 Anti-AirBreak (in vehicle)
	true,	//2 Anti-teleport hack (onfoot)
	false,	//3 Anti-teleport hack (in vehicle)
	false,	//4 Anti-teleport hack (into/between vehicles)
	false,	//5 Anti-teleport hack (vehicle to player)
	true,	//6 Anti-teleport hack (pickups)
	true,	//7 Anti-FlyHack (onfoot)
	false,	//8 Anti-FlyHack (in vehicle)
	true,	//9 Anti-SpeedHack (onfoot)
	false,	//10 Anti-SpeedHack (in vehicle)
	false,	//11 Anti-Health hack (in vehicle)
	true,	//12 Anti-Health hack (onfoot)
	true,	//13 Anti-Armour hack
	true,	//14 Anti-Money hack
	true,	//15 Anti-Weapon hack
	true,	//16 Anti-Ammo hack (add)
	true,	//17 Anti-Ammo hack (infinite)
	true,	//18 Anti-Special actions hack
	true,	//19 Anti-GodMode from bullets (onfoot)
	false,	//20 Anti-GodMode from bullets (in vehicle)
	true,	//21 Anti-Invisible hack
	true,	//22 Anti-lagcomp-spoof
	false,	//23 Anti-Tuning hack
	false,	//24 Anti-Parkour mod
	true,	//25 Anti-Quick turn
	true,	//26 Anti-Rapid fire
	true,	//27 Anti-FakeSpawn
	false,	//28 Anti-FakeKill
	true,	//29 Anti-Pro Aim
	true,	//30 Anti-CJ run
	false,	//31 Anti-CarShot
	false,	//32 Anti-CarJack
	false,	//33 Anti-UnFreeze
	true,	//34 Anti-AFK Ghost
	true,	//35 Anti-Full Aiming

	false,	//36 Anti-Fake NPC
	true,	//37 Anti-Reconnect
	true,	//38 Anti-High ping
	true,	//39 Anti-Dialog hack
	true,	//40 Protection from sandbox
	false,	//41 Protection from invalid version
	true,	//42 Anti-Rcon hack

	false,	//43 Anti-Tuning crasher
	false,	//44 Anti-Invalid seat crasher
	true,	//45 Anti-Dialog crasher
	true,	//46 Anti-Attached object crasher
	true,	//47 Anti-Weapon Crasher

	true,	//48 Protection from connection flood in one slot
	true,	//49 Anti-callback functions flood
	false,	//50 Anti-flood by seat changing

	false,	//51 Anti-DoS

	true	//52 Anti-NOPs
},

bool:PC_NOPAllow[] =
{
	true,	//0 Anti-NOP GivePlayerWeapon
	true,	//1 Anti-NOP SetPlayerAmmo
	true,	//2 Anti-NOP SetPlayerInterior
	true,	//3 Anti-NOP SetPlayerHealth
	true,	//4 Anti-NOP SetVehicleHealth
	true,	//5 Anti-NOP SetPlayerArmour
	true,	//6 Anti-NOP SetPlayerSpecialAction
	true,	//7 Anti-NOP PutPlayerInVehicle
	true,	//8 Anti-NOP TogglePlayerSpectating
	true,	//9 Anti-NOP SpawnPlayer
	true,	//10 Anti-NOP SetPlayerPos
	true	//11 Anti-NOP RemovePlayerFromVehicle
};

static const PC_Mtfc[][] =
{
	{150, 8},	//0 OnDialogResponse
	{800, 2},	//1 OnEnterExitModShop
	{250, 5},	//2 OnPlayerClickMap
	{400, 5},	//3 OnPlayerClickPlayer
	{50, 11},	//4 OnPlayerClickTextDraw
	{350, 5},	//5 OnPlayerCommandText
	{50, 8},	//6 OnPlayerEnterVehicle
	{50, 11},	//7 OnPlayerExitVehicle
	{50, 8},	//8 OnPlayerPickUpPickup
	{150, 8},	//9 OnPlayerRequestClass
	{150, 8},	//10 OnPlayerSelectedMenuRow
	{600, 5},	//11 OnPlayerStateChange
	{450, 2},	//12 OnVehicleMod
	{450, 2},	//13 OnVehiclePaintjob
	{450, 2},	//14 OnVehicleRespray
	{300, 1},	//15 OnVehicleDeath
	{400, 3},	//16 OnPlayerText
	{150, 8},	//17 OnPlayerEnterCheckpoint
	{150, 8},	//18 OnPlayerLeaveCheckpoint
	{150, 5},	//19 OnPlayerRequestSpawn
	{150, 8},	//20 OnPlayerExitedMenu
	{150, 8},	//21 OnPlayerEnterRaceCheckpoint
	{150, 8},	//22 OnPlayerLeaveRaceCheckpoint
	{50, 11},	//23 OnPlayerClickPlayerTextDraw
	{51, 9},	//24 OnVehicleDamageStatusUpdate
	{150, 8},	//25 OnVehicleSirenStateChange
	{150, 5},	//26 OnPlayerSelectObject
	{50, 11}	//27 Cross-public
},

PC_wSlot[] =
{
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10,
	10, 8, 8, 8, 8, 8, 8, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5,
	4, 6, 6, 7, 7, 7, 7, 8, 12, 9, 9, 9, 11, 11, 11
},

PC_vType[] =
{
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0,
	0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 3, 6, 0, 0, 0, 0, 0, 6, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 2, 5, 7, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0,
	1, 5, 5, 5, 0, 0, 0, 0, 5, 2, 0, 5, 3, 3, 0, 0, 1, 0, 0, 0,
	0, 4, 0, 0, 3, 0, 0, 2, 2, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 1, 1, 1, 0, 0, 0, 0, 0, 1,
	1, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 1,
	0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2, 0, 0, 0, 0, 0, 9, 9, 0, 0, 0, 0, 0, 0, 1, 0, 0,
	0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 1, 1, 0, 3, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
},

#if PC_USE_PICKUP_WEAPONS
	PC_wModel[] =
	{
		0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324, 325,
		326, 342, 343, 344, 345, 345, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356,
		372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371
	},

	PC_pAmmo[] =
	{
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 8, 8, 8, 8, 4, 4, 30, 10, 10, 15,
		10, 10, 60, 60, 80, 80, 60, 20, 10, 4, 3,
		100, 500, 5, 1, 500, 500, 36, 0, 0, 1
	},
#endif

#if PC_USE_TUNING_GARAGES
	PC_cPrice[] =
	{
		400, 550, 200, 250, 100, 150, 80, 500, 500, 200, 1000, 220, 250, 100, 400,
		500, 200, 500, 350, 300, 250, 200, 150, 350, 50, 1000, 480, 480, 770, 680, 370,
		370, 170, 120, 790, 150, 500, 690, 190, 390, 500, 390, 1000, 500, 500, 510, 710,
		670, 530, 810, 620, 670, 530, 130, 210, 230, 520, 430, 620, 720, 530, 180, 550, 430,
		830, 850, 750, 250, 200, 550, 450, 550, 450, 1100, 1030, 980, 1560, 1620, 1200,
		1030, 900, 1230, 820, 1560, 1350, 770, 100, 1500, 150, 650, 450, 100, 750,
		350, 450, 350, 1000, 620, 1140, 1000, 940, 780, 830, 3250, 1610, 1540, 780, 780, 780,
		1610, 1540, 0, 0, 3340, 3250, 2130, 2050, 2040, 780, 940, 780, 940, 780, 860,
		780, 1120, 3340, 3250, 3340, 1650, 3380, 3290, 1590, 830, 800, 1500, 1000, 800,
		580, 470, 870, 980, 150, 150, 100, 100, 490, 600, 890, 1000, 1090, 840, 910,
		1200, 1030, 1030, 920, 930, 550, 1050, 1050, 950, 650, 450, 550, 850, 950,
		850, 950, 970, 880, 990, 900, 950, 1000, 900, 1000, 900, 2050, 2150, 2130,
		2050, 2130, 2040, 2150, 2040, 2095, 2175, 2080, 2200, 1200, 1040, 940, 1100
	},
#endif

#if PC_USE_AMMUNATIONS
	PC_AmmuNationInfo[][] =
	{
		{200, 30}, {600, 30}, {1200, 15},
		{600, 15}, {800, 12}, {1000, 10},
		{500, 60}, {2000, 90}, {3500, 120},
		{4500, 150}, {300, 60}
	},

	Float:PC_AmmuNations[][] =
	{
		{296.5541, -38.5138, 1001.5156},
		{295.7008, -80.8109, 1001.5156},
		{290.1963, -109.7721, 1001.5156},
		{312.2592, -166.1385, 999.601}
	},
#endif

#if PC_USE_RESTAURANTS
	Float:PC_Restaurants[][] =
	{
		{374.0, -119.641, 1001.4922},
		{368.789, -6.857, 1001.8516},
		{375.566, -68.222, 1001.5151}
	},
#endif

#if PC_USE_PAYNSPRAY
	Float:PC_PayNSpray[][] =
	{
		{2064.2842, -1831.4736, 13.5469},
		{-2425.7822, 1021.1392, 50.3977},
		{-1420.5195, 2584.2305, 55.8433},
		{487.6401, -1739.9479, 11.1385},
		{1024.8651, -1024.087, 32.1016},
		{-1904.7019, 284.5968, 41.0469},
		{1975.2384, 2162.5088, 11.0703},
		{2393.4456, 1491.5537, 10.5616},
		{720.0854, -455.2807, 16.3359},
		{-99.9417, 1117.9048, 19.7417}
	},
#endif

#if PC_USE_VENDING_MACHINES
	Float:PC_vMachines[][] =
	{
		{-862.82, 1536.6, 21.98},
		{2271.72, -76.46, 25.96},
		{1277.83, 372.51, 18.95},
		{662.42, -552.16, 15.71},
		{201.01, -107.61, 0.89},
		{-253.74, 2597.95, 62.24},
		{-253.74, 2599.75, 62.24},
		{-76.03, 1227.99, 19.12},
		{-14.7, 1175.35, 18.95},
		{-1455.11, 2591.66, 55.23},
		{2352.17, -1357.15, 23.77},
		{2325.97, -1645.13, 14.21},
		{2139.51, -1161.48, 23.35},
		{2153.23, -1016.14, 62.23},
		{1928.73, -1772.44, 12.94},
		{1154.72, -1460.89, 15.15},
		{2480.85, -1959.27, 12.96},
		{2060.11, -1897.64, 12.92},
		{1729.78, -1943.04, 12.94},
		{1634.1, -2237.53, 12.89},
		{1789.21, -1369.26, 15.16},
		{-2229.18, 286.41, 34.7},
		{2319.99, 2532.85, 10.21},
		{2845.72, 1295.04, 10.78},
		{2503.14, 1243.69, 10.21},
		{2647.69, 1129.66, 10.21},
		{-2420.21, 984.57, 44.29},
		{-2420.17, 985.94, 44.29},
		{2085.77, 2071.35, 10.45},
		{1398.84, 2222.6, 10.42},
		{1659.46, 1722.85, 10.21},
		{1520.14, 1055.26, 10.0},
		{-1980.78, 142.66, 27.07},
		{-2118.96, -423.64, 34.72},
		{-2118.61, -422.41, 34.72},
		{-2097.27, -398.33, 34.72},
		{-2092.08, -490.05, 34.72},
		{-2063.27, -490.05, 34.72},
		{-2005.64, -490.05, 34.72},
		{-2034.46, -490.05, 34.72},
		{-2068.56, -398.33, 34.72},
		{-2039.85, -398.33, 34.72},
		{-2011.14, -398.33, 34.72},
		{-1350.11, 492.28, 10.58},
		{-1350.11, 493.85, 10.58},
		{2222.36, 1602.64, 1000.06},
		{2222.2, 1606.77, 1000.05},
		{2155.9, 1606.77, 1000.05},
		{2155.84, 1607.87, 1000.06},
		{2209.9, 1607.19, 1000.05},
		{2202.45, 1617.0, 1000.06},
		{2209.24, 1621.21, 1000.06},
		{2576.7, -1284.43, 1061.09},
		{330.67, 178.5, 1020.07},
		{331.92, 178.5, 1020.07},
		{350.9, 206.08, 1008.47},
		{361.56, 158.61, 1008.47},
		{371.59, 178.45, 1020.07},
		{374.89, 188.97, 1008.47},
		{-19.03, -57.83, 1003.63},
		{-36.14, -57.87, 1003.63},
		{316.87, -140.35, 998.58},
		{2225.2, -1153.42, 1025.9},
		{-15.1, -140.22, 1003.63},
		{-16.53, -140.29, 1003.63},
		{-35.72, -140.22, 1003.63},
		{373.82, -178.14, 1000.73},
		{379.03, -178.88, 1000.73},
		{495.96, -24.32, 1000.73},
		{500.56, -1.36, 1000.73},
		{501.82, -1.42, 1000.73},
		{-33.87, -186.76, 1003.63},
		{-32.44, -186.69, 1003.63},
		{-16.11, -91.64, 1003.63},
		{-17.54, -91.71, 1003.63}
	},
#endif

#if PC_USE_CASINOS
	Float:PC_Casinos[][] =
	{
		{2241.2878, 1617.1624, 1006.1797, 2.0},
		{2240.9736, 1604.6592, 1006.1797, 6.0},
		{2242.5427, 1592.8726, 1006.1836, 6.0},
		{2230.2124, 1592.1426, 1006.1832, 6.0},
		{2230.4717, 1604.484, 1006.186, 6.0},
		{2230.3298, 1616.9272, 1006.1799, 3.0},
		{2251.9407, 1586.1736, 1006.186, 1.0},
		{2218.6785, 1587.3448, 1006.1749, 1.0},
		{2219.2773, 1591.7467, 1006.1867, 1.0},
		{2218.5408, 1589.3229, 1006.184, 1.0},
		{2218.6477, 1593.6279, 1006.1797, 1.0},
		{2221.926, 1603.8285, 1006.1797, 1.0},
		{2218.5095, 1603.8385, 1006.1797, 1.0},
		{2219.9597, 1603.9216, 1006.1797, 1.0},
		{2216.3054, 1603.7996, 1006.1819, 1.0},
		{2218.731, 1619.8046, 1006.1794, 1.0},
		{2218.9407, 1617.8413, 1006.1821, 1.0},
		{2218.668, 1615.4681, 1006.1797, 1.0},
		{2218.6418, 1613.2629, 1006.1797, 1.0},
		{2252.4272, 1589.8412, 1006.1797, 5.0},
		{2252.4229, 1596.6169, 1006.1797, 5.0},
		{2255.1565, 1608.8784, 1006.186, 1.0},
		{2254.8496, 1610.8605, 1006.1797, 1.0},
		{2255.2917, 1612.9167, 1006.1797, 1.0},
		{2255.033, 1614.8892, 1006.1797, 1.0},
		{2255.1213, 1616.8284, 1006.1797, 1.0},
		{2255.2161, 1618.8005, 1006.1797, 1.0},
		{2268.5281, 1606.4894, 1006.1797, 1.0},
		{2270.4922, 1606.8539, 1006.1797, 1.0},
		{2272.5693, 1606.4473, 1006.1797, 1.0},
		{2274.5391, 1607.0122, 1006.1797, 1.0},
		{2271.8447, 1586.1633, 1006.1797, 1.0},
		{2261.4844, 1586.1724, 1006.1797, 1.0},
		{2257.4507, 1589.6555, 1006.1797, 5.0},
		{2267.8994, 1589.8672, 1006.1797, 5.0},
		{2262.8486, 1590.026, 1006.1797, 5.0},
		{2272.6458, 1589.7704, 1006.1797, 5.0},
		{2272.6533, 1596.5682, 1006.1797, 5.0},
		{2270.4895, 1596.4606, 1006.1797, 5.0},
		{2265.4441, 1596.4299, 1006.1797, 5.0},
		{2260.0308, 1596.7987, 1006.1797, 5.0},
		{2254.9907, 1596.241, 1006.1797, 5.0},
		{1956.9524, 988.2533, 992.4688, 2.0},
		{1961.6155, 993.0375, 992.4688, 2.0},
		{1963.7998, 998.4406, 992.4745, 2.0},
		{1936.2885, 987.1995, 992.4745, 2.0},
		{1944.9768, 986.3937, 992.4688, 2.0},
		{1940.7397, 990.9521, 992.4609, 2.0},
		{1940.0966, 1005.8996, 992.4688, 6.0},
		{1938.8785, 1014.1768, 992.4688, 6.0},
		{1938.8811, 1021.4434, 992.4688, 6.0},
		{1966.5975, 1006.6469, 992.4745, 6.0},
		{1966.5979, 1014.1024, 992.4688, 6.0},
		{1939.8351, 1029.912, 992.4688, 6.0},
		{1956.854, 1047.3718, 992.4688, 6.0},
		{1961.356, 1042.8112, 992.4688, 6.0},
		{1963.811, 1037.1263, 992.4745, 6.0},
		{1961.733, 1025.8929, 992.4688, 10.0},
		{1961.708, 1010.3194, 992.4688, 10.0},
		{1966.5989, 1029.7954, 992.4745, 6.0},
		{1961.4139, 1017.8281, 992.4688, 10.0},
		{1966.5985, 1021.7686, 992.4688, 6.0},
		{1128.7106, -1.9779, 1000.6797, 1.0},
		{1125.2388, 1.61, 1000.6797, 1.0},
		{1125.1249, -5.0489, 1000.6797, 1.0},
		{1127.4139, 3.0199, 1000.6797, 1.0},
		{1135.0634, -3.8695, 1000.6797, 1.0},
		{1135.0861, 0.6107, 1000.6797, 1.0},
		{1132.8943, -1.7139, 1000.6797, 1.0},
		{1125.3727, 3.0315, 1000.6797, 1.0},
		{1119.0272, -1.4916, 1000.6924, 1.0}
	},
#endif

PC_MaxPassengers[] =
{
	0x10331113, 0x11311131, 0x11331313, 0x80133301, 0x1381F110,
	0x10311103, 0x10001F10, 0x11113311, 0x13113311, 0x31101100,
	0x30002301, 0x11031311, 0x11111331, 0x10013111, 0x01131100,
	0x11111110, 0x11100031, 0x11130111, 0x33113311, 0x11111101,
	0x33101133, 0x10100510, 0x03133111, 0xFF11113F, 0x13330111,
	0xFF131111, 0x0000FF3F
},

PC_vMods[] =
{
	0x033C2700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x021A27FA, 0x00000000, 0x00FFFE00,
	0x00000007, 0x0003C000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x023B2785, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02BC4703, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x03BA278A, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x028E078A, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02310744, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x0228073A, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02BD4701, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x023A2780, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x0228077A, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x027A27CA, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x0282278A, 0x00000000, 0x00FFFE00, 0x00000007, 0x0003C000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x023E07C0, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x03703730, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x031D2775, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02BE4788, 0x00000000, 0x00FFFE00,
	0x00000007, 0x0003C000, 0x00000000, 0x02010771, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x029A0FCE, 0x00000000, 0x00FFFE00, 0x00000007, 0x0000C000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x03382700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x023F8795, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x029F078C, 0x00000000, 0x00FFFE00, 0x00000007, 0x0003C000, 0x00000000, 0x029627EA, 0x00000000, 0x00FFFE00,
	0x00000007, 0x0003C000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x0236C782, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x029E1FCA, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0xFC000437, 0x00000000, 0x021C0000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x03FE6007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00001B87, 0x00000001, 0x01E00000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x039E07D2, 0x00000000, 0x00FFFE00, 0x00000007, 0x0003C000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x023CC700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00030000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x038E07D6, 0x00000000, 0x00FFFE00, 0x00000007, 0x0003C000, 0x00000000,
	0x023D0709, 0x00000000, 0x00FFFE00, 0x00000007, 0x0000C000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x029E1F8A, 0x00000000, 0x00FFFE00, 0x00000007, 0x0003C000, 0x00000000,
	0x029C077A, 0x00000000, 0x00FFFE00, 0x00000007, 0x0003C000, 0x00000000, 0x02BD076C, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0xFFFFFE00, 0x00000007, 0x00000000, 0x000001F8,
	0x02000700, 0x00000000, 0x00FFFFFE, 0x00000007, 0xC0000000, 0x00002007, 0xFE000700, 0x00000003, 0x00FFFE00,
	0x00000007, 0x00003C00, 0x00000600, 0xCE000700, 0xFF800000, 0x00FFFE01, 0x00000007, 0x3C000000, 0x00000000,
	0x02000700, 0x000003FC, 0x00FFFE00, 0x00000007, 0x003C0000, 0x00001800, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x007FE000, 0x00FFFE00, 0x00000007, 0x03C00000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000047, 0x0000003E, 0x3C000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00001C00, 0x00FFFE00,
	0x0000000F, 0x00000000, 0x0003C000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x000003C0, 0xC0000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x029607C2, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x03FFE7CF, 0x00000000, 0x00FFFE00, 0x00000007, 0x0003C000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x031727F1, 0x00000000, 0x00FFFE00, 0x00000007, 0x00030000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x025627F0, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x039E07C2, 0x00000000, 0x00FFFE00, 0x00000007, 0x0003C000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000
};

static stock const Float:PC_wMinRange[] =
{
	25.0, 25.0, 25.0, 30.0, 25.0, 35.0,
	25.0, 35.0, 40.0, 40.0, 25.0, 55.0,
	50.0, 50.0, 50.0, 4.0, 65.0
};

enum acInfo
{
	Float:acPosX,
	Float:acPosY,
	Float:acPosZ,
	Float:acDropJpX,
	Float:acDropJpY,
	Float:acDropJpZ,
	Float:acSpawnPosX,
	Float:acSpawnPosY,
	Float:acSpawnPosZ,
	Float:acSetVehHealth,
	Float:acLastPosX,
	Float:acLastPosY,
	Float:acSetPosX,
	Float:acSetPosY,
	Float:acSetPosZ,
	acSpeed,
	acHealth,
	acArmour,
	acMoney,
	acLastShot,
	acLastWeapon,
	acEnterSeat,
	acEnterVeh,
	acKickVeh,
	acVeh,
	acSeat,
	acDialog,
	acNextDialog,
	acInt,
	acAnim,
	acDmgRes,
	acSpecAct,
	acNextSpecAct,
	acLastSpecAct,
	acLastPickup,
	acReloadTick,
	acShotTick,
	acSpawnTick,
	acTimerTick,
	acSetPosTick,
	acUpdateTick,
	acEnterVehTick,
	acSpawnWeapon1,
	acSpawnWeapon2,
	acSpawnWeapon3,
	acSpawnAmmo1,
	acSpawnAmmo2,
	acSpawnAmmo3,
	acSpawnRes,
	acTimerID,
	acKickTimerID,
	acParachute,
	acIntRet,
	acKicked,
	acIp[16],
	acSet[13],
	acGtc[20],
	acWeapon[13],
	acAmmo[13],
	acSetWeapon[13],
	acGiveAmmo[13],
	acGtcSetWeapon[13],
	acGtcGiveAmmo[13],
	acNOPCount[12],
	acCheatCount[22],
	acCall[sizeof PC_Mtfc],
	acFloodCount[sizeof PC_Mtfc],
	bool:acNOPAllow[sizeof PC_NOPAllow],
	bool:acACAllow[sizeof PC_ACAllow],
	bool:acStuntBonus,
	bool:acModShop,
	bool:acUnFrozen,
	bool:acOnline,
	bool:acDeathRes,
	bool:acVehDmgRes,
	bool:acSpawned,
	bool:acDead,
	bool:acTpToZ,
	bool:acIntEnterExits,
	bool:acSpec
}

enum acVehInfo
{
	Float:acVelX,
	Float:acVelY,
	Float:acVelZ,
	Float:acPosX,
	Float:acPosY,
	Float:acPosZ,
	Float:acSpawnPosX,
	Float:acSpawnPosY,
	Float:acSpawnPosZ,
	Float:acSpawnZAngle,
	Float:acPosDiff,
	Float:acZAngle,
	Float:acHealth,
	acLastSpeed,
	acSpeedDiff,
	acDriver,
	acInt,
	acPaintJob,
	bool:acSpawned
}

enum acPickInfo
{
	Float:acPosX,
	Float:acPosY,
	Float:acPosZ,
	acType,
	acWeapon
}

static
	Float:PC_ClassPos[PC_MAX_CLASSES][3],
	PC_ClassWeapon[PC_MAX_CLASSES][3],
	PC_ClassAmmo[PC_MAX_CLASSES][3],

	#if PC_USE_STATISTICS
		PC_sInfo[6],
	#endif

	ACInfo[MAX_PLAYERS][acInfo],
	ACVehInfo[MAX_VEHICLES][acVehInfo],
	ACPickInfo[MAX_PICKUPS][acPickInfo],

	bool:PC_IntEnterExits = true,
	bool:PC_StuntBonus = true,
	bool:PC_LagCompMode,
	#if !PC_USE_QUERY
		bool:PC_QueryEnable,
	#endif
	bool:PC_RconEnable,
	bool:PC_PedAnims;

static stock bool:PC_VehFriendlyFire;

PC_fpublic PC_AddStaticVehicle(vehicleid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle)
{
	ACVehInfo[vehicleid][acInt] =
	ACVehInfo[vehicleid][acLastSpeed] =
	ACVehInfo[vehicleid][acSpeedDiff] = 0;
	ACVehInfo[vehicleid][acPaintJob] = 3;
	ACVehInfo[vehicleid][acSpawned] = true;
	ACVehInfo[vehicleid][acHealth] = 1000.0;
	ACVehInfo[vehicleid][acPosDiff] =
	ACVehInfo[vehicleid][acVelX] =
	ACVehInfo[vehicleid][acVelY] =
	ACVehInfo[vehicleid][acVelZ] = 0.0;
	ACVehInfo[vehicleid][acSpawnPosX] =
	ACVehInfo[vehicleid][acPosX] = spawn_x;
	ACVehInfo[vehicleid][acSpawnPosY] =
	ACVehInfo[vehicleid][acPosY] = spawn_y;
	ACVehInfo[vehicleid][acSpawnPosZ] =
	ACVehInfo[vehicleid][acPosZ] = spawn_z;
	ACVehInfo[vehicleid][acSpawnZAngle] =
	ACVehInfo[vehicleid][acZAngle] = z_angle;
	ACVehInfo[vehicleid][acDriver] = INVALID_PLAYER_ID;
	return 1;
}

PC_fpublic PC_CreateVehicle(vehicleid, PC_vehicletype, Float:x, Float:y, Float:z, Float:rotation)
{
	ACVehInfo[vehicleid][acInt] =
	ACVehInfo[vehicleid][acLastSpeed] =
	ACVehInfo[vehicleid][acSpeedDiff] = 0;
	ACVehInfo[vehicleid][acPaintJob] = 3;
	ACVehInfo[vehicleid][acHealth] = 1000.0;
	ACVehInfo[vehicleid][acPosDiff] =
	ACVehInfo[vehicleid][acVelX] =
	ACVehInfo[vehicleid][acVelY] =
	ACVehInfo[vehicleid][acVelZ] = 0.0;
	ACVehInfo[vehicleid][acSpawnPosX] =
	ACVehInfo[vehicleid][acPosX] = x;
	ACVehInfo[vehicleid][acSpawnPosY] =
	ACVehInfo[vehicleid][acPosY] = y;
	ACVehInfo[vehicleid][acSpawnPosZ] =
	ACVehInfo[vehicleid][acPosZ] = z;
	ACVehInfo[vehicleid][acSpawnZAngle] =
	ACVehInfo[vehicleid][acZAngle] = rotation;
	if(!PC_IsATrainCarriage(PC_vehicletype)) ACVehInfo[vehicleid][acSpawned] = true;
	ACVehInfo[vehicleid][acDriver] = INVALID_PLAYER_ID;
	return 1;
}

PC_fpublic PC_AddPlayerClass(PC_classid, Float:PC_spawn_x, Float:PC_spawn_y, Float:PC_spawn_z, PC_weapon1, PC_weapon1_ammo, PC_weapon2, PC_weapon2_ammo, PC_weapon3, PC_weapon3_ammo)
{
	if(0 <= PC_classid < PC_MAX_CLASSES)
	{
		#undef PC_MAX_CLASSES
		PC_ClassPos[PC_classid][0] = PC_spawn_x;
		PC_ClassPos[PC_classid][1] = PC_spawn_y;
		PC_ClassPos[PC_classid][2] = PC_spawn_z;
		PC_ClassWeapon[PC_classid][0] = PC_weapon1;
		PC_ClassAmmo[PC_classid][0] = PC_weapon1_ammo;
		PC_ClassWeapon[PC_classid][1] = PC_weapon2;
		PC_ClassAmmo[PC_classid][1] = PC_weapon2_ammo;
		PC_ClassWeapon[PC_classid][2] = PC_weapon3;
		PC_ClassAmmo[PC_classid][2] = PC_weapon3_ammo;
	}
	return 1;
}

PC_fpublic PC_SetSpawnInfo(playerid, PC_team, PC_skin, Float:PC_x, Float:PC_y, Float:PC_z, Float:PC_rotation, PC_weapon1, PC_weapon1_ammo, PC_weapon2, PC_weapon2_ammo, PC_weapon3, PC_weapon3_ammo)
{
	if(!SetSpawnInfo(playerid, PC_team, PC_skin, PC_x, PC_y, PC_z, PC_rotation, PC_weapon1, PC_weapon1_ammo, PC_weapon2, PC_weapon2_ammo, PC_weapon3, PC_weapon3_ammo)) return 0;
	ACInfo[playerid][acSpawnPosX] = PC_x;
	ACInfo[playerid][acSpawnPosY] = PC_y;
	ACInfo[playerid][acSpawnPosZ] = PC_z;
	ACInfo[playerid][acSpawnWeapon1] = PC_weapon1;
	ACInfo[playerid][acSpawnAmmo1] = PC_weapon1_ammo;
	ACInfo[playerid][acSpawnWeapon2] = PC_weapon2;
	ACInfo[playerid][acSpawnAmmo2] = PC_weapon2_ammo;
	ACInfo[playerid][acSpawnWeapon3] = PC_weapon3;
	ACInfo[playerid][acSpawnAmmo3] = PC_weapon3_ammo;
	return 1;
}

PC_fpublic PC_AddStaticPickup(pickupid, PC_model, PC_type, Float:PC_X, Float:PC_Y, Float:PC_Z)
{
	#if PC_USE_PICKUP_WEAPONS
		ACPickInfo[pickupid][acWeapon] = 0;
		switch(PC_type)
		{
			case 2, 3, 15, 22:
			{
				switch(PC_model)
				{
					case 370: ACPickInfo[pickupid][acType] = 1;
					case 1240: ACPickInfo[pickupid][acType] = 2;
					case 1242: ACPickInfo[pickupid][acType] = 3;
					case 321..326, 331, 333..339, 341..353, 355..369, 371, 372:
					{
						for(new PC_i = 46; PC_i >= 1; --PC_i)
						{
							if(PC_wModel[PC_i] == PC_model)
							{
								ACPickInfo[pickupid][acType] = 4;
								ACPickInfo[pickupid][acWeapon] = PC_i;
								break;
							}
						}
					}
				}
			}
		}
	#endif
	ACPickInfo[pickupid][acPosX] = PC_X;
	ACPickInfo[pickupid][acPosY] = PC_Y;
	ACPickInfo[pickupid][acPosZ] = PC_Z;
	return 1;
}

PC_fpublic PC_CreatePickup(pickupid, PC_model, PC_type, Float:PC_X, Float:PC_Y, Float:PC_Z)
{
	#if PC_USE_PICKUP_WEAPONS
		ACPickInfo[pickupid][acWeapon] = 0;
		switch(PC_type)
		{
			case 2, 3, 15, 22:
			{
				switch(PC_model)
				{
					case 370: ACPickInfo[pickupid][acType] = 1;
					case 1240: ACPickInfo[pickupid][acType] = 2;
					case 1242: ACPickInfo[pickupid][acType] = 3;
					case 321..326, 331, 333..339, 341..353, 355..369, 371, 372:
					{
						for(new PC_i = 46; PC_i >= 1; --PC_i)
						{
							if(PC_wModel[PC_i] == PC_model)
							{
								ACPickInfo[pickupid][acType] = 4;
								ACPickInfo[pickupid][acWeapon] = PC_i;
								break;
							}
						}
					}
				}
			}
		}
	#endif
	ACPickInfo[pickupid][acPosX] = PC_X;
	ACPickInfo[pickupid][acPosY] = PC_Y;
	ACPickInfo[pickupid][acPosZ] = PC_Z;
	return 1;
}

#if PC_USE_PICKUP_WEAPONS\
	&& defined Streamer_SetIntData
	#if defined STREAMER_ENABLE_TAGS
		PC_fpublic PC_CreateDynamicPickup(STREAMER_TAG_PICKUP:pickupid, PC_modelid, PC_type)
	#else
		PC_fpublic PC_CreateDynamicPickup(pickupid, PC_modelid, PC_type)
	#endif
	{
		Streamer_SetIntData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_EXTRA_ID, 0);
		switch(PC_type)
		{
			case 2, 3, 15, 22:
			{
				switch(PC_modelid)
				{
					case 370: Streamer_SetIntData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_EXTRA_ID, 1);
					case 1240: Streamer_SetIntData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_EXTRA_ID, 2);
					case 1242: Streamer_SetIntData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_EXTRA_ID, 3);
					case 321..326, 331, 333..339, 341..353, 355..369, 371, 372:
					{
						for(new PC_i = 46; PC_i >= 1; --PC_i)
						{
							if(PC_wModel[PC_i] == PC_modelid)
							{
								Streamer_SetIntData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_EXTRA_ID, PC_i + 100);
								break;
							}
						}
					}
				}
			}
		}
		return 1;
	}
#endif

#if defined Streamer_UpdateEx
	stock PC_Streamer_UpdateEx(playerid, Float:x, Float:y, Float:z, worldid = -1, interiorid = -1, type = -1, compensatedtime = -1, freezeplayer = 1)
	{
		if(!Streamer_UpdateEx(playerid, x, y, z, worldid, interiorid, type, compensatedtime, freezeplayer)) return 0;
		if(compensatedtime >= 0)
		{
			ACInfo[playerid][acSet][8] = 4;
			ACInfo[playerid][acNOPCount][10] = 0;
			ACInfo[playerid][acSetPosX] = x;
			ACInfo[playerid][acSetPosY] = y;
			ACInfo[playerid][acSetPosZ] = z;
			ACInfo[playerid][acSetPosTick] =
			ACInfo[playerid][acGtc][11] = GetTickCount() + 3250;
		}
		return 1;
	}

	#if defined _ALS_Streamer_UpdateEx
		#undef Streamer_UpdateEx
	#else
		#define _ALS_Streamer_UpdateEx
	#endif
	#define Streamer_UpdateEx PC_Streamer_UpdateEx
#endif

stock PC_GetPlayerVersion(playerid, version[], len)
{
	new PC_ret = GetPlayerVersion(playerid, version, len);
	for(new PC_i = PC_ret - 1; PC_i >= 0; --PC_i)
	{
		if(version[PC_i] == '%')
		{
			strdel(version, PC_i, PC_i + 1);
			PC_ret--;
		}
	}
	return PC_ret;
}

#if defined _ALS_GetPlayerVersion
	#undef GetPlayerVersion
#else
	#define _ALS_GetPlayerVersion
#endif
#define GetPlayerVersion PC_GetPlayerVersion

stock PC_GetPlayerFacingAngle(playerid, &Float:ang)
{
	if(!GetPlayerFacingAngle(playerid, ang)) return 0;
	if(ang != ang) ang = 0.0;
	ang = PC_AbsoluteAngle(ang);
	return 1;
}

#if defined _ALS_GetPlayerFacingAngle
	#undef GetPlayerFacingAngle
#else
	#define _ALS_GetPlayerFacingAngle
#endif
#define GetPlayerFacingAngle PC_GetPlayerFacingAngle

stock PC_GetVehicleZAngle(vehicleid, &Float:z_angle)
{
	if(!GetVehicleZAngle(vehicleid, z_angle)) return 0;
	if(z_angle != z_angle) z_angle = 0.0;
	z_angle = PC_AbsoluteAngle(z_angle);
	#undef PC_AbsoluteAngle
	return 1;
}

#if defined _ALS_GetVehicleZAngle
	#undef GetVehicleZAngle
#else
	#define _ALS_GetVehicleZAngle
#endif
#define GetVehicleZAngle PC_GetVehicleZAngle

PC_fpublic PC_DestroyVehicle(vehicleid)
{
	if(!DestroyVehicle(vehicleid)) return 0;
	ACVehInfo[vehicleid][acSpawned] = false;
	return 1;
}

PC_fpublic PC_DestroyPickup(pickupid)
{
	if(!DestroyPickup(pickupid)) return 0;
	ACPickInfo[pickupid][acType] = 0;
	return 1;
}

PC_fpublic PC_DisableInteriorEnterExits()
{
	PC_IntEnterExits = false;
	return DisableInteriorEnterExits();
}

PC_fpublic PC_UsePlayerPedAnims()
{
	PC_PedAnims = true;
	return UsePlayerPedAnims();
}

#if defined EnableVehicleFriendlyFire
	PC_fpublic PC_EnableVehicleFriendlyFire()
	{
		PC_VehFriendlyFire = true;
		return EnableVehicleFriendlyFire();
	}
#endif

PC_fpublic PC_EnableStuntBonusForAll(enable)
{
	PC_StuntBonus = !!enable;
	#if defined foreach
		foreach(new PC_i : Player) ACInfo[PC_i][acStuntBonus] = PC_StuntBonus;
	#else
		#if defined GetPlayerPoolSize
			for(new PC_i = GetPlayerPoolSize(); PC_i >= 0; --PC_i)
		#else
			for(new PC_i = MAX_PLAYERS - 1; PC_i >= 0; --PC_i)
		#endif
		{
			if(IsPlayerConnected(PC_i)) ACInfo[PC_i][acStuntBonus] = PC_StuntBonus;
		}
	#endif
	return EnableStuntBonusForAll(enable);
}

PC_fpublic PC_EnableStuntBonusForPlayer(playerid, enable)
{
	if(!EnableStuntBonusForPlayer(playerid, enable)) return 0;
	ACInfo[playerid][acStuntBonus] = !!enable;
	return 1;
}

PC_fpublic PC_ShowPlayerDialog(playerid, PC_dialogid)
{
	ACInfo[playerid][acDialog] = PC_dialogid;
	return 1;
}

PC_fpublic PC_fs_ShowPlayerDialog(playerid, PC_dialogid)
{
	ACInfo[playerid][acNextDialog] = PC_dialogid;
	return 1;
}

PC_fpublic PC_TogglePlayerControllable(playerid, toggle)
{
	if(!TogglePlayerControllable(playerid, toggle)) return 0;
	ACInfo[playerid][acUnFrozen] = !!toggle;
	return 1;
}

PC_fpublic PC_TogglePlayerSpectating(playerid, toggle)
{
	if(!TogglePlayerSpectating(playerid, toggle)) return 0;
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || ACInfo[playerid][acSet][6] != -1)
	{
		if(!toggle)
		{
			if(ACInfo[playerid][acDead]) ACInfo[playerid][acSet][7] = 4;
			else
			{
				ACInfo[playerid][acSet][3] =
				ACInfo[playerid][acSet][4] =
				ACInfo[playerid][acSet][6] =
				ACInfo[playerid][acSet][8] =
				ACInfo[playerid][acSet][9] =
				ACInfo[playerid][acNextSpecAct] = -1;
				for(new PC_i = 12; PC_i >= 0; --PC_i)
				{
					ACInfo[playerid][acSetWeapon][PC_i] = -1;
					ACInfo[playerid][acGiveAmmo][PC_i] = -65535;
				}
				ACInfo[playerid][acTpToZ] = false;
				ACInfo[playerid][acUnFrozen] = true;
				ACInfo[playerid][acSet][7] = 1;
			}
			ACInfo[playerid][acSpawnRes]++;
			ACInfo[playerid][acSpec] = false;
			ACInfo[playerid][acSpawnTick] = ACInfo[playerid][acNOPCount][9] = 0;
			ACInfo[playerid][acGtc][13] = GetTickCount() + 2650;
		}
	}
	else if(toggle)
	{
		ACInfo[playerid][acSet][6] = 1;
		ACInfo[playerid][acNOPCount][8] = 0;
		ACInfo[playerid][acGtc][12] = GetTickCount() + 2650;
	}
	return 1;
}

PC_fpublic PC_SpawnPlayer(playerid)
{
	if(!SpawnPlayer(playerid)) return 0;
	if(ACInfo[playerid][acDead]) ACInfo[playerid][acSet][7] = 5;
	else
	{
		ACInfo[playerid][acSet][3] =
		ACInfo[playerid][acSet][4] =
		ACInfo[playerid][acSet][8] =
		ACInfo[playerid][acSet][9] =
		ACInfo[playerid][acNextSpecAct] = -1;
		for(new PC_i = 12; PC_i >= 0; --PC_i)
		{
			ACInfo[playerid][acSetWeapon][PC_i] = -1;
			ACInfo[playerid][acGiveAmmo][PC_i] = -65535;
		}
		ACInfo[playerid][acTpToZ] = false;
		ACInfo[playerid][acUnFrozen] = true;
		ACInfo[playerid][acSet][7] = 2;
	}
	ACInfo[playerid][acSpawnRes]++;
	ACInfo[playerid][acSpawnTick] = ACInfo[playerid][acNOPCount][9] = 0;
	ACInfo[playerid][acGtc][13] = GetTickCount() + 2650;
	return 1;
}

PC_fpublic PC_SetPlayerHealth(playerid, Float:PC_health)
{
	if(!SetPlayerHealth(playerid, PC_health)) return 0;
	if(PC_health < 0.0) PC_health = 0.0;
	ACInfo[playerid][acNOPCount][3] = 0;
	ACInfo[playerid][acSet][1] = floatround(PC_health, floatround_tozero);
	ACInfo[playerid][acGtc][3] = GetTickCount() + 2650;
	return 1;
}

PC_fpublic PC_SetPlayerArmour(playerid, Float:PC_armour)
{
	if(!SetPlayerArmour(playerid, PC_armour)) return 0;
	if(PC_armour < 0.0) PC_armour = 0.0;
	ACInfo[playerid][acNOPCount][5] = 0;
	ACInfo[playerid][acSet][2] = floatround(PC_armour, floatround_tozero);
	ACInfo[playerid][acGtc][5] = GetTickCount() + 2650;
	return 1;
}

PC_fpublic PC_GivePlayerWeapon(playerid, PC_weaponid, PC_ammo)
{
	if(PC_IsValidWeapon(PC_weaponid))
	{
		new PC_s = PC_wSlot[PC_weaponid];
		ACInfo[playerid][acNOPCount][0] = ACInfo[playerid][acNOPCount][1] = 0;
		if(16 <= PC_weaponid <= 18 || 22 <= PC_weaponid <= 43)
		{
			if(3 <= PC_s <= 5 || (ACInfo[playerid][acSetWeapon][PC_s] == -1
			? ACInfo[playerid][acWeapon][PC_s] : ACInfo[playerid][acSetWeapon][PC_s]) == PC_weaponid)
			{
				if(ACInfo[playerid][acGiveAmmo][PC_s] != -65535) ACInfo[playerid][acGiveAmmo][PC_s] += PC_ammo;
				else ACInfo[playerid][acGiveAmmo][PC_s] = ACInfo[playerid][acAmmo][PC_s] + PC_ammo;
			}
			else ACInfo[playerid][acGiveAmmo][PC_s] = PC_ammo;
			if(ACInfo[playerid][acGiveAmmo][PC_s] < -32768) PC_ammo = ACInfo[playerid][acGiveAmmo][PC_s] = -32768;
			else if(ACInfo[playerid][acGiveAmmo][PC_s] > 32767) PC_ammo = ACInfo[playerid][acGiveAmmo][PC_s] = 32767;
			ACInfo[playerid][acReloadTick] = 0;
		}
		else ACInfo[playerid][acGiveAmmo][PC_s] = -65535;
		ACInfo[playerid][acSetWeapon][PC_s] = ACInfo[playerid][acSet][3] = PC_weaponid;
		ACInfo[playerid][acGtcGiveAmmo][PC_s] =
		ACInfo[playerid][acGtcSetWeapon][PC_s] =
		ACInfo[playerid][acGtc][2] = GetTickCount() + 2650;
	}
	return GivePlayerWeapon(playerid, PC_weaponid, PC_ammo);
}

PC_fpublic PC_SetPlayerAmmo(playerid, PC_weaponslot, PC_ammo)
{
	if(PC_ammo < -32768) PC_ammo = -32768;
	else if(PC_ammo > 32767) PC_ammo = 32767;
	if(16 <= PC_weaponslot <= 43)
	{
		new PC_s = PC_wSlot[PC_weaponslot];
		if(ACInfo[playerid][acWeapon][PC_s] > 0 || ACInfo[playerid][acSetWeapon][PC_s] > 0)
		{
			ACInfo[playerid][acNOPCount][1] = 0;
			ACInfo[playerid][acGiveAmmo][PC_s] = PC_ammo;
			ACInfo[playerid][acGtcGiveAmmo][PC_s] = GetTickCount() + 2650;
		}
	}
	return SetPlayerAmmo(playerid, PC_weaponslot, PC_ammo);
}

PC_fpublic PC_SetPlayerArmedWeapon(playerid, PC_weaponid)
{
	if(!SetPlayerArmedWeapon(playerid, PC_weaponid)) return 0;
	if(PC_IsValidWeapon(PC_weaponid))
	{
		new PC_s = PC_wSlot[PC_weaponid];
		if((PC_weaponid == ACInfo[playerid][acWeapon][PC_s] || PC_weaponid == ACInfo[playerid][acSetWeapon][PC_s]) &&
		(ACInfo[playerid][acAmmo][PC_s] != 0 || ACInfo[playerid][acGiveAmmo][PC_s] != 0))
		{
			ACInfo[playerid][acNOPCount][0] = 0;
			ACInfo[playerid][acSet][3] = PC_weaponid;
			ACInfo[playerid][acGtc][2] = GetTickCount() + 2650;
		}
	}
	return 1;
}

PC_fpublic PC_ResetPlayerWeapons(playerid)
{
	if(!ResetPlayerWeapons(playerid)) return 0;
	for(new PC_i = 12; PC_i >= 0; --PC_i)
	{
		ACInfo[playerid][acWeapon][PC_i] = ACInfo[playerid][acAmmo][PC_i] = 0;
		ACInfo[playerid][acSetWeapon][PC_i] = -1;
		ACInfo[playerid][acGiveAmmo][PC_i] = -65535;
	}
	ACInfo[playerid][acSet][3] = -1;
	ACInfo[playerid][acGtc][7] = GetTickCount() + 2650;
	return 1;
}

PC_fpublic PC_GivePlayerMoney(playerid, PC_money)
{
	if(!GivePlayerMoney(playerid, PC_money)) return 0;
	ACInfo[playerid][acNOPCount][11] = PC_MAX_MONEY_WARNINGS;
	ACInfo[playerid][acMoney] += PC_money;
	#undef PC_MAX_MONEY_WARNINGS
	return 1;
}

PC_fpublic PC_ResetPlayerMoney(playerid)
{
	if(!ResetPlayerMoney(playerid)) return 0;
	ACInfo[playerid][acNOPCount][11] = 0;
	ACInfo[playerid][acMoney] = 0;
	return 1;
}

PC_fpublic PC_GetPlayerMoney(playerid) return ACInfo[playerid][acMoney];

PC_fpublic PC_SetPlayerSpecialAction(playerid, PC_actionid)
{
	if(!SetPlayerSpecialAction(playerid, PC_actionid)) return 0;
	if(PC_actionid == SPECIAL_ACTION_USEJETPACK || SPECIAL_ACTION_CUFFED <= PC_actionid <= 25 ||
	(PC_actionid == SPECIAL_ACTION_USECELLPHONE || PC_actionid == 68 || SPECIAL_ACTION_DANCE1 <= PC_actionid <= SPECIAL_ACTION_DANCE4) && ACInfo[playerid][acVeh] == 0 ||
	PC_actionid == SPECIAL_ACTION_STOPUSECELLPHONE && ACInfo[playerid][acSpecAct] == SPECIAL_ACTION_USECELLPHONE ||
	(PC_actionid == SPECIAL_ACTION_HANDSUP || SPECIAL_ACTION_DRINK_BEER <= PC_actionid <= SPECIAL_ACTION_DRINK_SPRUNK) && ACInfo[playerid][acSpecAct] != SPECIAL_ACTION_ENTER_VEHICLE && ACInfo[playerid][acVeh] == 0 ||
	PC_actionid == SPECIAL_ACTION_NONE && ACInfo[playerid][acSpecAct] != SPECIAL_ACTION_DUCK &&
	ACInfo[playerid][acSpecAct] != SPECIAL_ACTION_ENTER_VEHICLE && ACInfo[playerid][acSpecAct] != SPECIAL_ACTION_HANDSUP)
	{
		ACInfo[playerid][acNOPCount][6] = 0;
		if((PC_actionid == 68 || SPECIAL_ACTION_HANDSUP <= PC_actionid <= SPECIAL_ACTION_USECELLPHONE || SPECIAL_ACTION_DRINK_BEER <= PC_actionid <= 25) &&
		SPECIAL_ACTION_DANCE1 <= ACInfo[playerid][acSpecAct] <= SPECIAL_ACTION_DANCE4 ||
		SPECIAL_ACTION_DRINK_BEER <= PC_actionid <= 25 && ACInfo[playerid][acSpecAct] == SPECIAL_ACTION_DUCK ||
		(PC_actionid == SPECIAL_ACTION_NONE || SPECIAL_ACTION_CUFFED <= PC_actionid <= 25) && ACInfo[playerid][acVeh] ||
		SPECIAL_ACTION_CUFFED <= PC_actionid <= 25 && ACInfo[playerid][acSpecAct] == SPECIAL_ACTION_ENTER_VEHICLE) ACInfo[playerid][acNextSpecAct] = PC_actionid;
		else
		{
			if(PC_actionid == SPECIAL_ACTION_STOPUSECELLPHONE) PC_actionid = SPECIAL_ACTION_NONE;
			else if(PC_actionid == SPECIAL_ACTION_USEJETPACK || PC_actionid == SPECIAL_ACTION_HANDSUP ||
			PC_actionid == 68 || SPECIAL_ACTION_DANCE1 <= PC_actionid <= SPECIAL_ACTION_DANCE4 ||
			SPECIAL_ACTION_DRINK_BEER <= PC_actionid <= SPECIAL_ACTION_DRINK_SPRUNK) ACInfo[playerid][acNextSpecAct] = ACInfo[playerid][acSpecAct];
			else ACInfo[playerid][acNextSpecAct] = -1;
			ACInfo[playerid][acSet][4] = PC_actionid;
			ACInfo[playerid][acGtc][6] = GetTickCount() + 3250;
		}
	}
	return 1;
}

PC_fpublic PC_SetPlayerInterior(playerid, PC_interiorid)
{
	if(!SetPlayerInterior(playerid, PC_interiorid)) return 0;
	ACInfo[playerid][acNOPCount][2] = 0;
	ACInfo[playerid][acSet][0] = PC_interiorid % 256;
	ACInfo[playerid][acGtc][0] = GetTickCount() + 3250;
	return 1;
}

PC_fpublic PC_SetPlayerPos(playerid, Float:PC_x, Float:PC_y, Float:PC_z)
{
	if(!SetPlayerPos(playerid, PC_x, PC_y, PC_z)) return 0;
	ACInfo[playerid][acSet][8] = 1;
	ACInfo[playerid][acNOPCount][10] = 0;
	ACInfo[playerid][acSetPosX] = PC_x;
	ACInfo[playerid][acSetPosY] = PC_y;
	ACInfo[playerid][acSetPosZ] = PC_z;
	ACInfo[playerid][acSetPosTick] =
	ACInfo[playerid][acGtc][11] = GetTickCount() + 3250;
	return 1;
}

PC_fpublic PC_SetPlayerPosFindZ(playerid, Float:PC_x, Float:PC_y, Float:PC_z)
{
	if(!SetPlayerPosFindZ(playerid, PC_x, PC_y, PC_z)) return 0;
	ACInfo[playerid][acSet][8] = 2;
	ACInfo[playerid][acTpToZ] = true;
	ACInfo[playerid][acNOPCount][10] = 0;
	ACInfo[playerid][acSetPosX] = PC_x;
	ACInfo[playerid][acSetPosY] = PC_y;
	ACInfo[playerid][acSetPosTick] =
	ACInfo[playerid][acGtc][11] = GetTickCount() + 3250;
	return 1;
}

PC_fpublic PC_SetPlayerVelocity(playerid, Float:PC_X, Float:PC_Y, Float:PC_Z)
{
	if(!SetPlayerVelocity(playerid, PC_X, PC_Y, PC_Z)) return 0;
	ACInfo[playerid][acSpeed] = PC_GetSpeed(PC_X, PC_Y, PC_Z);
	ACInfo[playerid][acGtc][10] = GetTickCount() + 1650;
	return 1;
}

PC_fpublic PC_PutPlayerInVehicle(playerid, PC_vehicleid, PC_seatid)
{
	if(!PutPlayerInVehicle(playerid, PC_vehicleid, PC_seatid)) return 0;
	if(!(SPECIAL_ACTION_DANCE1 <= ACInfo[playerid][acSpecAct] <= SPECIAL_ACTION_DANCE4) &&
	!(SPECIAL_ACTION_DRINK_BEER <= ACInfo[playerid][acSpecAct] <= SPECIAL_ACTION_DRINK_SPRUNK) &&
	GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(PC_vehicleid))
	{
		new PC_model = GetVehicleModel(PC_vehicleid);
		ACInfo[playerid][acNOPCount][7] = 0;
		ACInfo[playerid][acSet][9] = PC_vehicleid;
		if(PC_IsABus(PC_model) || PC_IsVehicleSeatOccupied(PC_vehicleid, PC_seatid) ||
		PC_seatid > PC_GetMaxPassengers(PC_model)) ACInfo[playerid][acSet][5] = -1;
		else ACInfo[playerid][acSet][5] = PC_seatid;
		ACInfo[playerid][acGtc][1] = GetTickCount() + 2650;
	}
	return 1;
}

PC_fpublic PC_RemovePlayerFromVehicle(playerid)
{
	if(!RemovePlayerFromVehicle(playerid)) return 0;
	ACInfo[playerid][acSet][11] = 1;
	ACInfo[playerid][acGtc][8] = GetTickCount() + 4650;
	return 1;
}

PC_fpublic PC_SetVehiclePos(vehicleid, Float:PC_x, Float:PC_y, Float:PC_z)
{
	if(!SetVehiclePos(vehicleid, PC_x, PC_y, PC_z)) return 0;
	new PC_driver = ACVehInfo[vehicleid][acDriver];
	if(PC_driver != INVALID_PLAYER_ID)
	{
		ACInfo[PC_driver][acSet][8] = 3;
		ACInfo[PC_driver][acNOPCount][10] = 0;
		ACInfo[PC_driver][acSetPosX] = PC_x;
		ACInfo[PC_driver][acSetPosY] = PC_y;
		ACInfo[PC_driver][acSetPosZ] = PC_z;
		ACInfo[PC_driver][acSetPosTick] =
		ACInfo[PC_driver][acGtc][11] = GetTickCount() + 3250;
	}
	else
	{
		ACVehInfo[vehicleid][acPosX] = PC_x;
		ACVehInfo[vehicleid][acPosY] = PC_y;
		ACVehInfo[vehicleid][acPosZ] = PC_z;
	}
	return 1;
}

PC_fpublic PC_SetVehicleVelocity(vehicleid, Float:PC_X, Float:PC_Y, Float:PC_Z)
{
	if(!SetVehicleVelocity(vehicleid, PC_X, PC_Y, PC_Z)) return 0;
	new PC_driver = ACVehInfo[vehicleid][acDriver];
	if(PC_driver != INVALID_PLAYER_ID)
	{
		ACVehInfo[vehicleid][acVelX] = PC_X;
		ACVehInfo[vehicleid][acVelY] = PC_Y;
		ACVehInfo[vehicleid][acVelZ] = PC_Z;
		ACInfo[PC_driver][acGtc][9] = GetTickCount() + 1650;
	}
	return 1;
}

PC_fpublic PC_SetVehicleAngularVelocity(vehicleid, Float:PC_X, Float:PC_Y, Float:PC_Z)
{
	if(!SetVehicleAngularVelocity(vehicleid, PC_X, PC_Y, PC_Z)) return 0;
	new PC_driver = ACVehInfo[vehicleid][acDriver];
	if(PC_driver != INVALID_PLAYER_ID)
	{
		ACVehInfo[vehicleid][acVelX] = PC_X;
		ACVehInfo[vehicleid][acVelY] = PC_Y;
		ACVehInfo[vehicleid][acVelZ] = PC_Z;
		ACInfo[PC_driver][acGtc][9] = GetTickCount() + 1650;
	}
	return 1;
}

PC_fpublic PC_LinkVehicleToInterior(vehicleid, PC_interiorid)
{
	if(!LinkVehicleToInterior(vehicleid, PC_interiorid)) return 0;
	ACVehInfo[vehicleid][acInt] = PC_interiorid % 256;
	return 1;
}

PC_fpublic PC_ChangeVehiclePaintjob(vehicleid, PC_paintjobid)
{
	ACVehInfo[vehicleid][acPaintJob] = PC_paintjobid;
	return ChangeVehiclePaintjob(vehicleid, PC_paintjobid);
}

PC_fpublic PC_SetVehicleHealth(vehicleid, Float:PC_health)
{
	if(!SetVehicleHealth(vehicleid, PC_health)) return 0;
	new PC_driver = ACVehInfo[vehicleid][acDriver];
	if(PC_driver != INVALID_PLAYER_ID)
	{
		ACInfo[PC_driver][acNOPCount][4] = 0;
		ACInfo[PC_driver][acSetVehHealth] = PC_health;
		ACInfo[PC_driver][acGtc][4] = GetTickCount() + 2650;
	}
	else ACVehInfo[vehicleid][acHealth] = PC_health;
	return 1;
}

PC_fpublic PC_RepairVehicle(vehicleid)
{
	if(!RepairVehicle(vehicleid)) return 0;
	new PC_driver = ACVehInfo[vehicleid][acDriver];
	if(PC_driver != INVALID_PLAYER_ID)
	{
		ACInfo[PC_driver][acNOPCount][4] = 0;
		ACInfo[PC_driver][acSetVehHealth] = 1000.0;
		ACInfo[PC_driver][acGtc][4] = GetTickCount() + 2650;
	}
	else ACVehInfo[vehicleid][acHealth] = 1000.0;
	return 1;
}

PC_fpublic PC_SetVehicleToRespawn(vehicleid)
{
	new PC_driver = ACVehInfo[vehicleid][acDriver];
	if(PC_driver != INVALID_PLAYER_ID) ACInfo[PC_driver][acGtc][9] = GetTickCount() + 1650;
	return SetVehicleToRespawn(vehicleid);
}

PC_fpublic PC_EnableAntiCheat(code, enable)
{
	if(!(0 <= code < sizeof PC_ACAllow)) return 0;
	if(code == 42)
	{
		if(enable)
		{
			if(!PC_ACAllow[code])
			{
				#if !PC_USE_QUERY
					PC_QueryEnable = !!GetServerVarAsBool("query");
				#endif
				PC_RconEnable = !!GetServerVarAsBool("rcon");
			}
			#if !PC_USE_QUERY
				SendRconCommand("query 0");
			#endif
			SendRconCommand("rcon 0");
		}
		else
		{
			static PC_strtmp[9];
			#if !PC_USE_QUERY
				format(PC_strtmp, sizeof PC_strtmp, "query %b", PC_QueryEnable);
				SendRconCommand(PC_strtmp);
			#endif
			format(PC_strtmp, sizeof PC_strtmp, "rcon %b", PC_RconEnable);
			SendRconCommand(PC_strtmp);
		}
	}
	PC_ACAllow[code] = !!enable;
	if(enable)
	{
		#if defined foreach
			foreach(new PC_i : Player)
		#else
			#if defined GetPlayerPoolSize
				for(new PC_i = GetPlayerPoolSize(); PC_i >= 0; --PC_i)
			#else
				for(new PC_i = MAX_PLAYERS - 1; PC_i >= 0; --PC_i)
			#endif
			{
				if(IsPlayerConnected(PC_i))
		#endif
		{
			ACInfo[PC_i][acACAllow][code] = PC_ACAllow[code];
			switch(code)
			{
				case 7: ACInfo[PC_i][acCheatCount][15] = 0;
				case 8: ACInfo[PC_i][acCheatCount][3] = 0;
				case 9: ACInfo[PC_i][acCheatCount][17] = 0;
				case 10: ACInfo[PC_i][acCheatCount][16] = ACInfo[PC_i][acCheatCount][20] = 0;
				#if PC_USE_AMMUNATIONS
					case 15: ACInfo[PC_i][acCheatCount][10] = 0;
				#endif
				case 17: ACInfo[PC_i][acCheatCount][7] = 0;
				case 19: ACInfo[PC_i][acCheatCount][9] = 0;
				case 20: ACInfo[PC_i][acCheatCount][11] = 0;
				#if PC_USE_TUNING_GARAGES
					case 23: ACInfo[PC_i][acCheatCount][12] = 0;
				#endif
				case 26: ACInfo[PC_i][acCheatCount][14] = ACInfo[PC_i][acCheatCount][8] = 0;
				case 29: ACInfo[PC_i][acCheatCount][13] = ACInfo[PC_i][acCheatCount][6] = 0;
				case 30: ACInfo[PC_i][acCheatCount][19] = 0;
				case 31: ACInfo[PC_i][acCheatCount][4] = 0;
				case 34: ACInfo[PC_i][acCheatCount][5] = 0;
				case 38: ACInfo[PC_i][acCheatCount][0] = 0;
				case 47: ACInfo[PC_i][acCheatCount][18] = 0;
			}
		}
		#if !defined foreach
			}
		#endif
	}
	else
	{
		#if defined foreach
			foreach(new PC_i : Player) ACInfo[PC_i][acACAllow][code] = PC_ACAllow[code];
		#else
			#if defined GetPlayerPoolSize
				for(new PC_i = GetPlayerPoolSize(); PC_i >= 0; --PC_i)
			#else
				for(new PC_i = MAX_PLAYERS - 1; PC_i >= 0; --PC_i)
			#endif
			{
				if(IsPlayerConnected(PC_i)) ACInfo[PC_i][acACAllow][code] = PC_ACAllow[code];
			}
		#endif
	}
	return 1;
}

PC_fpublic PC_EnableAntiNOP(nopcode, enable)
{
	if(!(0 <= nopcode < sizeof PC_NOPAllow)) return 0;
	PC_NOPAllow[nopcode] = !!enable;
	#if defined foreach
		foreach(new PC_i : Player) ACInfo[PC_i][acNOPAllow][nopcode] = PC_NOPAllow[nopcode];
	#else
		#if defined GetPlayerPoolSize
			for(new PC_i = GetPlayerPoolSize(); PC_i >= 0; --PC_i)
		#else
			for(new PC_i = MAX_PLAYERS - 1; PC_i >= 0; --PC_i)
		#endif
		{
			if(IsPlayerConnected(PC_i)) ACInfo[PC_i][acNOPAllow][nopcode] = PC_NOPAllow[nopcode];
		}
	#endif
	return 1;
}

PC_fpublic PC_EnableAntiCheatForPlayer(playerid, code, enable)
{
	if(!(0 <= code < sizeof PC_ACAllow)) return -1;
	ACInfo[playerid][acACAllow][code] = !!enable;
	if(enable)
	{
		switch(code)
		{
			case 7: ACInfo[playerid][acCheatCount][15] = 0;
			case 8: ACInfo[playerid][acCheatCount][3] = 0;
			case 9: ACInfo[playerid][acCheatCount][17] = 0;
			case 10: ACInfo[playerid][acCheatCount][16] = ACInfo[playerid][acCheatCount][20] = 0;
			#if PC_USE_AMMUNATIONS
				case 15: ACInfo[playerid][acCheatCount][10] = 0;
			#endif
			case 17: ACInfo[playerid][acCheatCount][7] = 0;
			case 19: ACInfo[playerid][acCheatCount][9] = 0;
			case 20: ACInfo[playerid][acCheatCount][11] = 0;
			#if PC_USE_TUNING_GARAGES
				case 23: ACInfo[playerid][acCheatCount][12] = 0;
			#endif
			case 26: ACInfo[playerid][acCheatCount][14] = ACInfo[playerid][acCheatCount][8] = 0;
			case 29: ACInfo[playerid][acCheatCount][13] = ACInfo[playerid][acCheatCount][6] = 0;
			case 30: ACInfo[playerid][acCheatCount][19] = 0;
			case 31: ACInfo[playerid][acCheatCount][4] = 0;
			case 34: ACInfo[playerid][acCheatCount][5] = 0;
			case 38: ACInfo[playerid][acCheatCount][0] = 0;
			case 47: ACInfo[playerid][acCheatCount][18] = 0;
		}
	}
	return 1;
}

PC_fpublic PC_EnableAntiNOPForPlayer(playerid, nopcode, enable)
{
	if(!(0 <= nopcode < sizeof PC_NOPAllow)) return -1;
	ACInfo[playerid][acNOPAllow][nopcode] = !!enable;
	return 1;
}

PC_fpublic PC_IsAntiCheatEnabled(code)
{
	if(!(0 <= code < sizeof PC_ACAllow)) return 0;
	return PC_ACAllow[code];
}

PC_fpublic PC_IsAntiNOPEnabled(nopcode)
{
	if(!(0 <= nopcode < sizeof PC_NOPAllow)) return 0;
	return PC_NOPAllow[nopcode];
}

PC_fpublic PC_IsAntiCheatEnabledForPlayer(playerid, code)
{
	if(!(0 <= code < sizeof PC_ACAllow)) return 0;
	return ACInfo[playerid][acACAllow][code];
}

PC_fpublic PC_IsAntiNOPEnabledForPlayer(playerid, nopcode)
{
	if(!(0 <= nopcode < sizeof PC_NOPAllow)) return 0;
	return ACInfo[playerid][acNOPAllow][nopcode];
}

PC_fpublic PC_AntiCheatGetSpeed(playerid) return ACInfo[playerid][acSpeed];

PC_fpublic PC_AntiCheatGetAnimationIndex(playerid) return ACInfo[playerid][acAnim];

PC_fpublic PC_AntiCheatGetDialog(playerid) return ACInfo[playerid][acDialog];

PC_fpublic PC_AntiCheatGetEnterVehicle(playerid) return ACInfo[playerid][acEnterVeh];

PC_fpublic PC_AntiCheatGetVehicleID(playerid) return ACInfo[playerid][acVeh];

PC_fpublic PC_AntiCheatGetWeapon(playerid) return ACInfo[playerid][acLastWeapon];

PC_fpublic PC_AntiCheatGetVehicleSeat(playerid) return ACInfo[playerid][acSeat];

PC_fpublic PC_AntiCheatGetSpecialAction(playerid) return ACInfo[playerid][acSpecAct];

PC_fpublic PC_AntiCheatGetLastSpecialActio(playerid) return ACInfo[playerid][acLastSpecAct];

PC_fpublic PC_AntiCheatGetLastShotWeapon(playerid) return ACInfo[playerid][acLastShot];

PC_fpublic PC_AntiCheatGetLastPickup(playerid) return ACInfo[playerid][acLastPickup];

PC_fpublic PC_AntiCheatGetLastUpdateTime(playerid) return ACInfo[playerid][acUpdateTick];

PC_fpublic PC_AntiCheatGetLastReloadTime(playerid) return ACInfo[playerid][acReloadTick];

PC_fpublic PC_AntiCheatGetLastEnteredVehTi(playerid) return ACInfo[playerid][acEnterVehTick];

PC_fpublic PC_AntiCheatGetLastShotTime(playerid) return ACInfo[playerid][acShotTick];

PC_fpublic PC_AntiCheatGetLastSpawnTime(playerid) return ACInfo[playerid][acSpawnTick];

PC_fpublic PC_AntiCheatIntEnterExitsIsEnab(playerid) return ACInfo[playerid][acIntEnterExits];

PC_fpublic PC_AntiCheatStuntBonusIsEnabled(playerid) return ACInfo[playerid][acStuntBonus];

PC_fpublic PC_AntiCheatIsInModShop(playerid) return ACInfo[playerid][acModShop];

PC_fpublic PC_AntiCheatIsFrozen(playerid) return !ACInfo[playerid][acUnFrozen];

PC_fpublic PC_AntiCheatIsDead(playerid) return ACInfo[playerid][acDead];

PC_fpublic PC_AntiCheatIsConnected(playerid) return ACInfo[playerid][acOnline];

PC_fpublic PC_AntiCheatKickWithDesync(playerid, code)
{
	if(ACInfo[playerid][acKicked] > 0) return -1;
	new PC_gpp = GetPlayerPing(playerid) + 150;
	ACInfo[playerid][acKickTimerID] = SetTimerEx("PC_KickTimer", (PC_gpp > PC_MAX_PING ? PC_MAX_PING : PC_gpp), false, "i", playerid);
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(code == 4) ACInfo[playerid][acKickVeh] = GetPlayerVehicleID(playerid);
		ACInfo[playerid][acKicked] = 2;
	}
	else ACInfo[playerid][acKicked] = 1;
	return 1;
}

PC_fpublic PC_AntiCheatIsKickedWithDesync(playerid) return ACInfo[playerid][acKicked];

PC_fpublic PC_AntiCheatGetNextDialog(playerid) return ACInfo[playerid][acNextDialog];

PC_fpublic PC_AntiCheatGetVehicleDriver(vehicleid) return ACVehInfo[vehicleid][acDriver];

PC_fpublic PC_AntiCheatGetVehicleInterior(vehicleid) return ACVehInfo[vehicleid][acInt];

PC_fpublic PC_AntiCheatGetVehiclePaintjob(vehicleid) return ACVehInfo[vehicleid][acPaintJob];

PC_fpublic PC_AntiCheatGetInterior(playerid) return ACInfo[playerid][acInt];

#endif

stock acc_AddStaticVehicle(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, color1, color2)
{
	new PC_vehicleid = AddStaticVehicle(modelid, spawn_x, spawn_y, spawn_z, z_angle, color1, color2);
	if(PC_vehicleid != INVALID_VEHICLE_ID)
	{
		#if defined FILTERSCRIPT
			CallRemoteFunction("PC_AddStaticVehicle", "iffff", PC_vehicleid, spawn_x, spawn_y, spawn_z, z_angle);
		#else
			PC_AddStaticVehicle(PC_vehicleid, spawn_x, spawn_y, spawn_z, z_angle);
		#endif
	}
	return PC_vehicleid;
}

#if defined _ALS_AddStaticVehicle
	#undef AddStaticVehicle
#else
	#define _ALS_AddStaticVehicle
#endif
#define AddStaticVehicle acc_AddStaticVehicle

#if defined OnVehicleSirenStateChange
	stock acc_AddStaticVehicleEx(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, color1, color2, respawn_delay, addsiren = 0)
	{
		new PC_vehicleid = AddStaticVehicleEx(modelid, spawn_x, spawn_y, spawn_z, z_angle, color1, color2, respawn_delay, addsiren);
#else
	stock acc_AddStaticVehicleEx(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, color1, color2, respawn_delay)
	{
		new PC_vehicleid = AddStaticVehicleEx(modelid, spawn_x, spawn_y, spawn_z, z_angle, color1, color2, respawn_delay);
#endif
	if(PC_vehicleid != INVALID_VEHICLE_ID)
	{
		#if defined FILTERSCRIPT
			CallRemoteFunction("PC_AddStaticVehicle", "iffff", PC_vehicleid, spawn_x, spawn_y, spawn_z, z_angle);
		#else
			PC_AddStaticVehicle(PC_vehicleid, spawn_x, spawn_y, spawn_z, z_angle);
		#endif
	}
	return PC_vehicleid;
}

#if defined _ALS_AddStaticVehicleEx
	#undef AddStaticVehicleEx
#else
	#define _ALS_AddStaticVehicleEx
#endif
#define AddStaticVehicleEx acc_AddStaticVehicleEx

#if defined OnVehicleSirenStateChange
	stock acc_CreateVehicle(vehicletype, Float:x, Float:y, Float:z, Float:rotation, color1, color2, respawn_delay, addsiren = 0)
	{
		new PC_vehicleid = CreateVehicle(vehicletype, x, y, z, rotation, color1, color2, respawn_delay, addsiren);
#else
	stock acc_CreateVehicle(vehicletype, Float:x, Float:y, Float:z, Float:rotation, color1, color2, respawn_delay)
	{
		new PC_vehicleid = CreateVehicle(vehicletype, x, y, z, rotation, color1, color2, respawn_delay);
#endif
	if(PC_vehicleid != INVALID_VEHICLE_ID && PC_vehicleid > 0)
	{
		#if defined FILTERSCRIPT
			CallRemoteFunction("PC_CreateVehicle", "iiffff", PC_vehicleid, vehicletype, x, y, z, rotation);
		#else
			PC_CreateVehicle(PC_vehicleid, vehicletype, x, y, z, rotation);
		#endif
	}
	return PC_vehicleid;
}

#if defined _ALS_CreateVehicle
	#undef CreateVehicle
#else
	#define _ALS_CreateVehicle
#endif
#define CreateVehicle acc_CreateVehicle

stock acc_AddPlayerClass(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo)
{
	new PC_classid = AddPlayerClass(modelid, spawn_x, spawn_y, spawn_z, z_angle, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo);
	#if defined FILTERSCRIPT
		CallRemoteFunction("PC_AddPlayerClass", "ifffiiiiii", PC_classid, spawn_x, spawn_y, spawn_z, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo);
	#else
		PC_AddPlayerClass(PC_classid, spawn_x, spawn_y, spawn_z, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo);
	#endif
	return PC_classid;
}

#if defined _ALS_AddPlayerClass
	#undef AddPlayerClass
#else
	#define _ALS_AddPlayerClass
#endif
#define AddPlayerClass acc_AddPlayerClass

stock acc_AddPlayerClassEx(teamid, modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo)
{
	new PC_classid = AddPlayerClassEx(teamid, modelid, spawn_x, spawn_y, spawn_z, z_angle, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo);
	#if defined FILTERSCRIPT
		CallRemoteFunction("PC_AddPlayerClass", "ifffiiiiii", PC_classid, spawn_x, spawn_y, spawn_z, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo);
	#else
		PC_AddPlayerClass(PC_classid, spawn_x, spawn_y, spawn_z, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo);
	#endif
	return PC_classid;
}

#if defined _ALS_AddPlayerClassEx
	#undef AddPlayerClassEx
#else
	#define _ALS_AddPlayerClassEx
#endif
#define AddPlayerClassEx acc_AddPlayerClassEx

stock orig_SetSpawnInfo(playerid, team, skin, Float:x, Float:y, Float:z, Float:rotation, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo)
	return SetSpawnInfo(playerid, team, skin, x, y, z, rotation, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo);

stock acc_SetSpawnInfo(playerid, team, skin, Float:x, Float:y, Float:z, Float:rotation, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_SetSpawnInfo", "iiiffffiiiiii", playerid, team, skin, x, y, z, rotation, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo);
	#else
		return PC_SetSpawnInfo(playerid, team, skin, x, y, z, rotation, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo);
	#endif
}

#if defined _ALS_SetSpawnInfo
	#undef SetSpawnInfo
#else
	#define _ALS_SetSpawnInfo
#endif
#define SetSpawnInfo acc_SetSpawnInfo

stock acc_AddStaticPickup(model, type, Float:X, Float:Y, Float:Z, virtualworld = 0)
{
	new PC_pickupid = CreatePickup(model, type, X, Y, Z, virtualworld);
	if(PC_pickupid != -1)
	{
		#if defined FILTERSCRIPT
			return CallRemoteFunction("PC_AddStaticPickup", "iiifff", PC_pickupid, model, type, X, Y, Z);
		#else
			return PC_AddStaticPickup(PC_pickupid, model, type, X, Y, Z);
		#endif
	}
	return 0;
}

#if defined _ALS_AddStaticPickup
	#undef AddStaticPickup
#else
	#define _ALS_AddStaticPickup
#endif
#define AddStaticPickup acc_AddStaticPickup

stock acc_CreatePickup(model, type, Float:X, Float:Y, Float:Z, virtualworld = 0)
{
	new PC_pickupid = CreatePickup(model, type, X, Y, Z, virtualworld);
	if(PC_pickupid != -1)
	{
		#if defined FILTERSCRIPT
			CallRemoteFunction("PC_CreatePickup", "iiifff", PC_pickupid, model, type, X, Y, Z);
		#else
			PC_CreatePickup(PC_pickupid, model, type, X, Y, Z);
		#endif
	}
	return PC_pickupid;
}

#if defined _ALS_CreatePickup
	#undef CreatePickup
#else
	#define _ALS_CreatePickup
#endif
#define CreatePickup acc_CreatePickup

#if defined CreateDynamicPickup
	#if defined STREAMER_ENABLE_TAGS
		stock STREAMER_TAG_PICKUP:acc_CreateDynamicPickup(modelid, type, Float:x, Float:y, Float:z, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = 200.0, STREAMER_TAG_AREA:areaid = STREAMER_TAG_AREA:-1, priority = 0)
		{
			new STREAMER_TAG_PICKUP:PC_pickupid = CreateDynamicPickup(modelid, type, x, y, z, worldid, interiorid, playerid, streamdistance, areaid, priority);
	#else
		stock acc_CreateDynamicPickup(modelid, type, Float:x, Float:y, Float:z, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = 200.0, areaid = -1, priority = 0)
		{
			new PC_pickupid = CreateDynamicPickup(modelid, type, x, y, z, worldid, interiorid, playerid, streamdistance, areaid, priority);
	#endif
		if(_:PC_pickupid > 0)
		{
			#if defined FILTERSCRIPT
				CallRemoteFunction("PC_CreateDynamicPickup", "iii", PC_pickupid, modelid, type);
			#elseif PC_USE_PICKUP_WEAPONS
				PC_CreateDynamicPickup(PC_pickupid, modelid, type);
			#endif
		}
		return PC_pickupid;
	}

	#if defined _ALS_CreateDynamicPickup
		#undef CreateDynamicPickup
	#else
		#define _ALS_CreateDynamicPickup
	#endif
	#define CreateDynamicPickup acc_CreateDynamicPickup
#endif

#if defined CreateDynamicPickupEx
	#if defined STREAMER_ENABLE_TAGS
		stock STREAMER_TAG_PICKUP:acc_CreateDynamicPickupEx(modelid, type, Float:x, Float:y, Float:z, Float:streamdistance = 200.0, const worlds[] = { -1 }, const interiors[] = { -1 }, const players[] = { -1 }, const STREAMER_TAG_AREA:areas[] = { STREAMER_TAG_AREA:-1 }, priority = 0, maxworlds = sizeof worlds, maxinteriors = sizeof interiors, maxplayers = sizeof players, maxareas = sizeof areas)
		{
			new STREAMER_TAG_PICKUP:PC_pickupid = CreateDynamicPickupEx(modelid, type, x, y, z, streamdistance, worlds, interiors, players, areas, priority, maxworlds, maxinteriors, maxplayers, maxareas);
	#else
			stock acc_CreateDynamicPickupEx(modelid, type, Float:x, Float:y, Float:z, Float:streamdistance = 200.0, const worlds[] = { -1 }, const interiors[] = { -1 }, const players[] = { -1 }, const areas[] = { -1 }, priority = 0, maxworlds = sizeof worlds, maxinteriors = sizeof interiors, maxplayers = sizeof players, maxareas = sizeof areas)
		{
			new PC_pickupid = CreateDynamicPickupEx(modelid, type, x, y, z, streamdistance, worlds, interiors, players, areas, priority, maxworlds, maxinteriors, maxplayers, maxareas);
	#endif
		if(_:PC_pickupid > 0)
		{
			#if defined FILTERSCRIPT
				CallRemoteFunction("PC_CreateDynamicPickup", "iii", PC_pickupid, modelid, type);
			#elseif PC_USE_PICKUP_WEAPONS
				PC_CreateDynamicPickup(PC_pickupid, modelid, type);
			#endif
		}
		return PC_pickupid;
	}

	#if defined _ALS_CreateDynamicPickupEx
		#undef CreateDynamicPickupEx
	#else
		#define _ALS_CreateDynamicPickupEx
	#endif
	#define CreateDynamicPickupEx acc_CreateDynamicPickupEx
#endif

stock acc_DestroyVehicle(vehicleid)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_DestroyVehicle", "i", vehicleid);
	#else
		return PC_DestroyVehicle(vehicleid);
	#endif
}

#if defined _ALS_DestroyVehicle
	#undef DestroyVehicle
#else
	#define _ALS_DestroyVehicle
#endif
#define DestroyVehicle acc_DestroyVehicle

stock acc_DestroyPickup(pickup)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_DestroyPickup", "i", pickup);
	#else
		return PC_DestroyPickup(pickup);
	#endif
}

#if defined _ALS_DestroyPickup
	#undef DestroyPickup
#else
	#define _ALS_DestroyPickup
#endif
#define DestroyPickup acc_DestroyPickup

stock acc_DisableInteriorEnterExits()
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_DisableInteriorEnterExits", "");
	#else
		return PC_DisableInteriorEnterExits();
	#endif
}

#if defined _ALS_DisableInteriorEnterExits
	#undef DisableInteriorEnterExits
#else
	#define _ALS_DisableInteriorEnterExits
#endif
#define DisableInteriorEnterExits acc_DisableInteriorEnterExits

stock acc_UsePlayerPedAnims()
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_UsePlayerPedAnims", "");
	#else
		return PC_UsePlayerPedAnims();
	#endif
}

#if defined _ALS_UsePlayerPedAnims
	#undef UsePlayerPedAnims
#else
	#define _ALS_UsePlayerPedAnims
#endif
#define UsePlayerPedAnims acc_UsePlayerPedAnims

#if defined EnableVehicleFriendlyFire
	stock acc_EnableVehicleFriendlyFire()
	{
		#if defined FILTERSCRIPT
			return CallRemoteFunction("PC_EnableVehicleFriendlyFire", "");
		#else
			return PC_EnableVehicleFriendlyFire();
		#endif
	}

	#if defined _ALS_EnableVehicleFriendlyFire
		#undef EnableVehicleFriendlyFire
	#else
		#define _ALS_EnableVehicleFriendlyFire
	#endif
	#define EnableVehicleFriendlyFire acc_EnableVehicleFriendlyFire
#endif

stock acc_EnableStuntBonusForAll(enable)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_EnableStuntBonusForAll", "i", enable);
	#else
		return PC_EnableStuntBonusForAll(enable);
	#endif
}

#if defined _ALS_EnableStuntBonusForAll
	#undef EnableStuntBonusForAll
#else
	#define _ALS_EnableStuntBonusForAll
#endif
#define EnableStuntBonusForAll acc_EnableStuntBonusForAll

stock acc_EnableStuntBonusForPlayer(playerid, enable)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_EnableStuntBonusForPlayer", "ii", playerid, enable);
	#else
		return PC_EnableStuntBonusForPlayer(playerid, enable);
	#endif
}

#if defined _ALS_EnableStuntBonusForPlayer
	#undef EnableStuntBonusForPlayer
#else
	#define _ALS_EnableStuntBonusForPlayer
#endif
#define EnableStuntBonusForPlayer acc_EnableStuntBonusForPlayer

#if defined _inc_y_dialog || defined _INC_y_dialog
	stock PC_Dialog_Show(playerid, style, string:title[], string:caption[], string:button1[], string:button2[] = "", dialog = -1)
	{
		if(!(0 <= playerid < MAX_PLAYERS))
		{
			#if defined FILTERSCRIPT
				CallRemoteFunction("PC_fs_ShowPlayerDialog", "id", playerid, dialog);
			#else
				PC_ShowPlayerDialog(playerid, dialog);
			#endif
		}
		return Dialog_Show(playerid, style, title, caption, button1, button2, dialog);
	}

	#if defined _ALS_Dialog_Show
		#undef Dialog_Show
	#else
		#define _ALS_Dialog_Show
	#endif
	#define Dialog_Show PC_Dialog_Show
#endif

stock orig_ShowPlayerDialog(playerid, dialogid, style, const caption[], const info[], const button1[], const button2[]) return ShowPlayerDialog(playerid, dialogid, style, caption, info, button1, button2);

stock acc_ShowPlayerDialog(playerid, dialogid, style, const caption[], const info[], const button1[], const button2[])
{
	if(ShowPlayerDialog(playerid, dialogid, style, caption, info, button1, button2))
	{
		#if defined FILTERSCRIPT
			return CallRemoteFunction("PC_fs_ShowPlayerDialog", "id", playerid, dialogid);
		#else
			return PC_ShowPlayerDialog(playerid, dialogid);
		#endif
	}
	return 0;
}

#if defined _ALS_ShowPlayerDialog
	#undef ShowPlayerDialog
#else
	#define _ALS_ShowPlayerDialog
#endif
#define ShowPlayerDialog acc_ShowPlayerDialog

stock orig_TogglePlayerControllable(playerid, toggle) return TogglePlayerControllable(playerid, toggle);

stock acc_TogglePlayerControllable(playerid, toggle)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_TogglePlayerControllable", "ii", playerid, toggle);
	#else
		return PC_TogglePlayerControllable(playerid, toggle);
	#endif
}

#if defined _ALS_TogglePlayerControllable
	#undef TogglePlayerControllable
#else
	#define _ALS_TogglePlayerControllable
#endif
#define TogglePlayerControllable acc_TogglePlayerControllable

stock orig_TogglePlayerSpectating(playerid, toggle) return TogglePlayerSpectating(playerid, toggle);

stock acc_TogglePlayerSpectating(playerid, toggle)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_TogglePlayerSpectating", "ii", playerid, toggle);
	#else
		return PC_TogglePlayerSpectating(playerid, toggle);
	#endif
}

#if defined _ALS_TogglePlayerSpectating
	#undef TogglePlayerSpectating
#else
	#define _ALS_TogglePlayerSpectating
#endif
#define TogglePlayerSpectating acc_TogglePlayerSpectating

stock orig_SpawnPlayer(playerid) return SpawnPlayer(playerid);

stock acc_SpawnPlayer(playerid)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_SpawnPlayer", "i", playerid);
	#else
		return PC_SpawnPlayer(playerid);
	#endif
}

#if defined _ALS_SpawnPlayer
	#undef SpawnPlayer
#else
	#define _ALS_SpawnPlayer
#endif
#define SpawnPlayer acc_SpawnPlayer

stock orig_SetPlayerHealth(playerid, Float:health) return SetPlayerHealth(playerid, health);

stock acc_SetPlayerHealth(playerid, Float:health)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_SetPlayerHealth", "if", playerid, health);
	#else
		return PC_SetPlayerHealth(playerid, health);
	#endif
}

#if defined _ALS_SetPlayerHealth
	#undef SetPlayerHealth
#else
	#define _ALS_SetPlayerHealth
#endif
#define SetPlayerHealth acc_SetPlayerHealth

stock orig_SetPlayerArmour(playerid, Float:armour) return SetPlayerArmour(playerid, armour);

stock acc_SetPlayerArmour(playerid, Float:armour)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_SetPlayerArmour", "if", playerid, armour);
	#else
		return PC_SetPlayerArmour(playerid, armour);
	#endif
}

#if defined _ALS_SetPlayerArmour
	#undef SetPlayerArmour
#else
	#define _ALS_SetPlayerArmour
#endif
#define SetPlayerArmour acc_SetPlayerArmour

stock orig_GivePlayerWeapon(playerid, weaponid, ammo) return GivePlayerWeapon(playerid, weaponid, ammo);

stock acc_GivePlayerWeapon(playerid, weaponid, ammo)
{
	if(!(0 <= playerid < MAX_PLAYERS)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_GivePlayerWeapon", "iid", playerid, weaponid, ammo);
	#else
		return PC_GivePlayerWeapon(playerid, weaponid, ammo);
	#endif
}

#if defined _ALS_GivePlayerWeapon
	#undef GivePlayerWeapon
#else
	#define _ALS_GivePlayerWeapon
#endif
#define GivePlayerWeapon acc_GivePlayerWeapon

stock orig_SetPlayerAmmo(playerid, weaponslot, ammo) return SetPlayerAmmo(playerid, weaponslot, ammo);

stock acc_SetPlayerAmmo(playerid, weaponslot, ammo)
{
	if(!(0 <= playerid < MAX_PLAYERS)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_SetPlayerAmmo", "iid", playerid, weaponslot, ammo);
	#else
		return PC_SetPlayerAmmo(playerid, weaponslot, ammo);
	#endif
}

#if defined _ALS_SetPlayerAmmo
	#undef SetPlayerAmmo
#else
	#define _ALS_SetPlayerAmmo
#endif
#define SetPlayerAmmo acc_SetPlayerAmmo

stock orig_SetPlayerArmedWeapon(playerid, weaponid) return SetPlayerArmedWeapon(playerid, weaponid);

stock acc_SetPlayerArmedWeapon(playerid, weaponid)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_SetPlayerArmedWeapon", "ii", playerid, weaponid);
	#else
		return PC_SetPlayerArmedWeapon(playerid, weaponid);
	#endif
}

#if defined _ALS_SetPlayerArmedWeapon
	#undef SetPlayerArmedWeapon
#else
	#define _ALS_SetPlayerArmedWeapon
#endif
#define SetPlayerArmedWeapon acc_SetPlayerArmedWeapon

stock orig_ResetPlayerWeapons(playerid) return ResetPlayerWeapons(playerid);

stock acc_ResetPlayerWeapons(playerid)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_ResetPlayerWeapons", "i", playerid);
	#else
		return PC_ResetPlayerWeapons(playerid);
	#endif
}

#if defined _ALS_ResetPlayerWeapons
	#undef ResetPlayerWeapons
#else
	#define _ALS_ResetPlayerWeapons
#endif
#define ResetPlayerWeapons acc_ResetPlayerWeapons

stock orig_GivePlayerMoney(playerid, money) return GivePlayerMoney(playerid, money);

stock acc_GivePlayerMoney(playerid, money)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_GivePlayerMoney", "id", playerid, money);
	#else
		return PC_GivePlayerMoney(playerid, money);
	#endif
}

#if defined _ALS_GivePlayerMoney
	#undef GivePlayerMoney
#else
	#define _ALS_GivePlayerMoney
#endif
#define GivePlayerMoney acc_GivePlayerMoney

stock orig_ResetPlayerMoney(playerid) return ResetPlayerMoney(playerid);

stock acc_ResetPlayerMoney(playerid)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_ResetPlayerMoney", "i", playerid);
	#else
		return PC_ResetPlayerMoney(playerid);
	#endif
}

#if defined _ALS_ResetPlayerMoney
	#undef ResetPlayerMoney
#else
	#define _ALS_ResetPlayerMoney
#endif
#define ResetPlayerMoney acc_ResetPlayerMoney

stock orig_GetPlayerMoney(playerid) return GetPlayerMoney(playerid);

stock acc_GetPlayerMoney(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_GetPlayerMoney", "i", playerid);
	#else
		return PC_GetPlayerMoney(playerid);
	#endif
}

#if defined _ALS_GetPlayerMoney
	#undef GetPlayerMoney
#else
	#define _ALS_GetPlayerMoney
#endif
#define GetPlayerMoney acc_GetPlayerMoney

stock orig_SetPlayerSpecialAction(playerid, actionid) return SetPlayerSpecialAction(playerid, actionid);

stock acc_SetPlayerSpecialAction(playerid, actionid)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_SetPlayerSpecialAction", "ii", playerid, actionid);
	#else
		return PC_SetPlayerSpecialAction(playerid, actionid);
	#endif
}

#if defined _ALS_SetPlayerSpecialAction
	#undef SetPlayerSpecialAction
#else
	#define _ALS_SetPlayerSpecialAction
#endif
#define SetPlayerSpecialAction acc_SetPlayerSpecialAction

stock orig_SetPlayerInterior(playerid, interiorid) return SetPlayerInterior(playerid, interiorid);

stock acc_SetPlayerInterior(playerid, interiorid)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_SetPlayerInterior", "ii", playerid, interiorid);
	#else
		return PC_SetPlayerInterior(playerid, interiorid);
	#endif
}

#if defined _ALS_SetPlayerInterior
	#undef SetPlayerInterior
#else
	#define _ALS_SetPlayerInterior
#endif
#define SetPlayerInterior acc_SetPlayerInterior

stock orig_SetPlayerPos(playerid, Float:x, Float:y, Float:z) return SetPlayerPos(playerid, x, y, z);

stock acc_SetPlayerPos(playerid, Float:x, Float:y, Float:z)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_SetPlayerPos", "ifff", playerid, x, y, z);
	#else
		return PC_SetPlayerPos(playerid, x, y, z);
	#endif
}

#if defined _ALS_SetPlayerPos
	#undef SetPlayerPos
#else
	#define _ALS_SetPlayerPos
#endif
#define SetPlayerPos acc_SetPlayerPos

stock orig_SetPlayerPosFindZ(playerid, Float:x, Float:y, Float:z) return SetPlayerPosFindZ(playerid, x, y, z);

stock acc_SetPlayerPosFindZ(playerid, Float:x, Float:y, Float:z)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_SetPlayerPosFindZ", "ifff", playerid, x, y, z);
	#else
		return PC_SetPlayerPosFindZ(playerid, x, y, z);
	#endif
}

#if defined _ALS_SetPlayerPosFindZ
	#undef SetPlayerPosFindZ
#else
	#define _ALS_SetPlayerPosFindZ
#endif
#define SetPlayerPosFindZ acc_SetPlayerPosFindZ

stock orig_SetPlayerVelocity(playerid, Float:X, Float:Y, Float:Z) return SetPlayerVelocity(playerid, X, Y, Z);

stock acc_SetPlayerVelocity(playerid, Float:X, Float:Y, Float:Z)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_SetPlayerVelocity", "ifff", playerid, X, Y, Z);
	#else
		return PC_SetPlayerVelocity(playerid, X, Y, Z);
	#endif
}

#if defined _ALS_SetPlayerVelocity
	#undef SetPlayerVelocity
#else
	#define _ALS_SetPlayerVelocity
#endif
#define SetPlayerVelocity acc_SetPlayerVelocity

stock orig_PutPlayerInVehicle(playerid, vehicleid, seatid) return PutPlayerInVehicle(playerid, vehicleid, seatid);

stock acc_PutPlayerInVehicle(playerid, vehicleid, seatid)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_PutPlayerInVehicle", "iii", playerid, vehicleid, seatid);
	#else
		return PC_PutPlayerInVehicle(playerid, vehicleid, seatid);
	#endif
}

#if defined _ALS_PutPlayerInVehicle
	#undef PutPlayerInVehicle
#else
	#define _ALS_PutPlayerInVehicle
#endif
#define PutPlayerInVehicle acc_PutPlayerInVehicle

stock orig_RemovePlayerFromVehicle(playerid) return RemovePlayerFromVehicle(playerid);

stock acc_RemovePlayerFromVehicle(playerid)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_RemovePlayerFromVehicle", "i", playerid);
	#else
		return PC_RemovePlayerFromVehicle(playerid);
	#endif
}

#if defined _ALS_RemovePlayerFromVehicle
	#undef RemovePlayerFromVehicle
#else
	#define _ALS_RemovePlayerFromVehicle
#endif
#define RemovePlayerFromVehicle acc_RemovePlayerFromVehicle

stock orig_SetVehiclePos(vehicleid, Float:x, Float:y, Float:z) return SetVehiclePos(vehicleid, x, y, z);

stock acc_SetVehiclePos(vehicleid, Float:x, Float:y, Float:z)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_SetVehiclePos", "ifff", vehicleid, x, y, z);
	#else
		return PC_SetVehiclePos(vehicleid, x, y, z);
	#endif
}

#if defined _ALS_SetVehiclePos
	#undef SetVehiclePos
#else
	#define _ALS_SetVehiclePos
#endif
#define SetVehiclePos acc_SetVehiclePos

stock orig_SetVehicleVelocity(vehicleid, Float:X, Float:Y, Float:Z) return SetVehicleVelocity(vehicleid, X, Y, Z);

stock acc_SetVehicleVelocity(vehicleid, Float:X, Float:Y, Float:Z)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_SetVehicleVelocity", "ifff", vehicleid, X, Y, Z);
	#else
		return PC_SetVehicleVelocity(vehicleid, X, Y, Z);
	#endif
}

#if defined _ALS_SetVehicleVelocity
	#undef SetVehicleVelocity
#else
	#define _ALS_SetVehicleVelocity
#endif
#define SetVehicleVelocity acc_SetVehicleVelocity

stock orig_SetVehicleAngularVelocity(vehicleid, Float:X, Float:Y, Float:Z) return SetVehicleAngularVelocity(vehicleid, X, Y, Z);

stock acc_SetVehicleAngularVelocity(vehicleid, Float:X, Float:Y, Float:Z)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_SetVehicleAngularVelocity", "ifff", vehicleid, X, Y, Z);
	#else
		return PC_SetVehicleAngularVelocity(vehicleid, X, Y, Z);
	#endif
}

#if defined _ALS_SetVehicleAngularVelocity
	#undef SetVehicleAngularVelocity
#else
	#define _ALS_SetVehicleAngularVelocity
#endif
#define SetVehicleAngularVelocity acc_SetVehicleAngularVelocity

stock orig_LinkVehicleToInterior(vehicleid, interiorid) return LinkVehicleToInterior(vehicleid, interiorid);

stock acc_LinkVehicleToInterior(vehicleid, interiorid)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_LinkVehicleToInterior", "ii", vehicleid, interiorid);
	#else
		return PC_LinkVehicleToInterior(vehicleid, interiorid);
	#endif
}

#if defined _ALS_LinkVehicleToInterior
	#undef LinkVehicleToInterior
#else
	#define _ALS_LinkVehicleToInterior
#endif
#define LinkVehicleToInterior acc_LinkVehicleToInterior

stock orig_ChangeVehiclePaintjob(vehicleid, paintjobid) return ChangeVehiclePaintjob(vehicleid, paintjobid);

stock acc_ChangeVehiclePaintjob(vehicleid, paintjobid)
{
	if(GetVehicleModel(vehicleid) <= 0) return 1;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_ChangeVehiclePaintjob", "ii", vehicleid, paintjobid);
	#else
		return PC_ChangeVehiclePaintjob(vehicleid, paintjobid);
	#endif
}

#if defined _ALS_ChangeVehiclePaintjob
	#undef ChangeVehiclePaintjob
#else
	#define _ALS_ChangeVehiclePaintjob
#endif
#define ChangeVehiclePaintjob acc_ChangeVehiclePaintjob

stock orig_SetVehicleHealth(vehicleid, Float:health) return SetVehicleHealth(vehicleid, health);

stock acc_SetVehicleHealth(vehicleid, Float:health)
{
	if(health < 0.0) health = 0.0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_SetVehicleHealth", "if", vehicleid, health);
	#else
		return PC_SetVehicleHealth(vehicleid, health);
	#endif
}

#if defined _ALS_SetVehicleHealth
	#undef SetVehicleHealth
#else
	#define _ALS_SetVehicleHealth
#endif
#define SetVehicleHealth acc_SetVehicleHealth

stock orig_RepairVehicle(vehicleid) return RepairVehicle(vehicleid);

stock acc_RepairVehicle(vehicleid)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_RepairVehicle", "i", vehicleid);
	#else
		return PC_RepairVehicle(vehicleid);
	#endif
}

#if defined _ALS_RepairVehicle
	#undef RepairVehicle
#else
	#define _ALS_RepairVehicle
#endif
#define RepairVehicle acc_RepairVehicle

stock orig_SetVehicleToRespawn(vehicleid) return SetVehicleToRespawn(vehicleid);

stock acc_SetVehicleToRespawn(vehicleid)
{
	if(GetVehicleModel(vehicleid) <= 0) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_SetVehicleToRespawn", "i", vehicleid);
	#else
		return PC_SetVehicleToRespawn(vehicleid);
	#endif
}

#if defined _ALS_SetVehicleToRespawn
	#undef SetVehicleToRespawn
#else
	#define _ALS_SetVehicleToRespawn
#endif
#define SetVehicleToRespawn acc_SetVehicleToRespawn

stock EnableAntiCheat(code, enable)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_EnableAntiCheat", "ii", code, enable);
	#else
		return PC_EnableAntiCheat(code, enable);
	#endif
}

stock EnableAntiNOP(nopcode, enable)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_EnableAntiNOP", "ii", nopcode, enable);
	#else
		return PC_EnableAntiNOP(nopcode, enable);
	#endif
}

stock EnableAntiCheatForPlayer(playerid, code, enable)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_EnableAntiCheatForPlayer", "iii", playerid, code, enable);
	#else
		return PC_EnableAntiCheatForPlayer(playerid, code, enable);
	#endif
}

stock EnableAntiNOPForPlayer(playerid, nopcode, enable)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_EnableAntiNOPForPlayer", "iii", playerid, nopcode, enable);
	#else
		return PC_EnableAntiNOPForPlayer(playerid, nopcode, enable);
	#endif
}

stock IsAntiCheatEnabled(code)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_IsAntiCheatEnabled", "i", code);
	#else
		return PC_IsAntiCheatEnabled(code);
	#endif
}

stock IsAntiNOPEnabled(nopcode)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_IsAntiNOPEnabled", "i", nopcode);
	#else
		return PC_IsAntiNOPEnabled(nopcode);
	#endif
}

stock IsAntiCheatEnabledForPlayer(playerid, code)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_IsAntiCheatEnabledForPlayer", "ii", playerid, code);
	#else
		return PC_IsAntiCheatEnabledForPlayer(playerid, code);
	#endif
}

stock IsAntiNOPEnabledForPlayer(playerid, nopcode)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_IsAntiNOPEnabledForPlayer", "ii", playerid, nopcode);
	#else
		return PC_IsAntiNOPEnabledForPlayer(playerid, nopcode);
	#endif
}

stock AntiCheatGetSpeed(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_AntiCheatGetSpeed", "i", playerid);
	#else
		return PC_AntiCheatGetSpeed(playerid);
	#endif
}

stock AntiCheatGetAnimationIndex(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_AntiCheatGetAnimationIndex", "i", playerid);
	#else
		return PC_AntiCheatGetAnimationIndex(playerid);
	#endif
}

stock AntiCheatGetDialog(playerid)
{
	if(!IsPlayerConnected(playerid)) return -1;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_AntiCheatGetDialog", "i", playerid);
	#else
		return PC_AntiCheatGetDialog(playerid);
	#endif
}

stock AntiCheatGetEnterVehicle(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_AntiCheatGetEnterVehicle", "i", playerid);
	#else
		return PC_AntiCheatGetEnterVehicle(playerid);
	#endif
}

stock AntiCheatGetVehicleID(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_AntiCheatGetVehicleID", "i", playerid);
	#else
		return PC_AntiCheatGetVehicleID(playerid);
	#endif
}

stock AntiCheatGetWeapon(playerid)
{
	if(!IsPlayerConnected(playerid)) return -1;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_AntiCheatGetWeapon", "i", playerid);
	#else
		return PC_AntiCheatGetWeapon(playerid);
	#endif
}

stock AntiCheatGetVehicleSeat(playerid)
{
	if(!IsPlayerConnected(playerid)) return -1;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_AntiCheatGetVehicleSeat", "i", playerid);
	#else
		return PC_AntiCheatGetVehicleSeat(playerid);
	#endif
}

stock AntiCheatGetSpecialAction(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_AntiCheatGetSpecialAction", "i", playerid);
	#else
		return PC_AntiCheatGetSpecialAction(playerid);
	#endif
}

stock AntiCheatGetLastSpecialAction(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_AntiCheatGetLastSpecialActio", "i", playerid);
	#else
		return PC_AntiCheatGetLastSpecialActio(playerid);
	#endif
}

stock AntiCheatGetLastShotWeapon(playerid)
{
	if(!IsPlayerConnected(playerid)) return -1;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_AntiCheatGetLastShotWeapon", "i", playerid);
	#else
		return PC_AntiCheatGetLastShotWeapon(playerid);
	#endif
}

stock AntiCheatGetLastPickup(playerid)
{
	if(!IsPlayerConnected(playerid)) return -1;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_AntiCheatGetLastPickup", "i", playerid);
	#else
		return PC_AntiCheatGetLastPickup(playerid);
	#endif
}

stock AntiCheatGetLastUpdateTime(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_AntiCheatGetLastUpdateTime", "i", playerid);
	#else
		return PC_AntiCheatGetLastUpdateTime(playerid);
	#endif
}

stock AntiCheatGetLastReloadTime(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_AntiCheatGetLastReloadTime", "i", playerid);
	#else
		return PC_AntiCheatGetLastReloadTime(playerid);
	#endif
}

stock AntiCheatGetLastEnteredVehTime(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_AntiCheatGetLastEnteredVehTi", "i", playerid);
	#else
		return PC_AntiCheatGetLastEnteredVehTi(playerid);
	#endif
}

stock AntiCheatGetLastShotTime(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_AntiCheatGetLastShotTime", "i", playerid);
	#else
		return PC_AntiCheatGetLastShotTime(playerid);
	#endif
}

stock AntiCheatGetLastSpawnTime(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_AntiCheatGetLastSpawnTime", "i", playerid);
	#else
		return PC_AntiCheatGetLastSpawnTime(playerid);
	#endif
}

stock AntiCheatIntEnterExitsIsEnabled(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_AntiCheatIntEnterExitsIsEnab", "i", playerid);
	#else
		return PC_AntiCheatIntEnterExitsIsEnab(playerid);
	#endif
}

stock AntiCheatStuntBonusIsEnabled(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_AntiCheatStuntBonusIsEnabled", "i", playerid);
	#else
		return PC_AntiCheatStuntBonusIsEnabled(playerid);
	#endif
}

stock AntiCheatIsInModShop(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_AntiCheatIsInModShop", "i", playerid);
	#else
		return PC_AntiCheatIsInModShop(playerid);
	#endif
}

stock AntiCheatIsFrozen(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_AntiCheatIsFrozen", "i", playerid);
	#else
		return PC_AntiCheatIsFrozen(playerid);
	#endif
}

stock AntiCheatIsDead(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_AntiCheatIsDead", "i", playerid);
	#else
		return PC_AntiCheatIsDead(playerid);
	#endif
}

stock AntiCheatIsConnected(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_AntiCheatIsConnected", "i", playerid);
	#else
		return PC_AntiCheatIsConnected(playerid);
	#endif
}

stock AntiCheatKickWithDesync(playerid, code)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_AntiCheatKickWithDesync", "ii", playerid, code);
	#else
		return PC_AntiCheatKickWithDesync(playerid, code);
	#endif
}

stock AntiCheatIsKickedWithDesync(playerid)
{
	if(!IsPlayerConnected(playerid)) return 3;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_AntiCheatIsKickedWithDesync", "i", playerid);
	#else
		return PC_AntiCheatIsKickedWithDesync(playerid);
	#endif
}

stock AntiCheatGetVehicleDriver(vehicleid)
{
	if(GetVehicleModel(vehicleid) <= 0) return INVALID_PLAYER_ID;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_AntiCheatGetVehicleDriver", "i", vehicleid);
	#else
		return PC_AntiCheatGetVehicleDriver(vehicleid);
	#endif
}

stock AntiCheatGetVehicleInterior(vehicleid)
{
	if(GetVehicleModel(vehicleid) <= 0) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_AntiCheatGetVehicleInterior", "i", vehicleid);
	#else
		return PC_AntiCheatGetVehicleInterior(vehicleid);
	#endif
}

stock AntiCheatGetVehiclePaintjob(vehicleid)
{
	if(GetVehicleModel(vehicleid) <= 0) return 3;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_AntiCheatGetVehiclePaintjob", "i", vehicleid);
	#else
		return PC_AntiCheatGetVehiclePaintjob(vehicleid);
	#endif
}

stock AntiCheatGetInterior(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("PC_AntiCheatGetInterior", "i", playerid);
	#else
		return PC_AntiCheatGetInterior(playerid);
	#endif
}

#if defined FILTERSCRIPT

static fs_AntiCheatGetNextDialog(playerid)
{
	if(!IsPlayerConnected(playerid)) return -1;
	return CallRemoteFunction("PC_AntiCheatGetNextDialog", "i", playerid);
}

static fs_AntiCheatSetDialog(playerid, dialogid)
{
	if(!(0 <= playerid < MAX_PLAYERS)) return 0;
	return CallRemoteFunction("PC_ShowPlayerDialog", "id", playerid, dialogid);
}

static fs_AntiCheatSetNextDialog(playerid, dialogid)
{
	if(!(0 <= playerid < MAX_PLAYERS)) return 0;
	return CallRemoteFunction("PC_fs_ShowPlayerDialog", "id", playerid, dialogid);
}

#else

public OnGameModeInit()
{	
	if(PC_ACAllow[42])
	{
		#if !PC_USE_QUERY
			PC_QueryEnable = !!GetServerVarAsBool("query");
			SendRconCommand("query 0");
		#endif
		#undef PC_USE_QUERY
		PC_RconEnable = !!GetServerVarAsBool("rcon");
		SendRconCommand("rcon 0");
	}
	PC_LagCompMode = !!GetServerVarAsInt("lagcompmode");
	
	new PC_a = 1;
	#if defined PC_OnGameModeInit
		PC_a = PC_OnGameModeInit();
	#endif
	static PC_strtmp[10];
	GetServerVarAsString("version", PC_strtmp, sizeof PC_strtmp);
	if(strfind(PC_strtmp, PC_SERVER_VERSION) == -1 && strfind(PC_strtmp, PC_SERVER_DL_VERSION) == -1) print(VERSION_WARNING);
	#undef PC_SERVER_DL_VERSION
	#undef PC_SERVER_VERSION
	return PC_a;
}

#if defined _ALS_OnGameModeInit
	#undef OnGameModeInit
#else
	#define _ALS_OnGameModeInit
#endif
#define OnGameModeInit PC_OnGameModeInit
#if defined PC_OnGameModeInit
	forward PC_OnGameModeInit();
#endif

#if PC_USE_STATISTICS
	public OnGameModeExit()
	{
		new PC_a = 1;
		#if defined PC_OnGameModeExit
			PC_a = PC_OnGameModeExit();
		#endif
		print(" ");
		print("--------------------------------------");
		print(STATS_STRING_1);
		print(STATS_STRING_2);
		printf(STATS_STRING_3, PC_sInfo[0]);
		printf(STATS_STRING_4, PC_sInfo[1]);
		printf(STATS_STRING_5, PC_sInfo[2]);
		printf(STATS_STRING_6, PC_sInfo[3]);
		printf(STATS_STRING_7, PC_sInfo[4]);
		printf(STATS_STRING_8, PC_sInfo[5]);
		print("--------------------------------------\n");
		return PC_a;
	}

	#if defined _ALS_OnGameModeExit
		#undef OnGameModeExit
	#else
		#define _ALS_OnGameModeExit
	#endif
	#define OnGameModeExit PC_OnGameModeExit
	#if defined PC_OnGameModeExit
		forward PC_OnGameModeExit();
	#endif
#endif

public OnPlayerConnect(playerid)
{
	ACInfo[playerid][acVeh] =
	ACInfo[playerid][acKicked] =
	ACInfo[playerid][acKickVeh] = 0;
	GetPlayerIp(playerid, ACInfo[playerid][acIp], 16);
	#if PC_USE_NPC
		if(IsPlayerNPC(playerid))
		{
			if(PC_ACAllow[36])
			{
				#if defined GetLocalIP
					new bool:PC_rslt;
					static PC_strtmp[16];
					PC_strtmp = "127.0.0.1";
					while(PC_strtmp[0])
					{
						if(!strcmp(ACInfo[playerid][acIp], PC_strtmp))
						{
							PC_rslt = true;
							break;
						}
						GetLocalIP(0, PC_strtmp);
					}
					if(!PC_rslt)
					{
						#if defined DEBUG
							printf("AC(debug): NPC's IP: '%s'", ACInfo[playerid][acIp]);
						#endif
						PC_KickWithCode(playerid, "", 0, 36);
					}
				#else
					if(strcmp(ACInfo[playerid][acIp], "127.0.0.1")) PC_KickWithCode(playerid, "", 0, 36);
				#endif
			}
			ACInfo[playerid][acTimerID] = 0;
		}
		else
		{
	#else
		if(PC_ACAllow[36] && IsPlayerNPC(playerid)) PC_KickWithCode(playerid, "", 0, 36);
	#endif
		if(PC_ACAllow[48] && ACInfo[playerid][acOnline]) PC_KickWithCode(playerid, "", 0, 48, 1);
		if(PC_ACAllow[41])
		{
			static PC_ver[24];
			GetPlayerVersion(playerid, PC_ver, sizeof PC_ver);
			if(strfind(PC_ver, PC_CLIENT_VERSION) == -1)
			{
				#undef PC_CLIENT_VERSION
				#if defined DEBUG
					printf(DEBUG_CODE_2, playerid, PC_ver);
				#endif
				PC_KickWithCode(playerid, "", 0, 41);
			}
		}
		new PC_i = PC_MAX_CONNECTS_FROM_IP;
		if(PC_ACAllow[40])
		{
			#if defined foreach
				foreach(new PC_j : Player)
				{
					#if PC_USE_NPC
						if(PC_j != playerid && !IsPlayerNPC(PC_j) && !strcmp(ACInfo[playerid][acIp], ACInfo[PC_j][acIp], false))
					#else
						if(PC_j != playerid && !strcmp(ACInfo[playerid][acIp], ACInfo[PC_j][acIp], false))
					#endif
			#else
				#if defined GetPlayerPoolSize
					for(new PC_j = GetPlayerPoolSize(); PC_j >= 0; --PC_j)
				#else
					for(new PC_j = MAX_PLAYERS - 1; PC_j >= 0; --PC_j)
				#endif
				{
					#if PC_USE_NPC
						if(PC_j != playerid && IsPlayerConnected(PC_j) && !IsPlayerNPC(PC_j) &&
						!strcmp(ACInfo[playerid][acIp], ACInfo[PC_j][acIp], false))
					#else
						if(PC_j != playerid && IsPlayerConnected(PC_j) &&
						!strcmp(ACInfo[playerid][acIp], ACInfo[PC_j][acIp], false))
					#endif
			#endif
				{
					PC_i--;
					if(PC_i < 1)
					{
						#if defined DEBUG
							printf(DEBUG_CODE_3, playerid, PC_MAX_CONNECTS_FROM_IP);
						#endif
						PC_KickWithCode(playerid, "", 0, 40);
						break;
					}
				}
			}
		}
		ACInfo[playerid][acSpec] =
		ACInfo[playerid][acSpawned] =
		ACInfo[playerid][acDeathRes] = false;
		ACInfo[playerid][acDead] = true;
		ACInfo[playerid][acIntEnterExits] = PC_IntEnterExits;
		ACInfo[playerid][acStuntBonus] = PC_StuntBonus;
		ACInfo[playerid][acCheatCount][0] =
		ACInfo[playerid][acLastWeapon] =
		ACInfo[playerid][acSpawnRes] =
		ACInfo[playerid][acMoney] =
		ACInfo[playerid][acAnim] =
		ACInfo[playerid][acInt] = 0;
		ACInfo[playerid][acSet][12] =
		ACInfo[playerid][acSet][10] =
		ACInfo[playerid][acSet][0] =
		ACInfo[playerid][acNextDialog] =
		ACInfo[playerid][acDialog] = -1;
		ACInfo[playerid][acDropJpX] =
		ACInfo[playerid][acDropJpY] =
		ACInfo[playerid][acDropJpZ] = 25000.0;
		for(PC_i = 12; PC_i >= 0; --PC_i)
		{
			ACInfo[playerid][acSetWeapon][PC_i] = -1;
			ACInfo[playerid][acGiveAmmo][PC_i] = -65535;
		}
		for(PC_i = 27; PC_i >= 0; --PC_i) ACInfo[playerid][acFloodCount][PC_i] = 0;
		memcpy(ACInfo[playerid][acNOPAllow], PC_NOPAllow, 0, sizeof(PC_NOPAllow) * 4, sizeof PC_NOPAllow);
		memcpy(ACInfo[playerid][acACAllow], PC_ACAllow, 0, sizeof(PC_ACAllow) * 4, sizeof PC_ACAllow);
		if(ACInfo[playerid][acKicked] < 1)
		{
			ACInfo[playerid][acTimerTick] = GetTickCount();
			ACInfo[playerid][acTimerID] = SetTimerEx("PC_Timer", 1000, false, "i", playerid);
		}
	#if PC_USE_NPC
		}
	#endif
	ACInfo[playerid][acOnline] = true;
	#if defined PC_OnPlayerConnect
		return PC_OnPlayerConnect(playerid);
	#else
		return 1;
	#endif
}

#if defined _ALS_OnPlayerConnect
	#undef OnPlayerConnect
#else
	#define _ALS_OnPlayerConnect
#endif
#define OnPlayerConnect PC_OnPlayerConnect
#if defined PC_OnPlayerConnect
	forward PC_OnPlayerConnect(playerid);
#endif

public OnPlayerDisconnect(playerid, reason)
{
	#if PC_USE_NPC
		if(!IsPlayerNPC(playerid))
		{
	#endif
		#if defined KillPlayerTimer
			KillPlayerTimer(ACInfo[playerid][acTimerID]);
		#else
			KillTimer(ACInfo[playerid][acTimerID]);
		#endif
		#if defined BlockIpAddress && PC_MAX_CONNECTS_FROM_IP < 2
			if(ACInfo[playerid][acACAllow][37]) BlockIpAddress(ACInfo[playerid][acIp],
			(PC_MIN_TIME_RECONNECT * 1000) - (reason > 0 ? 0 : GetServerVarAsInt("playertimeout")));
		#endif
		#undef PC_MAX_CONNECTS_FROM_IP
		#undef PC_MIN_TIME_RECONNECT
	#if PC_USE_NPC
		}
	#endif
	#if defined KillPlayerTimer
		KillPlayerTimer(ACInfo[playerid][acKickTimerID]);
	#else
		KillTimer(ACInfo[playerid][acKickTimerID]);
	#endif
	new PC_vehid = ACInfo[playerid][acKickVeh];
	if(PC_vehid > 0)
	{
		if(ACVehInfo[PC_vehid][acDriver] == playerid) ACVehInfo[PC_vehid][acDriver] = INVALID_PLAYER_ID;
		if(ACInfo[playerid][acKicked] == 2)
		{
			LinkVehicleToInterior(PC_vehid, ACVehInfo[PC_vehid][acInt]);
			SetVehicleZAngle(PC_vehid, ACVehInfo[PC_vehid][acZAngle]);
			SetVehiclePos(PC_vehid, ACVehInfo[PC_vehid][acPosX], ACVehInfo[PC_vehid][acPosY], ACVehInfo[PC_vehid][acPosZ]);
			SetVehicleHealth(PC_vehid, ACVehInfo[PC_vehid][acHealth]);
			ChangeVehiclePaintjob(PC_vehid, ACVehInfo[PC_vehid][acPaintJob]);
		}
	}
	if((PC_vehid = ACInfo[playerid][acVeh]) > 0)
	{
		if(ACVehInfo[PC_vehid][acDriver] == playerid) ACVehInfo[PC_vehid][acDriver] = INVALID_PLAYER_ID;
		if(ACInfo[playerid][acKicked] == 2)
		{
			LinkVehicleToInterior(PC_vehid, ACVehInfo[PC_vehid][acInt]);
			SetVehicleZAngle(PC_vehid, ACVehInfo[PC_vehid][acZAngle]);
			SetVehiclePos(PC_vehid, ACVehInfo[PC_vehid][acPosX], ACVehInfo[PC_vehid][acPosY], ACVehInfo[PC_vehid][acPosZ]);
			SetVehicleHealth(PC_vehid, ACVehInfo[PC_vehid][acHealth]);
			ChangeVehiclePaintjob(PC_vehid, ACVehInfo[PC_vehid][acPaintJob]);
		}
	}
	ACInfo[playerid][acOnline] = false;
	if(ACInfo[playerid][acKicked] < 1) ACInfo[playerid][acKicked] = 3;
	#if defined PC_OnPlayerDisconnect
		return PC_OnPlayerDisconnect(playerid, reason);
	#else
		return 1;
	#endif
}

#if defined _ALS_OnPlayerDisconnect
	#undef OnPlayerDisconnect
#else
	#define _ALS_OnPlayerDisconnect
#endif
#define OnPlayerDisconnect PC_OnPlayerDisconnect
#if defined PC_OnPlayerDisconnect
	forward PC_OnPlayerDisconnect(playerid, reason);
#endif

public OnPlayerSpawn(playerid)
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	#if PC_USE_NPC
		if(!IsPlayerNPC(playerid))
		{
	#endif
		new PC_i, PC_gtc = GetTickCount();
		if(ACInfo[playerid][acSpec] && ACInfo[playerid][acSet][7] < 2)
		{
			ACInfo[playerid][acSet][3] =
			ACInfo[playerid][acSet][4] =
			ACInfo[playerid][acSet][8] =
			ACInfo[playerid][acSet][9] = -1;
			ACInfo[playerid][acSpec] = false;
		}
		else
		{
			if(ACInfo[playerid][acACAllow][27] &&
			(ACInfo[playerid][acSpawnRes] < 1 || PC_gtc < ACInfo[playerid][acSpawnTick] + 1000))
			{
				#if defined DEBUG
					printf("AC(debug): Spawn res: %d, respawn time: %d",
					ACInfo[playerid][acSpawnRes], PC_gtc - ACInfo[playerid][acSpawnTick]);
				#endif
				PC_KickWithCode(playerid, "", 0, 27);
				#if defined OnCheatDetected
					ACInfo[playerid][acSpawnRes] = 1;
				#endif
			}
			if(ACInfo[playerid][acSpawnRes] > 0) ACInfo[playerid][acSpawnRes]--;
			if(!(1 <= ACInfo[playerid][acSet][7] <= 2))
			{
				for(PC_i = 11; PC_i >= 0; --PC_i) ACInfo[playerid][acSet][PC_i] = -1;
				SetPlayerHealth(playerid, 100.0);
				SetPlayerArmour(playerid, 0.0);
				SetPlayerInterior(playerid, 0);
			}
		}
		if(!(1 <= ACInfo[playerid][acSet][7] <= 2))
		{
			for(PC_i = 12; PC_i >= 0; --PC_i)
			{
				ACInfo[playerid][acSetWeapon][PC_i] = -1;
				ACInfo[playerid][acGiveAmmo][PC_i] = -65535;
			}
			ACInfo[playerid][acNextSpecAct] = -1;
			ACInfo[playerid][acUnFrozen] = true;
			ACInfo[playerid][acTpToZ] = false;
		}
		for(PC_i = 12; PC_i >= 0; --PC_i)
		{
			ACInfo[playerid][acWeapon][PC_i] =
			ACInfo[playerid][acAmmo][PC_i] = 0;
		}
		ACInfo[playerid][acModShop] =
		ACInfo[playerid][acDead] = false;
		ACInfo[playerid][acSpawned] = true;
		ACInfo[playerid][acLastPickup] =
		ACInfo[playerid][acEnterSeat] =
		ACInfo[playerid][acSet][7] =
		ACInfo[playerid][acSeat] = -1;
		ACInfo[playerid][acCheatCount][5] =
		ACInfo[playerid][acCheatCount][6] =
		ACInfo[playerid][acCheatCount][7] =
		ACInfo[playerid][acCheatCount][8] =
		ACInfo[playerid][acCheatCount][9] =
		ACInfo[playerid][acCheatCount][13] =
		ACInfo[playerid][acCheatCount][14] =
		ACInfo[playerid][acCheatCount][16] =
		ACInfo[playerid][acCheatCount][18] =
		ACInfo[playerid][acCheatCount][20] =
		ACInfo[playerid][acLastSpecAct] =
		ACInfo[playerid][acLastWeapon] =
		ACInfo[playerid][acParachute] =
		ACInfo[playerid][acEnterVeh] =
		ACInfo[playerid][acLastShot] =
		ACInfo[playerid][acKickVeh] =
		ACInfo[playerid][acSpecAct] =
		ACInfo[playerid][acDmgRes] =
		ACInfo[playerid][acIntRet] =
		ACInfo[playerid][acSpeed] =
		ACInfo[playerid][acVeh] = 0;
		ACInfo[playerid][acSetPosTick] = PC_gtc + 2650;
		ACInfo[playerid][acGtc][7] = PC_gtc + 1650;
		if(PC_IsValidWeapon(ACInfo[playerid][acSpawnWeapon1]))
		{
			PC_i = PC_wSlot[ACInfo[playerid][acSpawnWeapon1]];
			ACInfo[playerid][acWeapon][PC_i] = ACInfo[playerid][acSpawnWeapon1];
			ACInfo[playerid][acAmmo][PC_i] = ACInfo[playerid][acSpawnAmmo1];
		}
		if(PC_IsValidWeapon(ACInfo[playerid][acSpawnWeapon2]))
		{
			PC_i = PC_wSlot[ACInfo[playerid][acSpawnWeapon2]];
			ACInfo[playerid][acWeapon][PC_i] = ACInfo[playerid][acSpawnWeapon2];
			ACInfo[playerid][acAmmo][PC_i] = ACInfo[playerid][acSpawnAmmo2];
		}
		if(PC_IsValidWeapon(ACInfo[playerid][acSpawnWeapon3]))
		{
			PC_i = PC_wSlot[ACInfo[playerid][acSpawnWeapon3]];
			ACInfo[playerid][acWeapon][PC_i] = ACInfo[playerid][acSpawnWeapon3];
			ACInfo[playerid][acAmmo][PC_i] = ACInfo[playerid][acSpawnAmmo3];
		}
	#if PC_USE_NPC
		}
	#endif
	#if defined PC_OnPlayerSpawn
		return PC_OnPlayerSpawn(playerid);
	#else
		return 1;
	#endif
}

#if defined _ALS_OnPlayerSpawn
	#undef OnPlayerSpawn
#else
	#define _ALS_OnPlayerSpawn
#endif
#define OnPlayerSpawn PC_OnPlayerSpawn
#if defined PC_OnPlayerSpawn
	forward PC_OnPlayerSpawn(playerid);
#endif

public OnPlayerDeath(playerid, killerid, reason)
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	if(ACInfo[playerid][acACAllow][28] &&
	(ACInfo[playerid][acDead] || !ACInfo[playerid][acDeathRes] &&
	(reason != WEAPON_COLLISION && reason != 255 || killerid != INVALID_PLAYER_ID)))
	{
		#if defined DEBUG
			printf("AC(debug): Is dead: %d, death res: %d, killerid: %d, reason: %d",
			ACInfo[playerid][acDead], ACInfo[playerid][acDeathRes], killerid, reason);
		#endif
		PC_KickWithCode(playerid, "", 0, 28);
	}
	ACInfo[playerid][acDead] = true;
	ACInfo[playerid][acDeathRes] = false;
	if(ACInfo[playerid][acSpawnRes] < 1) ACInfo[playerid][acSpawnTick] = GetTickCount();
	ACInfo[playerid][acSpawnRes] = 1;
	#if defined PC_OnPlayerDeath
		return PC_OnPlayerDeath(playerid, killerid, reason);
	#else
		return 1;
	#endif
}

#if defined _ALS_OnPlayerDeath
	#undef OnPlayerDeath
#else
	#define _ALS_OnPlayerDeath
#endif
#define OnPlayerDeath PC_OnPlayerDeath
#if defined PC_OnPlayerDeath
	forward PC_OnPlayerDeath(playerid, killerid, reason);
#endif

#if defined OnPlayerWeaponShot
	public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
#else
	public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid)
#endif
{
	if(ACInfo[playerid][acKicked] > 0) return 1;
	#if defined OnPlayerWeaponShot
		if(ACInfo[playerid][acACAllow][47] &&
		(amount < 0.0 || issuerid != INVALID_PLAYER_ID && !(0 <= issuerid < MAX_PLAYERS) || !(3 <= bodypart <= 9) || !PC_IsValidDamageReason(weaponid)))
		{
			#if defined DEBUG
				printf("AC(debug): Issuerid: %d, amount: %f, weaponid: %d, bodypart: %d", issuerid, amount, weaponid, bodypart);
			#endif
			PC_KickWithCode(playerid, "", 0, 47, 4);
			return 1;
		}
	#else
		if(ACInfo[playerid][acACAllow][47] &&
		(amount < 0.0 || issuerid != INVALID_PLAYER_ID && !(0 <= issuerid < MAX_PLAYERS) || !PC_IsValidDamageReason(weaponid)))
		{
			#if defined DEBUG
				printf("AC(debug): Issuerid: %d, amount: %f, weaponid: %d", issuerid, amount, weaponid);
			#endif
			PC_KickWithCode(playerid, "", 0, 47, 4);
			return 1;
		}
	#endif
	if(!ACInfo[playerid][acDead]) ACInfo[playerid][acDeathRes] = true;
	#if defined PC_OnPlayerTakeDamage
		#if defined OnPlayerWeaponShot
			return PC_OnPlayerTakeDamage(playerid, issuerid, amount, weaponid, bodypart);
		#else
			return PC_OnPlayerTakeDamage(playerid, issuerid, amount, weaponid);
		#endif
	#else
		return 0;
	#endif
}

#if defined _ALS_OnPlayerTakeDamage
	#undef OnPlayerTakeDamage
#else
	#define _ALS_OnPlayerTakeDamage
#endif
#define OnPlayerTakeDamage PC_OnPlayerTakeDamage
#if defined PC_OnPlayerTakeDamage
	#if defined OnPlayerWeaponShot
		forward PC_OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart);
	#else
		forward PC_OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid);
	#endif
#endif

#if defined OnPlayerWeaponShot
	public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
#else
	public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid)
#endif
{
	if(ACInfo[playerid][acKicked] > 0) return 1;
	#if defined OnPlayerWeaponShot
		if(ACInfo[playerid][acACAllow][47])
		{
			if(amount < 0.0 || !(0 <= damagedid < MAX_PLAYERS) || !(3 <= bodypart <= 9) || !PC_IsValidWeapon(weaponid))
			{
				#if defined DEBUG
					printf("AC(debug): Damagedid: %d, amount: %f, weaponid: %d, bodypart: %d",
					damagedid, amount, weaponid, bodypart);
				#endif
				PC_KickWithCode(playerid, "", 0, 47, 3);
				return 1;
			}
			new PC_s = PC_wSlot[weaponid];
			if(!ACInfo[playerid][acDead] && ACInfo[playerid][acWeapon][PC_s] != weaponid &&
			ACInfo[playerid][acSetWeapon][PC_s] != weaponid && weaponid != WEAPON_FLAMETHROWER)
			{
				#if defined DEBUG
					printf("AC(debug): Damagedid: %d, amount: %f, AC weapon: %d, weaponid: %d, bodypart: %d",
					damagedid, amount, ACInfo[playerid][acWeapon][PC_s], weaponid, bodypart);
				#endif
				PC_KickWithCode(playerid, "", 0, 47, 5);
				return 1;
			}
		}
	#else
		if(ACInfo[playerid][acACAllow][47])
		{
			if(amount < 0.0 || !(0 <= damagedid < MAX_PLAYERS) || !PC_IsValidWeapon(weaponid))
			{
				#if defined DEBUG
					printf("AC(debug): Damagedid: %d, amount: %f, weaponid: %d", damagedid, amount, weaponid);
				#endif
				PC_KickWithCode(playerid, "", 0, 47, 3);
				return 1;
			}
			new PC_s = PC_wSlot[weaponid];
			if(!ACInfo[playerid][acDead] && ACInfo[playerid][acWeapon][PC_s] != weaponid &&
			ACInfo[playerid][acSetWeapon][PC_s] != weaponid && weaponid != WEAPON_FLAMETHROWER)
			{
				#if defined DEBUG
					printf("AC(debug): Damagedid: %d, amount: %f, AC weapon: %d, weaponid: %d",
					damagedid, amount, ACInfo[playerid][acWeapon][PC_s], weaponid);
				#endif
				PC_KickWithCode(playerid, "", 0, 47, 5);
				return 1;
			}
		}
	#endif
	#if defined PC_OnPlayerGiveDamage
		#if defined OnPlayerWeaponShot
			return PC_OnPlayerGiveDamage(playerid, damagedid, amount, weaponid, bodypart);
		#else
			return PC_OnPlayerGiveDamage(playerid, damagedid, amount, weaponid);
		#endif
	#else
		return 0;
	#endif
}

#if defined _ALS_OnPlayerGiveDamage
	#undef OnPlayerGiveDamage
#else
	#define _ALS_OnPlayerGiveDamage
#endif
#define OnPlayerGiveDamage PC_OnPlayerGiveDamage
#if defined PC_OnPlayerGiveDamage
	#if defined OnPlayerWeaponShot
		forward PC_OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart);
	#else
		forward PC_OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid);
	#endif
#endif

#endif

#if defined FILTERSCRIPT

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(dialogid != AntiCheatGetDialog(playerid))
	{
		new PC_nd = fs_AntiCheatGetNextDialog(playerid);
		if(dialogid == PC_nd) fs_AntiCheatSetDialog(playerid, PC_nd);
	}
	fs_AntiCheatSetNextDialog(playerid, -1);
	#if defined PC_fs_OnDialogResponse
		return PC_fs_OnDialogResponse(playerid, dialogid, response, listitem, inputtext);
	#else
		return 0;
	#endif
}

#if defined _ALS_OnDialogResponse
	#undef OnDialogResponse
#else
	#define _ALS_OnDialogResponse
#endif
#define OnDialogResponse PC_fs_OnDialogResponse
#if defined PC_fs_OnDialogResponse
	forward PC_fs_OnDialogResponse(playerid, dialogid, response, listitem, inputtext[]);
#endif

#else

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(ACInfo[playerid][acKicked] > 0) return 1;
	new PC_i = GetTickCount();
	if(ACInfo[playerid][acACAllow][49])
	{
		if(PC_i < ACInfo[playerid][acCall][0] + PC_Mtfc[0][0]) PC_FloodDetect(playerid, 0);
		else if(PC_i < ACInfo[playerid][acCall][27] + PC_Mtfc[27][0]) PC_FloodDetect(playerid, 27);
		else ACInfo[playerid][acFloodCount][0] = ACInfo[playerid][acFloodCount][27] = 0;
	}
	if(ACInfo[playerid][acACAllow][39] && (dialogid != ACInfo[playerid][acDialog] || listitem < -1))
	{
		#if defined DEBUG
			printf("AC(debug): AC dialog: %d, dialogid: %d, listitem: %d, playerid: %d",
			ACInfo[playerid][acDialog], dialogid, listitem, playerid);
		#endif
		PC_KickWithCode(playerid, "", 0, 39);
		return 1;
	}
	ACInfo[playerid][acDialog] = -1;
	ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][0] = PC_i;
	if(ACInfo[playerid][acACAllow][45])
	{
		for(PC_i = strlen(inputtext) - 1; PC_i >= 0; --PC_i)
		{
			if(inputtext[PC_i] == '%') strdel(inputtext, PC_i, PC_i + 1);
		}
	}
	#if defined PC_OnDialogResponse
		return PC_OnDialogResponse(playerid, dialogid, response, listitem, inputtext);
	#else
		return 0;
	#endif
}

#if defined _ALS_OnDialogResponse
	#undef OnDialogResponse
#else
	#define _ALS_OnDialogResponse
#endif
#define OnDialogResponse PC_OnDialogResponse
#if defined PC_OnDialogResponse
	forward PC_OnDialogResponse(playerid, dialogid, response, listitem, inputtext[]);
#endif

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	#if !PC_USE_TUNING_GARAGES
		if(ACInfo[playerid][acACAllow][23]) PC_KickWithCode(playerid, "", 0, 23, 1);
	#else
		if(ACInfo[playerid][acACAllow][23] &&
		(!(0 <= enterexit <= 1) || !(0 <= interiorid <= 3))) PC_KickWithCode(playerid, "", 0, 23, 7);
	#endif
	new PC_i = GetTickCount();
	if(ACInfo[playerid][acACAllow][49])
	{
		if(PC_i < ACInfo[playerid][acCall][1] + PC_Mtfc[1][0]) PC_FloodDetect(playerid, 1);
		else if(PC_i < ACInfo[playerid][acCall][27] + PC_Mtfc[27][0]) PC_FloodDetect(playerid, 27);
		else ACInfo[playerid][acFloodCount][1] = ACInfo[playerid][acFloodCount][27] = 0;
	}
	ACInfo[playerid][acModShop] = !!enterexit;
	ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][1] = PC_i;
	ACInfo[playerid][acSetPosTick] = ACInfo[playerid][acGtc][19] = PC_i + 3250;
	new PC_vehid = ACInfo[playerid][acVeh];
	if(ACInfo[playerid][acKicked] < 1)
	{
		PC_i = interiorid % 256;
		ACVehInfo[PC_vehid][acInt] = PC_i;
		#if defined foreach
			foreach(new PC_j : Player)
			{
				if(ACInfo[PC_j][acVeh] == PC_vehid) ACInfo[PC_j][acInt] = PC_i;
			}
		#else
			#if defined GetPlayerPoolSize
				for(new PC_j = GetPlayerPoolSize(); PC_j >= 0; --PC_j)
			#else
				for(new PC_j = MAX_PLAYERS - 1; PC_j >= 0; --PC_j)
			#endif
			{
				if(IsPlayerInVehicle(PC_j, PC_vehid)) ACInfo[PC_j][acInt] = PC_i;
			}
		#endif
	}
	else
	{
		#if defined foreach
			foreach(new PC_j : Player)
			{
				if(ACInfo[PC_j][acVeh] == PC_vehid)
				{
					if(ACInfo[PC_j][acUnFrozen]) ACInfo[PC_j][acIntRet] = 2;
					else ACInfo[PC_j][acIntRet] = 1;
				}
			}
		#else
			#if defined GetPlayerPoolSize
				for(new PC_j = GetPlayerPoolSize(); PC_j >= 0; --PC_j)
			#else
				for(new PC_j = MAX_PLAYERS - 1; PC_j >= 0; --PC_j)
			#endif
			{
				if(IsPlayerInVehicle(PC_j, PC_vehid))
				{
					if(ACInfo[PC_j][acUnFrozen]) ACInfo[PC_j][acIntRet] = 2;
					else ACInfo[PC_j][acIntRet] = 1;
				}
			}
		#endif
	}
	#if defined PC_OnEnterExitModShop
		return PC_OnEnterExitModShop(playerid, enterexit, interiorid);
	#else
		return 1;
	#endif
}

#if defined _ALS_OnEnterExitModShop
	#undef OnEnterExitModShop
#else
	#define _ALS_OnEnterExitModShop
#endif
#define OnEnterExitModShop PC_OnEnterExitModShop
#if defined PC_OnEnterExitModShop
	forward PC_OnEnterExitModShop(playerid, enterexit, interiorid);
#endif

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	if(!(0 <= playerid < MAX_PLAYERS) || ACInfo[playerid][acKicked] > 0) return 0;
	if(ACInfo[playerid][acIntRet] > 0)
	{
		SetPlayerInterior(playerid, ACInfo[playerid][acInt]);
		if(ACInfo[playerid][acIntRet] == 2) TogglePlayerControllable(playerid, 1);
		ACInfo[playerid][acIntRet] = 0;
	}
	else if(newinteriorid != ACInfo[playerid][acSet][0])
	{
		if(ACInfo[playerid][acSet][0] == -1)
		{
			new PC_vehid = GetPlayerVehicleID(playerid);
			if(PC_vehid > 0)
			{
				if(ACInfo[playerid][acACAllow][3] && newinteriorid != ACInfo[playerid][acInt])
				{
					#if defined DEBUG
						printf("AC(debug): AC interior: %d, acInt (last): %d, newinteriorid: %d, oldinteriorid: %d, veh: %d",
						ACInfo[playerid][acSet][0], ACInfo[playerid][acInt], newinteriorid, oldinteriorid, PC_vehid);
					#endif
					PC_KickWithCode(playerid, "", 0, 3, 1);
				}
			}
			else if(ACInfo[playerid][acIntEnterExits]) ACInfo[playerid][acSetPosTick] = GetTickCount() + 3250;
			else if(ACInfo[playerid][acACAllow][2] && newinteriorid != ACInfo[playerid][acInt])
			{
				#if defined DEBUG
					printf("AC(debug): AC interior: %d, acInt (last): %d, newinteriorid: %d, oldinteriorid: %d",
					ACInfo[playerid][acSet][0], ACInfo[playerid][acInt], newinteriorid, oldinteriorid);
				#endif
				PC_KickWithCode(playerid, "", 0, 2, 1);
			}
		}
	}
	else ACInfo[playerid][acSet][0] = -1;
	if(ACInfo[playerid][acKicked] < 1) ACInfo[playerid][acInt] = newinteriorid % 256;
	#if defined PC_OnPlayerInteriorChange
		return PC_OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid);
	#else
		return 1;
	#endif
}

#if defined _ALS_OnPlayerInteriorChange
	#undef OnPlayerInteriorChange
#else
	#define _ALS_OnPlayerInteriorChange
#endif
#define OnPlayerInteriorChange PC_OnPlayerInteriorChange
#if defined PC_OnPlayerInteriorChange
	forward PC_OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid);
#endif

public OnRconLoginAttempt(ip[], password[], success)
{
	static PC_ipTables[MAX_PLAYERS][2], PC_ipIndex;
	new PC_i, PC_currentIp = PC_IpToInt(ip);
	for(; PC_i < PC_ipIndex && PC_i < sizeof PC_ipTables; ++PC_i)
	{
		if(PC_ipTables[PC_i][0] == PC_currentIp)
		{
			if(success) PC_ipTables[PC_i][1] = 0;
			else if(PC_ACAllow[42])
			{
				if(++PC_ipTables[PC_i][1] > PC_MAX_RCON_LOGIN_ATTEMPT)
				{
					#if defined DEBUG
						printf(DEBUG_CODE_4, ip, password);
					#endif
					PC_ipTables[PC_i][1] = 0;
					PC_KickWithCode(INVALID_PLAYER_ID, ip, 1, 42, 1);
				}
				#if defined OnCheatWarning
					else OnCheatWarning(INVALID_PLAYER_ID, ip, 1, 42, 1, PC_ipTables[PC_i][1]);
				#endif
			}
			PC_i = -1;
			break;
		}
	}
	if(PC_i != -1 && !success)
	{
		PC_ipTables[PC_ipIndex][0] = PC_currentIp;
		if(PC_ACAllow[42])
		{
			if(++PC_ipTables[PC_ipIndex][1] > PC_MAX_RCON_LOGIN_ATTEMPT)
			{
				#undef PC_MAX_RCON_LOGIN_ATTEMPT
				#if defined DEBUG
					printf(DEBUG_CODE_4, ip, password, PC_ipTables[PC_ipIndex][1]);
				#endif
				PC_ipTables[PC_ipIndex][1] = 0;
				PC_KickWithCode(INVALID_PLAYER_ID, ip, 1, 42, 2);
			}
			#if defined OnCheatWarning
				else OnCheatWarning(INVALID_PLAYER_ID, ip, 1, 42, 2, PC_ipTables[PC_ipIndex][1]);
			#endif
		}
		if(++PC_ipIndex >= sizeof PC_ipTables) PC_ipIndex = 0;
		PC_ipTables[PC_ipIndex][1] = 0;
	}
	#if defined PC_OnRconLoginAttempt
		return PC_OnRconLoginAttempt(ip, password, success);
	#else
		return 1;
	#endif
}

#if defined _ALS_OnRconLoginAttempt
	#undef OnRconLoginAttempt
#else
	#define _ALS_OnRconLoginAttempt
#endif
#define OnRconLoginAttempt PC_OnRconLoginAttempt
#if defined PC_OnRconLoginAttempt
	forward PC_OnRconLoginAttempt(ip[], password[], success);
#endif

public OnPlayerUpdate(playerid)
{
	if(!(0 <= playerid < MAX_PLAYERS) || ACInfo[playerid][acKicked] > 0) return 0;
	new PC_gtc = GetTickCount(), PC_gpp;
	#if PC_USE_NPC
		if(!IsPlayerNPC(playerid))
		{
	#endif
		new PC_w, PC_sa = GetPlayerState(playerid);
		if(PC_sa != PLAYER_STATE_SPECTATING && (PC_w = GetPlayerWeapon(playerid)) != -1)
		{
			PC_gpp = GetPlayerPing(playerid);
			new PC_a = GetPlayerAmmo(playerid), PC_s = PC_wSlot[PC_w];
			if(ACInfo[playerid][acSet][3] > 0)
			{
				if(ACInfo[playerid][acSet][3] == PC_w)
				{
					ACInfo[playerid][acSet][3] = ACInfo[playerid][acSetWeapon][PC_s] = -1;
					ACInfo[playerid][acWeapon][PC_s] = PC_w;
				}
				else if(ACInfo[playerid][acGiveAmmo][PC_wSlot[ACInfo[playerid][acSet][3]]] == 0 ||
				PC_wSlot[ACInfo[playerid][acSet][3]] != PC_s && PC_gtc > ACInfo[playerid][acGtc][2] + PC_gpp) ACInfo[playerid][acSet][3] = -1;
				else if(!(PLAYER_STATE_DRIVER <= PC_sa <= PLAYER_STATE_PASSENGER) && PC_gtc > ACInfo[playerid][acGtc][2] + PC_gpp)
				{
					if(ACInfo[playerid][acACAllow][52] && ACInfo[playerid][acNOPAllow][0])
					{
						if(++ACInfo[playerid][acNOPCount][0] > PC_MAX_NOP_WARNINGS)
						{
							#if defined DEBUG
								printf(DEBUG_CODE_5, playerid, "SetPlayerArmedWeapon");
								printf("AC(debug): AC weapon: %d, weaponid: %d", ACInfo[playerid][acSet][3], PC_w);
							#endif
							#if defined OnCheatDetected
								PC_KickWithCode(playerid, "", 0, 52, 1);
								if(ACInfo[playerid][acKicked] > 0) return 0;
								ACInfo[playerid][acSetWeapon][PC_s] = ACInfo[playerid][acSet][3] = -1;
							#else
								return PC_KickWithCode(playerid, "", 0, 52, 1);
							#endif
						}
						#if defined OnNOPWarning
							else OnNOPWarning(playerid, 1, ACInfo[playerid][acNOPCount][0]);
						#endif
					}
					else if(++ACInfo[playerid][acNOPCount][0] > PC_MAX_NOP_WARNINGS)
					{
						ACInfo[playerid][acSetWeapon][PC_s] =
						ACInfo[playerid][acSet][3] = -1;
					}
				}
			}
			if(ACInfo[playerid][acGiveAmmo][PC_s] != -65535)
			{
				if(ACInfo[playerid][acGiveAmmo][PC_s] == PC_a ||
				ACInfo[playerid][acGiveAmmo][PC_s] > PC_a && !(PC_a < 0 <= ACInfo[playerid][acGiveAmmo][PC_s]) &&
				PC_gtc > ACInfo[playerid][acGtcGiveAmmo][PC_s] + PC_gpp)
				{
					ACInfo[playerid][acGiveAmmo][PC_s] = -65535;
					ACInfo[playerid][acAmmo][PC_s] = PC_a;
				}
				else if(PC_gtc > ACInfo[playerid][acGtcGiveAmmo][PC_s] + PC_gpp)
				{
					if(ACInfo[playerid][acACAllow][52] && ACInfo[playerid][acNOPAllow][1])
					{
						if(++ACInfo[playerid][acNOPCount][1] > PC_MAX_NOP_WARNINGS)
						{
							#if defined DEBUG
								printf(DEBUG_CODE_5, playerid, "SetPlayerAmmo");
								printf("AC(debug): AC ammo: %d, ammo: %d, weaponid: %d",
								ACInfo[playerid][acGiveAmmo][PC_s], PC_a, PC_w);
							#endif
							#if defined OnCheatDetected
								PC_KickWithCode(playerid, "", 0, 52, 2);
								if(ACInfo[playerid][acKicked] > 0) return 0;
								ACInfo[playerid][acGiveAmmo][PC_s] = -65535;
							#else
								return PC_KickWithCode(playerid, "", 0, 52, 2);
							#endif
						}
						#if defined OnNOPWarning
							else OnNOPWarning(playerid, 2, ACInfo[playerid][acNOPCount][1]);
						#endif
					}
					else if(++ACInfo[playerid][acNOPCount][1] > PC_MAX_NOP_WARNINGS) ACInfo[playerid][acGiveAmmo][PC_s] = -65535;
				}
			}
			#if PC_USE_AMMUNATIONS || PC_USE_TUNING_GARAGES
				new PC_money = orig_GetPlayerMoney(playerid);
			#endif
			#if PC_USE_AMMUNATIONS
				if(ACInfo[playerid][acSet][10] != -1)
				{
					if(PC_money < ACInfo[playerid][acMoney] &&
					ACInfo[playerid][acSet][10] <= ACInfo[playerid][acMoney] - PC_money) ACInfo[playerid][acSet][10] = -1;
					else if(PC_gtc > ACInfo[playerid][acGtc][15] + PC_gpp)
					{
						if(ACInfo[playerid][acACAllow][15])
						{
							if(++ACInfo[playerid][acCheatCount][10] > PC_MAX_NOP_WARNINGS)
							{
								#if defined DEBUG
									printf("AC(debug): Money: %d, old money: %d, price: %d",
									PC_money, ACInfo[playerid][acMoney], ACInfo[playerid][acSet][10]);
								#endif
								#if defined OnCheatDetected
									PC_KickWithCode(playerid, "", 0, 15, 3);
									if(ACInfo[playerid][acKicked] > 0) return 0;
									ACInfo[playerid][acSet][10] = -1;
								#else
									return PC_KickWithCode(playerid, "", 0, 15, 3);
								#endif
							}
							#if defined OnCheatWarning
								else OnCheatWarning(playerid, "", 0, 15, 3, ACInfo[playerid][acCheatCount][10]);
							#endif
						}
						else if(++ACInfo[playerid][acCheatCount][10] > PC_MAX_NOP_WARNINGS) ACInfo[playerid][acSet][10] = -1;
					}
				}
			#endif
			new PC_i = GetPlayerInterior(playerid), Float:PC_pX, Float:PC_pY, Float:PC_pZ, Float:PC_tmp;
			GetPlayerPos(playerid, PC_pX, PC_pY, PC_pZ);
			if(ACInfo[playerid][acLastWeapon] != PC_w)
			{
				if(ACInfo[playerid][acWeapon][PC_s] != PC_w && PC_gtc > ACInfo[playerid][acGtc][7] + PC_gpp)
				{
					#if PC_USE_PICKUP_WEAPONS
						#if defined Streamer_GetDistanceToItem\
							&& defined Streamer_GetIntData
						if(ACInfo[playerid][acLastPickup] > MAX_PICKUPS) Streamer_GetDistanceToItem(PC_pX, PC_pY, PC_pZ, STREAMER_TYPE_PICKUP, ACInfo[playerid][acLastPickup] - MAX_PICKUPS, PC_tmp);
						if(0 <= ACInfo[playerid][acLastPickup] < MAX_PICKUPS && ACPickInfo[ACInfo[playerid][acLastPickup]][acWeapon] == PC_w &&
						PC_a <= (3 <= PC_s <= 5 ? (ACInfo[playerid][acAmmo][PC_s] + PC_pAmmo[PC_w]) : PC_pAmmo[PC_w]) &&
						IsPlayerInRangeOfPoint(playerid, 15.0, ACPickInfo[ACInfo[playerid][acLastPickup]][acPosX],
						ACPickInfo[ACInfo[playerid][acLastPickup]][acPosY], ACPickInfo[ACInfo[playerid][acLastPickup]][acPosZ]) ||
						ACInfo[playerid][acLastPickup] > MAX_PICKUPS &&
						Streamer_GetIntData(STREAMER_TYPE_PICKUP, ACInfo[playerid][acLastPickup] - MAX_PICKUPS, E_STREAMER_EXTRA_ID) == PC_w + 100 &&
						PC_a <= (3 <= PC_s <= 5 ? (ACInfo[playerid][acAmmo][PC_s] + PC_pAmmo[PC_w]) : PC_pAmmo[PC_w]) && PC_tmp <= 15.0)
						#else
						if(0 <= ACInfo[playerid][acLastPickup] < MAX_PICKUPS && ACPickInfo[ACInfo[playerid][acLastPickup]][acWeapon] == PC_w &&
						PC_a <= (3 <= PC_s <= 5 ? (ACInfo[playerid][acAmmo][PC_s] + PC_pAmmo[PC_w]) : PC_pAmmo[PC_w]) &&
						IsPlayerInRangeOfPoint(playerid, 15.0, ACPickInfo[ACInfo[playerid][acLastPickup]][acPosX],
						ACPickInfo[ACInfo[playerid][acLastPickup]][acPosY], ACPickInfo[ACInfo[playerid][acLastPickup]][acPosZ]))
						#endif
						{
							ACInfo[playerid][acWeapon][PC_s] = PC_w;
							ACInfo[playerid][acAmmo][PC_s] = PC_a;
						}
						else
						{
					#endif
						#if PC_USE_AMMUNATIONS
							if(22 <= PC_w <= 32 && PC_InAmmuNation(playerid, PC_i))
							{
								ACInfo[playerid][acCheatCount][10] = 0;
								if(ACInfo[playerid][acSet][10] != -1) ACInfo[playerid][acSet][10] += PC_AmmuNationInfo[PC_w - 22][0];
								else ACInfo[playerid][acSet][10] = PC_AmmuNationInfo[PC_w - 22][0];
								if(3 <= PC_s <= 5) ACInfo[playerid][acAmmo][PC_s] += PC_AmmuNationInfo[PC_w - 22][1];
								else ACInfo[playerid][acAmmo][PC_s] = PC_AmmuNationInfo[PC_w - 22][1];
								ACInfo[playerid][acWeapon][PC_s] = PC_w;
								ACInfo[playerid][acGtc][15] = PC_gtc + 2650;
							}
							else
							{
						#endif
							if(PC_w == 40 || PC_w == 46 && ACInfo[playerid][acVeh] > 0 && ACInfo[playerid][acParachute] > 0)
							{
								ACInfo[playerid][acWeapon][PC_s] = PC_w;
								ACInfo[playerid][acAmmo][PC_s] = PC_a;
								ACInfo[playerid][acParachute] = 0;
							}
							else if(ACInfo[playerid][acACAllow][15] && ACInfo[playerid][acSetWeapon][PC_s] == -1)
							{
								#if defined DEBUG
									printf("AC(debug): AC weaponid: %d, AC ammo: %d, weaponid: %d, ammo: %d",
									ACInfo[playerid][acWeapon][PC_s], ACInfo[playerid][acAmmo][PC_s], PC_w, PC_a);
								#endif
								#if defined OnCheatDetected
									PC_KickWithCode(playerid, "", 0, 15, 1);
									if(ACInfo[playerid][acKicked] > 0) return 0;
									ACInfo[playerid][acWeapon][PC_s] = PC_w;
									ACInfo[playerid][acAmmo][PC_s] = PC_a;
								#else
									return PC_KickWithCode(playerid, "", 0, 15, 1);
								#endif
							}
						#if PC_USE_AMMUNATIONS
							}
						#endif
					#if PC_USE_PICKUP_WEAPONS
						}
					#endif
				}
			}
			else if(ACInfo[playerid][acAmmo][PC_s] != PC_a && PC_sa != PLAYER_STATE_DRIVER &&
			7 <= PC_s <= 9 && PC_w != 38 && ACInfo[playerid][acGiveAmmo][PC_s] == -65535 &&
			PC_gtc > ACInfo[playerid][acGtc][7] + PC_gpp)
			{
				if(ACInfo[playerid][acACAllow][16] &&
				(ACInfo[playerid][acAmmo][PC_s] == 0 || PC_a > ACInfo[playerid][acAmmo][PC_s] ||
				PC_a < 0 < ACInfo[playerid][acAmmo][PC_s]))
				{
					#if defined DEBUG
						printf("AC(debug): AC ammo: %d, ammo: %d, weaponid: %d",
						ACInfo[playerid][acAmmo][PC_s], PC_a, PC_w);
					#endif
					#if defined OnCheatDetected
						PC_KickWithCode(playerid, "", 0, 16, 1);
						if(ACInfo[playerid][acKicked] > 0) return 0;
					#else
						return PC_KickWithCode(playerid, "", 0, 16, 1);
					#endif
				}
				ACInfo[playerid][acAmmo][PC_s] = PC_a;
			}
			GetPlayerHealth(playerid, PC_tmp);
			new PC_health = floatround(PC_tmp, floatround_tozero);
			if(ACInfo[playerid][acSet][1] != -1)
			{
				if(ACInfo[playerid][acSet][1] > 255)
				{
					PC_health += 256 * (((ACInfo[playerid][acSet][1] - (ACInfo[playerid][acSet][1] % 256)) / 256) - 1);
					if(ACInfo[playerid][acSet][1] > PC_health + 255) PC_health += 256;
				}
				if(ACInfo[playerid][acSet][1] == PC_health || ACInfo[playerid][acDmgRes] ||
				ACInfo[playerid][acSet][1] > PC_health && PC_gtc > ACInfo[playerid][acGtc][3] + PC_gpp)
				{
					ACInfo[playerid][acSet][1] = -1;
					ACInfo[playerid][acDmgRes] = 0;
				}
				else if(PC_gtc > ACInfo[playerid][acGtc][3] + PC_gpp)
				{
					if(ACInfo[playerid][acACAllow][52] && ACInfo[playerid][acNOPAllow][3])
					{
						if(++ACInfo[playerid][acNOPCount][3] > PC_MAX_NOP_WARNINGS)
						{
							#if defined DEBUG
								printf(DEBUG_CODE_5, playerid, "SetPlayerHealth");
								printf("AC(debug): AC health: %d, health: %d", ACInfo[playerid][acSet][1], PC_health);
							#endif
							#if defined OnCheatDetected
								PC_KickWithCode(playerid, "", 0, 52, 3);
								if(ACInfo[playerid][acKicked] > 0) return 0;
								ACInfo[playerid][acSet][1] = -1;
							#else
								return PC_KickWithCode(playerid, "", 0, 52, 3);
							#endif
						}
						#if defined OnNOPWarning
							else OnNOPWarning(playerid, 3, ACInfo[playerid][acNOPCount][3]);
						#endif
					}
					else if(++ACInfo[playerid][acNOPCount][3] > PC_MAX_NOP_WARNINGS) ACInfo[playerid][acSet][1] = -1;
				}
			}
			else if(ACInfo[playerid][acACAllow][12])
			{
				if(ACInfo[playerid][acHealth] > 255)
				{
					PC_health += 256 * (((ACInfo[playerid][acHealth] - (ACInfo[playerid][acHealth] % 256)) / 256) - 1);
					if(ACInfo[playerid][acHealth] > PC_health + 255) PC_health += 256;
				}
				if(PC_health > ACInfo[playerid][acHealth])
				{
					#if PC_USE_RESTAURANTS
						if(PC_health > ACInfo[playerid][acHealth] + 70 || !PC_InRestaurant(playerid, PC_i))
						{
					#endif
						#if PC_USE_VENDING_MACHINES
							if(PC_health > ACInfo[playerid][acHealth] + 35 || !PC_NearVendingMachine(playerid, PC_i))
							{
						#endif
							#if defined DEBUG
								printf("AC(debug): AC health: %d, health: %d", ACInfo[playerid][acHealth], PC_health);
							#endif
							#if defined OnCheatDetected
								PC_KickWithCode(playerid, "", 0, 12);
								if(ACInfo[playerid][acKicked] > 0) return 0;
							#else
								return PC_KickWithCode(playerid, "", 0, 12);
							#endif
						#if PC_USE_VENDING_MACHINES
							}
						#endif
					#if PC_USE_RESTAURANTS
						}
					#endif
				}
			}
			GetPlayerArmour(playerid, PC_tmp);
			new PC_armour = floatround(PC_tmp, floatround_tozero);
			if(ACInfo[playerid][acSet][2] != -1)
			{
				if(ACInfo[playerid][acSet][2] > 255)
				{
					PC_armour += 256 * (((ACInfo[playerid][acSet][2] - (ACInfo[playerid][acSet][2] % 256)) / 256) - 1);
					if(ACInfo[playerid][acSet][2] > PC_armour + 255) PC_armour += 256;
				}
				if(ACInfo[playerid][acSet][2] == PC_armour || ACInfo[playerid][acDmgRes] ||
				ACInfo[playerid][acSet][2] > PC_armour && PC_gtc > ACInfo[playerid][acGtc][5] + PC_gpp)
				{
					ACInfo[playerid][acSet][2] = -1;
					ACInfo[playerid][acDmgRes] = 0;
				}
				else if(PC_gtc > ACInfo[playerid][acGtc][5] + PC_gpp)
				{
					if(ACInfo[playerid][acACAllow][52] && ACInfo[playerid][acNOPAllow][5])
					{
						if(++ACInfo[playerid][acNOPCount][5] > PC_MAX_NOP_WARNINGS)
						{
							#if defined DEBUG
								printf(DEBUG_CODE_5, playerid, "SetPlayerArmour");
								printf("AC(debug): AC armour: %d, armour: %d", ACInfo[playerid][acSet][2], PC_armour);
							#endif
							#if defined OnCheatDetected
								PC_KickWithCode(playerid, "", 0, 52, 4);
								if(ACInfo[playerid][acKicked] > 0) return 0;
								ACInfo[playerid][acSet][2] = -1;
							#else
								return PC_KickWithCode(playerid, "", 0, 52, 4);
							#endif
						}
						#if defined OnNOPWarning
							else OnNOPWarning(playerid, 4, ACInfo[playerid][acNOPCount][5]);
						#endif
					}
					else if(++ACInfo[playerid][acNOPCount][5] > PC_MAX_NOP_WARNINGS) ACInfo[playerid][acSet][2] = -1;
				}
			}
			else if(ACInfo[playerid][acACAllow][13])
			{
				if(ACInfo[playerid][acArmour] > 255)
				{
					PC_armour += 256 * (((ACInfo[playerid][acArmour] - (ACInfo[playerid][acArmour] % 256)) / 256) - 1);
					if(ACInfo[playerid][acArmour] > PC_armour + 255) PC_armour += 256;
				}
				if(PC_armour > ACInfo[playerid][acArmour])
				{
					#if PC_USE_AMMUNATIONS
						if(PC_armour == 100 && PC_InAmmuNation(playerid, PC_i))
						{
							ACInfo[playerid][acCheatCount][10] = 0;
							if(ACInfo[playerid][acSet][10] != -1) ACInfo[playerid][acSet][10] += 200;
							else ACInfo[playerid][acSet][10] = 200;
							ACInfo[playerid][acGtc][15] = PC_gtc + 2650;
						}
						else
						{
					#endif
						#if defined DEBUG
							printf("AC(debug): AC armour: %d, armour: %d", ACInfo[playerid][acArmour], PC_armour);
						#endif
						#if defined OnCheatDetected
							PC_KickWithCode(playerid, "", 0, 13);
							if(ACInfo[playerid][acKicked] > 0) return 0;
						#else
							return PC_KickWithCode(playerid, "", 0, 13);
						#endif
					#if PC_USE_AMMUNATIONS
						}
					#endif
				}
			}
			if(PC_health < ACInfo[playerid][acHealth] || PC_armour < ACInfo[playerid][acArmour])
			{
				ACInfo[playerid][acVehDmgRes] = false;
				ACInfo[playerid][acCheatCount][9] = ACInfo[playerid][acDmgRes] = 0;
			}
			else if(ACInfo[playerid][acACAllow][19] &&
			ACInfo[playerid][acDmgRes] && PC_gtc > ACInfo[playerid][acGtc][14] + PC_gpp)
			{
				ACInfo[playerid][acDmgRes] = 0;
				ACInfo[playerid][acVehDmgRes] = false;
				if(++ACInfo[playerid][acCheatCount][9] > PC_MAX_GODMODE_WARNINGS)
				{
					#undef PC_MAX_GODMODE_WARNINGS
					#if defined DEBUG
						printf("AC(debug): AC health: %d, health: %d, AC armour: %d, armour: %d",
						ACInfo[playerid][acHealth], PC_health, ACInfo[playerid][acArmour], PC_armour);
					#endif
					#if defined OnCheatDetected
						PC_KickWithCode(playerid, "", 0, 19);
						if(ACInfo[playerid][acKicked] > 0) return 0;
						ACInfo[playerid][acCheatCount][9] = 0;
					#else
						return PC_KickWithCode(playerid, "", 0, 19);
					#endif
				}
				#if defined OnCheatWarning
					else OnCheatWarning(playerid, "", 0, 19, 0, ACInfo[playerid][acCheatCount][9]);
				#endif
			}
			#if PC_USE_TUNING_GARAGES
			if(ACInfo[playerid][acSet][12] != -1)
			{
				if(PC_money < ACInfo[playerid][acMoney] &&
				ACInfo[playerid][acSet][12] <= ACInfo[playerid][acMoney] - PC_money) ACInfo[playerid][acSet][12] = -1;
				else if(PC_gtc > ACInfo[playerid][acGtc][17] + PC_gpp)
				{
					if(ACInfo[playerid][acACAllow][23])
					{
						if(++ACInfo[playerid][acCheatCount][12] > PC_MAX_NOP_WARNINGS)
						{
							#if defined DEBUG
								printf("AC(debug): Money: %d, old money: %d, component price: %d",
								PC_money, ACInfo[playerid][acMoney], ACInfo[playerid][acSet][12]);
							#endif
							#if defined OnCheatDetected
								PC_KickWithCode(playerid, "", 0, 23, 3);
								if(ACInfo[playerid][acKicked] > 0) return 0;
								ACInfo[playerid][acSet][12] = -1;
							#else
								return PC_KickWithCode(playerid, "", 0, 23, 3);
							#endif
						}
						#if defined OnCheatWarning
							else OnCheatWarning(playerid, "", 0, 23, 3, ACInfo[playerid][acCheatCount][12]);
						#endif
					}
					else if(++ACInfo[playerid][acCheatCount][12] > PC_MAX_NOP_WARNINGS) ACInfo[playerid][acSet][12] = -1;
				}
			}
			#endif
			if(ACInfo[playerid][acSet][0] != -1 && PC_gtc > ACInfo[playerid][acGtc][0] + PC_gpp)
			{
				if(ACInfo[playerid][acACAllow][52] && ACInfo[playerid][acNOPAllow][2] && PC_i != ACInfo[playerid][acSet][0])
				{
					if(++ACInfo[playerid][acNOPCount][2] > PC_MAX_NOP_WARNINGS)
					{
						#if defined DEBUG
							printf(DEBUG_CODE_5, playerid, "SetPlayerInterior");
							printf("AC(debug): AC interior: %d, interiorid: %d", ACInfo[playerid][acSet][0], PC_i);
						#endif
						#if defined OnCheatDetected
							PC_KickWithCode(playerid, "", 0, 52, 5);
							if(ACInfo[playerid][acKicked] > 0) return 0;
							ACInfo[playerid][acSet][0] = -1;
						#else
							return PC_KickWithCode(playerid, "", 0, 52, 5);
						#endif
					}
					#if defined OnNOPWarning
						else OnNOPWarning(playerid, 5, ACInfo[playerid][acNOPCount][2]);
					#endif
				}
				else if(++ACInfo[playerid][acNOPCount][2] > PC_MAX_NOP_WARNINGS) ACInfo[playerid][acSet][0] = -1;
			}
			if(ACInfo[playerid][acSet][6] != -1 && PC_gtc > ACInfo[playerid][acGtc][12] + PC_gpp)
			{
				if(ACInfo[playerid][acACAllow][52] && ACInfo[playerid][acNOPAllow][8])
				{
					if(++ACInfo[playerid][acNOPCount][8] > PC_MAX_NOP_WARNINGS)
					{
						#if defined DEBUG
							printf(DEBUG_CODE_5, playerid, "TogglePlayerSpectating");
						#endif
						#if defined OnCheatDetected
							PC_KickWithCode(playerid, "", 0, 52, 6);
							if(ACInfo[playerid][acKicked] > 0) return 0;
							ACInfo[playerid][acSet][6] = -1;
						#else
							return PC_KickWithCode(playerid, "", 0, 52, 6);
						#endif
					}
					#if defined OnNOPWarning
						else OnNOPWarning(playerid, 6, ACInfo[playerid][acNOPCount][8]);
					#endif
				}
				else if(++ACInfo[playerid][acNOPCount][8] > PC_MAX_NOP_WARNINGS) ACInfo[playerid][acSet][6] = -1;
			}
			if(ACInfo[playerid][acSet][7] != -1 && PC_gtc > ACInfo[playerid][acGtc][13] + PC_gpp)
			{
				if(ACInfo[playerid][acACAllow][52] && ACInfo[playerid][acNOPAllow][9])
				{
					if(++ACInfo[playerid][acNOPCount][9] > PC_MAX_NOP_WARNINGS)
					{
						#if defined DEBUG
							printf(DEBUG_CODE_5, playerid, "SpawnPlayer");
							printf("AC(debug): acSet[7]: %d", ACInfo[playerid][acSet][7]);
						#endif
						#if defined OnCheatDetected
							PC_KickWithCode(playerid, "", 0, 52, 7);
							if(ACInfo[playerid][acKicked] > 0) return 0;
							ACInfo[playerid][acSet][7] = -1;
						#else
							return PC_KickWithCode(playerid, "", 0, 52, 7);
						#endif
					}
					#if defined OnNOPWarning
						else OnNOPWarning(playerid, 7, ACInfo[playerid][acNOPCount][9]);
					#endif
				}
				else if(++ACInfo[playerid][acNOPCount][9] > PC_MAX_NOP_WARNINGS) ACInfo[playerid][acSet][7] = -1;
			}
			new PC_vehid = GetPlayerVehicleID(playerid);
			if(ACInfo[playerid][acSet][11] != -1 && PC_vehid > 0 && PC_gtc > ACInfo[playerid][acGtc][8] + PC_gpp)
			{
				if(ACInfo[playerid][acACAllow][52] && ACInfo[playerid][acNOPAllow][11])
				{
					new Float:PC_vX, Float:PC_vY, Float:PC_vZ;
					GetVehicleVelocity(PC_vehid, PC_vX, PC_vY, PC_vZ);
					if(PC_GetSpeed(PC_vX, PC_vY, PC_vZ) <= 30)
					{
						#if defined DEBUG
							printf(DEBUG_CODE_5, playerid, "RemovePlayerFromVehicle");
							printf("AC(debug): Veh model: %d, veh: %d", GetVehicleModel(PC_vehid), PC_vehid);
						#endif
						#if defined OnCheatDetected
							PC_KickWithCode(playerid, "", 0, 52, 8);
							if(ACInfo[playerid][acKicked] > 0) return 0;
							ACInfo[playerid][acSet][11] = -1;
						#else
							return PC_KickWithCode(playerid, "", 0, 52, 8);
						#endif
					}
				}
				else ACInfo[playerid][acSet][11] = -1;
			}
			PC_s = GetPlayerVehicleSeat(playerid);
			if(ACInfo[playerid][acSet][9] != -1)
			{
				if(ACInfo[playerid][acSet][9] == PC_vehid &&
				(ACInfo[playerid][acSet][5] == PC_s || ACInfo[playerid][acSet][5] == -1))
				{
					if(ACInfo[playerid][acVeh] > 0)
					{
						if(PC_IsAnAircraft(GetVehicleModel(ACInfo[playerid][acVeh]))) ACInfo[playerid][acParachute] = 2;
						if(ACVehInfo[ACInfo[playerid][acVeh]][acDriver] == playerid) ACVehInfo[ACInfo[playerid][acVeh]][acDriver] = INVALID_PLAYER_ID;
					}
					if(PC_s == 0)
					{
						ACVehInfo[PC_vehid][acDriver] = playerid;
						GetVehicleZAngle(PC_vehid, ACVehInfo[PC_vehid][acZAngle]);
						ACInfo[playerid][acGtc][9] = PC_gtc + 1650;
						ACInfo[playerid][acSetVehHealth] = -1.0;
						ACInfo[playerid][acLastPosX] = PC_pX;
						ACInfo[playerid][acLastPosY] = PC_pY;
					}
					ACInfo[playerid][acEnterVeh] =
					ACInfo[playerid][acCheatCount][11] = 0;
					ACInfo[playerid][acVehDmgRes] = false;
					ACInfo[playerid][acEnterSeat] =
					ACInfo[playerid][acSet][11] =
					ACInfo[playerid][acSet][9] =
					ACInfo[playerid][acSet][8] = -1;
					ACInfo[playerid][acSeat] = PC_s;
				}
				else if(PC_gtc > ACInfo[playerid][acGtc][1] + PC_gpp)
				{
					if(ACInfo[playerid][acACAllow][52] && ACInfo[playerid][acNOPAllow][7] &&
					ACInfo[playerid][acSet][5] != -1 && ACVehInfo[ACInfo[playerid][acSet][9]][acSpawned])
					{
						if(++ACInfo[playerid][acNOPCount][7] > PC_MAX_NOP_WARNINGS)
						{
							#if defined DEBUG
								printf(DEBUG_CODE_5, playerid, "PutPlayerInVehicle");
								printf("AC(debug): AC veh: %d, veh: %d, AC seat: %d, seatid: %d",
								ACInfo[playerid][acSet][9], PC_vehid, ACInfo[playerid][acSet][5], PC_s);
							#endif
							#if defined OnCheatDetected
								PC_KickWithCode(playerid, "", 0, 52, 9);
								if(ACInfo[playerid][acKicked] > 0) return 0;
								ACInfo[playerid][acSet][9] = -1;
							#else
								return PC_KickWithCode(playerid, "", 0, 52, 9);
							#endif
						}
						#if defined OnNOPWarning
							else OnNOPWarning(playerid, 9, ACInfo[playerid][acNOPCount][7]);
						#endif
					}
					else if(++ACInfo[playerid][acNOPCount][7] > PC_MAX_NOP_WARNINGS) ACInfo[playerid][acSet][9] = -1;
				}
			}
			else
			{
				new Float:PC_dist_set = 25000.0;
				if(ACInfo[playerid][acSet][8] != -1)
				{
					PC_dist_set = GetPlayerDistanceFromPoint(playerid, ACInfo[playerid][acSetPosX], ACInfo[playerid][acSetPosY], (ACInfo[playerid][acTpToZ] ? PC_pZ : ACInfo[playerid][acSetPosZ]));
					if(PC_dist_set < 15.0)
					{
						ACInfo[playerid][acSet][8] = -1;
						ACInfo[playerid][acGtc][11] = 0;
						ACInfo[playerid][acTpToZ] = false;
						ACInfo[playerid][acLastPosX] = PC_pX;
						ACInfo[playerid][acLastPosY] = PC_pY;
						ACInfo[playerid][acPosX] = PC_pX;
						ACInfo[playerid][acPosY] = PC_pY;
						ACInfo[playerid][acPosZ] = PC_pZ;
					}
					else if(PC_gtc > ACInfo[playerid][acGtc][11] + PC_gpp)
					{
						if(ACInfo[playerid][acACAllow][52] && ACInfo[playerid][acNOPAllow][10])
						{
							if(++ACInfo[playerid][acNOPCount][10] > PC_MAX_NOP_WARNINGS)
							{
								#if defined DEBUG
									printf(DEBUG_CODE_5, playerid, "SetPlayerPos");
									printf("AC(debug): Dist: %f, acSet[8]: %d", PC_dist_set, ACInfo[playerid][acSet][8]);
								#endif
								#if defined OnCheatDetected
									PC_KickWithCode(playerid, "", 0, 52, 10);
									if(ACInfo[playerid][acKicked] > 0) return 0;
									ACInfo[playerid][acTpToZ] = false;
									ACInfo[playerid][acSet][8] = -1;
								#else
									return PC_KickWithCode(playerid, "", 0, 52, 10);
								#endif
							}
							#if defined OnNOPWarning
								else OnNOPWarning(playerid, 10, ACInfo[playerid][acNOPCount][10]);
							#endif
						}
						else if(++ACInfo[playerid][acNOPCount][10] > PC_MAX_NOP_WARNINGS)
						{
							ACInfo[playerid][acTpToZ] = false;
							ACInfo[playerid][acSet][8] = -1;
						}
					}
				}
				new Float:PC_vX, Float:PC_vY, Float:PC_vZ, PC_specact = GetPlayerSpecialAction(playerid),
				Float:PC_dist = GetPlayerDistanceFromPoint(playerid, ACInfo[playerid][acPosX], ACInfo[playerid][acPosY], ACInfo[playerid][acPosZ]);
				if(PC_vehid > 0)
				{
					if(ACInfo[playerid][acVeh] > 0)
					{
						if(ACInfo[playerid][acVeh] != PC_vehid)
						{
							if(ACInfo[playerid][acACAllow][4])
							{
								#if defined DEBUG
									printf("AC(debug): AC veh: %d, veh: %d", ACInfo[playerid][acVeh], PC_vehid);
								#endif
								#if defined OnCheatDetected
									PC_KickWithCode(playerid, "", 0, 4, 2);
									if(ACInfo[playerid][acKicked] > 0) return 0;
								#else
									return PC_KickWithCode(playerid, "", 0, 4, 2);
								#endif
							}
						}
						else if(ACInfo[playerid][acACAllow][50] && ACInfo[playerid][acSeat] != PC_s)
						{
							#if defined DEBUG
								printf("AC(debug): AC seat: %d, seatid: %d, veh: %d", ACInfo[playerid][acSeat], PC_s, PC_vehid);
							#endif
							#if defined OnCheatDetected
								PC_KickWithCode(playerid, "", 0, 50);
								if(ACInfo[playerid][acKicked] > 0) return 0;
							#else
								return PC_KickWithCode(playerid, "", 0, 50);
							#endif
						}
					}
					if(PC_sa == PLAYER_STATE_DRIVER)
					{
						if(ACInfo[playerid][acACAllow][32] && ACVehInfo[PC_vehid][acDriver] != playerid &&
						ACVehInfo[PC_vehid][acDriver] != INVALID_PLAYER_ID)
						{
							#if defined DEBUG
								printf("AC(debug): AC driver: %d, driver: %d, veh: %d",
								ACVehInfo[PC_vehid][acDriver], playerid, PC_vehid);
							#endif
							#if defined OnCheatDetected
								PC_KickWithCode(playerid, "", 0, 32);
								if(ACInfo[playerid][acKicked] > 0) return 0;
							#else
								return SetPlayerPos(playerid, ACInfo[playerid][acPosX], ACInfo[playerid][acPosY], ACInfo[playerid][acPosZ]);
							#endif
						}
						new Float:PC_vHealth;
						GetVehicleHealth(PC_vehid, PC_vHealth);
						if(ACInfo[playerid][acSetVehHealth] != -1.0)
						{
							if(ACInfo[playerid][acSetVehHealth] == PC_vHealth ||
							ACInfo[playerid][acSetVehHealth] > PC_vHealth && PC_gtc > ACInfo[playerid][acGtc][4] + PC_gpp)
							{
								ACInfo[playerid][acSetVehHealth] = -1.0;
								ACInfo[playerid][acVehDmgRes] = false;
							}
							else if(PC_gtc > ACInfo[playerid][acGtc][4] + PC_gpp)
							{
								if(ACInfo[playerid][acACAllow][52] && ACInfo[playerid][acNOPAllow][4])
								{
									if(++ACInfo[playerid][acNOPCount][4] > PC_MAX_NOP_WARNINGS)
									{
										#if defined DEBUG
											printf(DEBUG_CODE_5, playerid, "SetVehicleHealth");
											printf("AC(debug): AC veh health: %f, veh health: %f, veh: %d",
											ACInfo[playerid][acSetVehHealth], PC_vHealth, PC_vehid);
										#endif
										#if defined OnCheatDetected
											PC_KickWithCode(playerid, "", 0, 52, 11);
											if(ACInfo[playerid][acKicked] > 0) return 0;
											ACInfo[playerid][acSetVehHealth] = -1.0;
										#else
											return PC_KickWithCode(playerid, "", 0, 52, 11);
										#endif
									}
									#if defined OnNOPWarning
										else OnNOPWarning(playerid, 11, ACInfo[playerid][acNOPCount][4]);
									#endif
								}
								else if(++ACInfo[playerid][acNOPCount][4] > PC_MAX_NOP_WARNINGS) ACInfo[playerid][acSetVehHealth] = -1.0;
							}
						}
						else if(ACInfo[playerid][acACAllow][11] &&
						(PC_vHealth != PC_vHealth || PC_vHealth > ACVehInfo[PC_vehid][acHealth] &&
						!ACInfo[playerid][acModShop] && PC_vHealth))
						{
							#if PC_USE_PAYNSPRAY
								if(!PC_InPayNSpray(playerid, PC_i))
								{
							#endif
								#if defined DEBUG
									printf("AC(debug): AC veh health: %f, veh health: %f, veh: %d, playerid: %d",
									ACVehInfo[PC_vehid][acHealth], PC_vHealth, PC_vehid, playerid);
								#endif
								#if defined OnCheatDetected
									PC_KickWithCode(playerid, "", 0, 11);
									if(ACInfo[playerid][acKicked] > 0) return 0;
								#endif
								SetVehicleHealth(PC_vehid, ACVehInfo[PC_vehid][acHealth]);
							#if PC_USE_PAYNSPRAY
								}
							#endif
						}
						if(ACInfo[playerid][acVehDmgRes])
						{
							if(PC_vHealth < ACVehInfo[PC_vehid][acHealth])
							{
								ACInfo[playerid][acVehDmgRes] = false;
								ACInfo[playerid][acCheatCount][11] = ACInfo[playerid][acDmgRes] = 0;
							}
							else if(ACInfo[playerid][acACAllow][20] && PC_gtc > ACInfo[playerid][acGtc][16] + PC_gpp)
							{
								ACInfo[playerid][acDmgRes] = 0;
								ACInfo[playerid][acVehDmgRes] = false;
								if(++ACInfo[playerid][acCheatCount][11] > PC_MAX_GODMODE_VEH_WARNINGS)
								{
									#undef PC_MAX_GODMODE_VEH_WARNINGS
									#if defined DEBUG
										printf("AC(debug): AC veh health: %f, veh health: %f, veh: %d",
										ACVehInfo[PC_vehid][acHealth], PC_vHealth, PC_vehid);
									#endif
									#if defined OnCheatDetected
										PC_KickWithCode(playerid, "", 0, 20);
										if(ACInfo[playerid][acKicked] > 0) return 0;
										ACInfo[playerid][acCheatCount][11] = 0;
									#else
										return PC_KickWithCode(playerid, "", 0, 20);
									#endif
								}
								#if defined OnCheatWarning
									else OnCheatWarning(playerid, "", 0, 20, 0, ACInfo[playerid][acCheatCount][11]);
								#endif
							}
						}
						GetVehicleVelocity(PC_vehid, PC_vX, PC_vY, PC_vZ);
						new Float:PC_zAngle, PC_vsp = PC_GetSpeed(PC_vX, PC_vY, PC_vZ);
						GetVehicleZAngle(PC_vehid, PC_zAngle);
						if(PC_dist > 0.8)
						{
							if(PC_dist >= 80.0 && PC_dist > ACVehInfo[PC_vehid][acPosDiff] + ((PC_dist / 2.6) * 1.8) &&
							PC_dist_set >= 80.0 && PC_dist_set > ACVehInfo[PC_vehid][acPosDiff] + ((PC_dist_set / 2.6) * 1.8))
							{
								#if defined VectorSize
								if(ACInfo[playerid][acACAllow][3] && PC_gtc > ACInfo[playerid][acGtc][19] + PC_gpp &&
								(ACInfo[playerid][acPosZ] > -95.0 || PC_pZ - ACInfo[playerid][acPosZ] < 40.0 ||
								VectorSize(PC_pX - ACInfo[playerid][acPosX], PC_pY - ACInfo[playerid][acPosY], 0.0) >= 180.0 ||
								++ACInfo[playerid][acCheatCount][21] > PC_MAX_TELEPORT_GLITCH_WARNINGS))
								#else
								if(ACInfo[playerid][acACAllow][3] && PC_gtc > ACInfo[playerid][acGtc][19] + PC_gpp &&
								(ACInfo[playerid][acPosZ] > -95.0 || PC_pZ - ACInfo[playerid][acPosZ] < 40.0 ||
								floatsqroot(floatpower(PC_pX - ACInfo[playerid][acPosX], 2.0) + floatpower(PC_pY - ACInfo[playerid][acPosY], 2.0)) >= 180.0 ||
								++ACInfo[playerid][acCheatCount][21] > PC_MAX_TELEPORT_GLITCH_WARNINGS))
								#endif
								{
									#if defined DEBUG
										printf("AC(debug): Dist: %f, dist set: %f, old pos diff: %f, speed: %d, veh: %d",
										PC_dist, PC_dist_set, ACVehInfo[PC_vehid][acPosDiff], PC_vsp, PC_vehid);
									#endif
									#if defined OnCheatDetected
										PC_KickWithCode(playerid, "", 0, 3, 2);
										if(ACInfo[playerid][acKicked] > 0) return 0;
										ACInfo[playerid][acCheatCount][21] = 0;
									#else
										return PC_KickWithCode(playerid, "", 0, 3, 2);
									#endif
								}
								else
								{
									ACInfo[playerid][acLastPosX] = PC_pX;
									ACInfo[playerid][acLastPosY] = PC_pY;
								}
							}
							else if(PC_vsp < 12 && PC_gtc > ACInfo[playerid][acGtc][11] + PC_gpp)
							{
								if(PC_dist >= 40.0 && PC_dist_set >= 40.0)
								{
									if(ACInfo[playerid][acACAllow][3])
									{
										#if defined DEBUG
											printf("AC(debug): Speed: %d, dist: %f, dist set: %f", PC_vsp, PC_dist, PC_dist_set);
										#endif
										#if defined OnCheatDetected
											PC_KickWithCode(playerid, "", 0, 3, 4);
											if(ACInfo[playerid][acKicked] > 0) return 0;
										#else
											return PC_KickWithCode(playerid, "", 0, 3, 4);
										#endif
									}
								}
								else if(ACInfo[playerid][acACAllow][1])
								{
									if(++ACInfo[playerid][acCheatCount][2] > PC_MAX_AIR_VEH_WARNINGS)
									{
										#undef PC_MAX_AIR_VEH_WARNINGS
										#if defined DEBUG
											printf("AC(debug): Speed: %d, dist: %f, veh: %d", PC_vsp, PC_dist, PC_vehid);
										#endif
										#if defined OnCheatDetected
											PC_KickWithCode(playerid, "", 0, 1);
											if(ACInfo[playerid][acKicked] > 0) return 0;
											ACInfo[playerid][acCheatCount][2] = 0;
										#else
											return PC_KickWithCode(playerid, "", 0, 1);
										#endif
									}
									#if defined OnCheatWarning
										else OnCheatWarning(playerid, "", 0, 1, 0, ACInfo[playerid][acCheatCount][2]);
									#endif
								}
							}
						}
						if(PC_gtc > ACInfo[playerid][acGtc][9] + PC_gpp)
						{
							PC_i = GetVehicleModel(PC_vehid);
							new PC_spDiff = PC_vsp - PC_GetSpeed(ACVehInfo[PC_vehid][acVelX], ACVehInfo[PC_vehid][acVelY], ACVehInfo[PC_vehid][acVelZ]);
							if(ACInfo[playerid][acACAllow][10])
							{
								if(PC_spDiff > 230)
								{
									#if defined DEBUG
										printf("AC(debug): Speed: %d, old speed: %d, veh model: %d",
										PC_vsp, PC_vsp - PC_spDiff, PC_i);
									#endif
									#if defined OnCheatDetected
										PC_KickWithCode(playerid, "", 0, 10, 3);
										if(ACInfo[playerid][acKicked] > 0) return 0;
									#else
										return PC_KickWithCode(playerid, "", 0, 10, 3);
									#endif
								}
								else if(PC_spDiff >= 20 &&
								ACVehInfo[PC_vehid][acSpeedDiff] <= PC_spDiff && ACVehInfo[PC_vehid][acHealth] <= PC_vHealth &&
								!((PC_i == 432 || PC_i == 449 || PC_IsATrainLoco(PC_i)) && PC_spDiff < 65 ||
								PC_IsABmx(PC_i) && floatabs(PC_vX) <= 0.3 && floatabs(PC_vY) <= 0.3 && floatabs(PC_vZ) <= 0.3 ||
								PC_i != 449 && !PC_IsATrainLoco(PC_i) && !PC_IsABmx(PC_i) && ACVehInfo[PC_vehid][acHealth] < 250.0))
								{
									ACInfo[playerid][acCheatCount][16] += (1 * PC_SPEEDHACK_VEH_RESET_DELAY);
									if(ACInfo[playerid][acCheatCount][16] > PC_MAX_SPEEDHACK_VEH_WARNINGS)
									{
										#if defined DEBUG
											printf("AC(debug): Speed: %d, old speed: %d, veh model: %d",
											PC_vsp, PC_vsp - PC_spDiff, PC_i);
										#endif
										#if defined OnCheatDetected
											PC_KickWithCode(playerid, "", 0, 10, 1);
											if(ACInfo[playerid][acKicked] > 0) return 0;
											ACInfo[playerid][acCheatCount][16] = 0;
										#else
											return PC_KickWithCode(playerid, "", 0, 10, 1);
										#endif
									}
									#if defined OnCheatWarning
										else OnCheatWarning(playerid, "", 0, 10, 1, floatround(ACInfo[playerid][acCheatCount][16] / PC_SPEEDHACK_VEH_RESET_DELAY));
									#endif
								}
							}
							if(ACInfo[playerid][acACAllow][25] &&
							PC_vsp > 15 && PC_abs(PC_spDiff) < 25 &&
							floatround(floatabs(PC_zAngle - ACVehInfo[PC_vehid][acZAngle])) == 180 &&
							(PC_vX < 0.0) != (ACVehInfo[PC_vehid][acVelX] < 0.0) &&
							(PC_vY < 0.0) != (ACVehInfo[PC_vehid][acVelY] < 0.0) &&
							(PC_vZ < 0.0) != (ACVehInfo[PC_vehid][acVelZ] < 0.0))
							{
								#undef PC_abs
								#if defined DEBUG
									printf("AC(debug): Speed: %d, speed diff: %d, z angle: %f, old z angle: %f, veh: %d",
									PC_vsp, PC_spDiff, PC_zAngle, ACVehInfo[PC_vehid][acZAngle], PC_vehid);
								#endif
								#if defined OnCheatDetected
									PC_KickWithCode(playerid, "", 0, 25);
									if(ACInfo[playerid][acKicked] > 0) return 0;
								#else
									return PC_KickWithCode(playerid, "", 0, 25);
								#endif
							}
							if(PC_IsAnAircraft(PC_i))
							{
								if(ACInfo[playerid][acACAllow][10] && (PC_vsp = PC_GetSpeed(PC_vX, PC_vY)) > 270)
								{
									#if defined DEBUG
										printf("AC(debug): Speed (x, y): %d, veh model: %d", PC_vsp, PC_i);
									#endif
									#if defined OnCheatDetected
										PC_KickWithCode(playerid, "", 0, 10, 2);
										if(ACInfo[playerid][acKicked] > 0) return 0;
									#else
										return PC_KickWithCode(playerid, "", 0, 10, 2);
									#endif
								}
							}
							else if(ACInfo[playerid][acACAllow][8])
							{
								PC_tmp = PC_pZ - ACInfo[playerid][acPosZ];
								if(PC_vZ >= 0.1 && PC_vZ > ACVehInfo[PC_vehid][acVelZ] &&
								floatabs(ACInfo[playerid][acPosX] - PC_pX) < PC_tmp / 2.0 &&
								floatabs(ACInfo[playerid][acPosY] - PC_pY) < PC_tmp / 2.0)
								{
									if(++ACInfo[playerid][acCheatCount][3] > (PC_IsABmx(PC_i) ? PC_MAX_FLYHACK_BIKE_WARNINGS : PC_MAX_FLYHACK_VEH_WARNINGS))
									{
										#undef PC_MAX_FLYHACK_BIKE_WARNINGS
										#if defined DEBUG
											printf("AC(debug): Vel z: %f, old vel z: %f, pos diff x, y, z: %f, %f, %f, veh: %d",
											PC_vZ, ACVehInfo[PC_vehid][acVelZ], ACInfo[playerid][acPosX] - PC_pX, ACInfo[playerid][acPosY] - PC_pY, PC_tmp, PC_vehid);
										#endif
										#if defined OnCheatDetected
											PC_KickWithCode(playerid, "", 0, 8, 1);
											if(ACInfo[playerid][acKicked] > 0) return 0;
											ACInfo[playerid][acCheatCount][3] = 0;
										#else
											return PC_KickWithCode(playerid, "", 0, 8, 1);
										#endif
									}
									#if defined OnCheatWarning
										else OnCheatWarning(playerid, "", 0, 8, 1, ACInfo[playerid][acCheatCount][3]);
									#endif
								}
								else ACInfo[playerid][acCheatCount][3] = 0;
							}
							ACVehInfo[PC_vehid][acSpeedDiff] = PC_spDiff;
						}
						ACVehInfo[PC_vehid][acPosX] = PC_pX;
						ACVehInfo[PC_vehid][acPosY] = PC_pY;
						ACVehInfo[PC_vehid][acPosZ] = PC_pZ;
						ACVehInfo[PC_vehid][acVelX] = PC_vX;
						ACVehInfo[PC_vehid][acVelY] = PC_vY;
						ACVehInfo[PC_vehid][acVelZ] = PC_vZ;
						ACVehInfo[PC_vehid][acPosDiff] = PC_dist;
						if(ACInfo[playerid][acSetVehHealth] == -1.0) ACVehInfo[PC_vehid][acHealth] = PC_vHealth;
						ACVehInfo[PC_vehid][acZAngle] = PC_zAngle;
					}
					ACInfo[playerid][acSeat] = PC_s;
				}
				else
				{
					GetPlayerVelocity(playerid, PC_vX, PC_vY, PC_vZ);
					PC_s = PC_GetSpeed(PC_vX, PC_vY, PC_vZ);
					if(ACInfo[playerid][acAnim] != (PC_sa = GetPlayerAnimationIndex(playerid)))
					{
						if(PC_sa == -1)
						{
							if(ACInfo[playerid][acACAllow][24])
							{
								#if defined OnCheatDetected
									PC_KickWithCode(playerid, "", 0, 24);
									if(ACInfo[playerid][acKicked] > 0) return 0;
								#else
									return PC_KickWithCode(playerid, "", 0, 24);
								#endif
							}
						}
						else if(ACInfo[playerid][acACAllow][30] && !PC_PedAnims)
						{
							PC_i = GetPlayerSkin(playerid);
							if(PC_sa == 1231 && PC_w != 46 && 1 <= PC_i <= 311 && PC_i != 74)
							{
								if(++ACInfo[playerid][acCheatCount][19] > PC_MAX_CJ_RUN_WARNINGS)
								{
									#undef PC_MAX_CJ_RUN_WARNINGS
									#if defined DEBUG
										printf("AC(debug): Skin: %d, old anim: %d, weaponid: %d",
										PC_i, ACInfo[playerid][acAnim], PC_w);
									#endif
									#if defined OnCheatDetected
										PC_KickWithCode(playerid, "", 0, 30);
										if(ACInfo[playerid][acKicked] > 0) return 0;
										ACInfo[playerid][acCheatCount][19] = 0;
									#else
										return PC_KickWithCode(playerid, "", 0, 30);
									#endif
								}
								#if defined OnCheatWarning
									else OnCheatWarning(playerid, "", 0, 30, 0, ACInfo[playerid][acCheatCount][19]);
								#endif
							}
							else ACInfo[playerid][acCheatCount][19] = 0;
						}
					}
					else if(ACInfo[playerid][acACAllow][7])
					{
						if(PC_sa == 157 || PC_sa == 159 || PC_sa == 161 || PC_sa == 1058)
						{
							if(++ACInfo[playerid][acCheatCount][15] > PC_MAX_FLYHACK_WARNINGS)
							{
								#if defined DEBUG
									printf("AC(debug): Anim: %d, old anim: %d, old veh: %d",
									PC_sa, ACInfo[playerid][acAnim], ACInfo[playerid][acVeh]);
								#endif
								#if defined OnCheatDetected
									PC_KickWithCode(playerid, "", 0, 7, 2);
									if(ACInfo[playerid][acKicked] > 0) return 0;
									ACInfo[playerid][acCheatCount][15] = 0;
								#else
									return PC_KickWithCode(playerid, "", 0, 7, 2);
								#endif
							}
							#if defined OnCheatWarning
								else OnCheatWarning(playerid, "", 0, 7, 2, ACInfo[playerid][acCheatCount][15]);
							#endif
						}
						else if(1538 <= PC_sa <= 1544 && PC_s > 36 && ACInfo[playerid][acSpeed] < PC_s)
						{
							if(++ACInfo[playerid][acCheatCount][15] > PC_MAX_FLYHACK_WARNINGS)
							{
								#if defined DEBUG
									printf("AC(debug): Speed: %d, old speed: %d, anim: %d",
									PC_s, ACInfo[playerid][acSpeed], PC_sa);
								#endif
								#if defined OnCheatDetected
									PC_KickWithCode(playerid, "", 0, 7, 3);
									if(ACInfo[playerid][acKicked] > 0) return 0;
									ACInfo[playerid][acCheatCount][15] = 0;
								#else
									return PC_KickWithCode(playerid, "", 0, 7, 3);
								#endif
							}
							#if defined OnCheatWarning
								else OnCheatWarning(playerid, "", 0, 7, 3, ACInfo[playerid][acCheatCount][15]);
							#endif
						}
						else
						{
							#if defined VectorSize
								PC_tmp = VectorSize(PC_vX, PC_vY, 0.0);
							#else
								PC_tmp = floatsqroot(floatpower(PC_vX, 2.0) + floatpower(PC_vY, 2.0));
							#endif
							if(958 <= PC_sa <= 979 && (PC_vZ > 0.1 || PC_tmp > 0.9))
							{
								if(++ACInfo[playerid][acCheatCount][15] > PC_MAX_FLYHACK_WARNINGS)
								{
									#undef PC_MAX_FLYHACK_WARNINGS
									#if defined DEBUG
										printf("AC(debug): Anim: %d, old anim: %d, weaponid: %d, spec act: %d, vel x, y: %f, vel z: %f",
										PC_sa, ACInfo[playerid][acAnim], PC_w, PC_specact, PC_tmp, PC_vZ);
									#endif
									#if defined OnCheatDetected
										PC_KickWithCode(playerid, "", 0, 7, 1);
										if(ACInfo[playerid][acKicked] > 0) return 0;
										ACInfo[playerid][acCheatCount][15] = 0;
									#else
										return PC_KickWithCode(playerid, "", 0, 7, 1);
									#endif
								}
								#if defined OnCheatWarning
									else OnCheatWarning(playerid, "", 0, 7, 1, ACInfo[playerid][acCheatCount][15]);
								#endif
							}
							else ACInfo[playerid][acCheatCount][15] = 0;
						}
					}
					if(ACInfo[playerid][acSet][4] != -1)
					{
						if(PC_specact == ACInfo[playerid][acSet][4]) ACInfo[playerid][acSet][4] = -1;
						else if(PC_gtc > ACInfo[playerid][acGtc][6] + PC_gpp)
						{
							if(ACInfo[playerid][acACAllow][52] && ACInfo[playerid][acNOPAllow][6] &&
							PC_specact != SPECIAL_ACTION_DUCK &&
							!(SPECIAL_ACTION_ENTER_VEHICLE <= PC_specact <= SPECIAL_ACTION_EXIT_VEHICLE))
							{
								if(++ACInfo[playerid][acNOPCount][6] > PC_MAX_NOP_WARNINGS)
								{
									#if defined DEBUG
										printf(DEBUG_CODE_5, playerid, "SetPlayerSpecialAction");
										printf("AC(debug): AC spec act: %d, spec act: %d", ACInfo[playerid][acSet][4], PC_specact);
									#endif
									#if defined OnCheatDetected
										PC_KickWithCode(playerid, "", 0, 52, 12);
										if(ACInfo[playerid][acKicked] > 0) return 0;
										ACInfo[playerid][acSet][4] = -1;
									#else
										return PC_KickWithCode(playerid, "", 0, 52, 12);
									#endif
								}
								#if defined OnNOPWarning
									else OnNOPWarning(playerid, 12, ACInfo[playerid][acNOPCount][6]);
								#endif
							}
							else if(++ACInfo[playerid][acNOPCount][6] > PC_MAX_NOP_WARNINGS) ACInfo[playerid][acSet][4] = -1;
							#undef PC_MAX_NOP_WARNINGS
						}
					}
					else if(PC_specact != ACInfo[playerid][acSpecAct])
					{
						if(PC_specact == ACInfo[playerid][acNextSpecAct]) ACInfo[playerid][acNextSpecAct] = -1;
						else if(ACInfo[playerid][acACAllow][18])
						{
							switch(PC_specact)
							{
								case SPECIAL_ACTION_NONE:
								{
									switch(ACInfo[playerid][acSpecAct])
									{
										case SPECIAL_ACTION_USECELLPHONE, SPECIAL_ACTION_CUFFED, 25:
										{
											#if defined OnCheatDetected
												PC_KickWithCode(playerid, "", 0, 18, 1);
												if(ACInfo[playerid][acKicked] > 0) return 0;
											#else
												return PC_KickWithCode(playerid, "", 0, 18, 1);
											#endif
										}
									}
								}
								case SPECIAL_ACTION_DUCK:
								{
									if(ACInfo[playerid][acSpecAct] > SPECIAL_ACTION_NONE &&
									!(SPECIAL_ACTION_DRINK_BEER <= ACInfo[playerid][acSpecAct] <= SPECIAL_ACTION_CUFFED))
									{
										#if defined DEBUG
											printf("AC(debug): AC spec act: %d, spec act: %d", ACInfo[playerid][acSpecAct], PC_specact);
										#endif
										#if defined OnCheatDetected
											PC_KickWithCode(playerid, "", 0, 18, 2);
											if(ACInfo[playerid][acKicked] > 0) return 0;
										#else
											return PC_KickWithCode(playerid, "", 0, 18, 2);
										#endif
									}
								}
								case SPECIAL_ACTION_USEJETPACK:
								{
									if((PC_tmp = GetPlayerDistanceFromPoint(playerid, ACInfo[playerid][acDropJpX], ACInfo[playerid][acDropJpY], ACInfo[playerid][acDropJpZ])) > 15.0)
									{
										#if defined DEBUG
											printf("AC(debug): AC spec act: %d, spec act: %d, dist: %f",
											ACInfo[playerid][acSpecAct], PC_specact, PC_tmp);
										#endif
										#if defined OnCheatDetected
											PC_KickWithCode(playerid, "", 0, 18, 3);
											if(ACInfo[playerid][acKicked] > 0) return 0;
										#else
											return PC_KickWithCode(playerid, "", 0, 18, 3);
										#endif
									}
									else ACInfo[playerid][acNextSpecAct] = ACInfo[playerid][acSpecAct];
									ACInfo[playerid][acDropJpX] =
									ACInfo[playerid][acDropJpY] =
									ACInfo[playerid][acDropJpZ] = 25000.0;
								}
								case SPECIAL_ACTION_ENTER_VEHICLE:
								{
									switch(ACInfo[playerid][acSpecAct])
									{
										case SPECIAL_ACTION_DANCE1, SPECIAL_ACTION_DANCE2, SPECIAL_ACTION_DANCE3, SPECIAL_ACTION_DANCE4, SPECIAL_ACTION_USECELLPHONE, 68:
										{
											#if defined OnCheatDetected
												PC_KickWithCode(playerid, "", 0, 18, 4);
												if(ACInfo[playerid][acKicked] > 0) return 0;
											#else
												return PC_KickWithCode(playerid, "", 0, 18, 4);
											#endif
										}
									}
								}
								default:
								{
									if(!((SPECIAL_ACTION_DRINK_BEER <= PC_specact <= SPECIAL_ACTION_CUFFED &&
									ACInfo[playerid][acSpecAct] == SPECIAL_ACTION_DUCK ||
									ACInfo[playerid][acSpecAct] == SPECIAL_ACTION_ENTER_VEHICLE) &&
									PC_specact == ACInfo[playerid][acLastSpecAct]) &&
									(ACInfo[playerid][acVeh] == 0 || PC_specact != SPECIAL_ACTION_EXIT_VEHICLE &&
									!(SPECIAL_ACTION_CUFFED <= PC_specact <= 25) && PC_specact != SPECIAL_ACTION_USECELLPHONE))
									{
										#if defined DEBUG
											printf("AC(debug): AC spec act: %d, spec act: %d, Last spec act: %d, old veh: %d",
											ACInfo[playerid][acSpecAct], PC_specact, ACInfo[playerid][acLastSpecAct], ACInfo[playerid][acVeh]);
										#endif
										#if defined OnCheatDetected
											PC_KickWithCode(playerid, "", 0, 18, 5);
											if(ACInfo[playerid][acKicked] > 0) return 0;
										#else
											return PC_KickWithCode(playerid, "", 0, 18, 5);
										#endif
									}
								}
							}
						}
						ACInfo[playerid][acLastSpecAct] = ACInfo[playerid][acSpecAct];
					}
					PC_a = GetPlayerSurfingVehicleID(playerid);
					if(!IsVehicleStreamedIn(PC_a, playerid) && GetPlayerSurfingObjectID(playerid) == INVALID_OBJECT_ID)
					{
						if(PC_dist > 0.7)
						{
							if(PC_dist >= 40.0 && PC_dist_set >= 40.0)
							{
								#if defined VectorSize
								if(ACInfo[playerid][acACAllow][2] && !ACInfo[playerid][acIntEnterExits] &&
								(ACInfo[playerid][acPosZ] > -95.0 || PC_pZ - ACInfo[playerid][acPosZ] < 40.0 ||
								VectorSize(PC_pX - ACInfo[playerid][acPosX], PC_pY - ACInfo[playerid][acPosY], 0.0) >= 180.0 ||
								++ACInfo[playerid][acCheatCount][21] > PC_MAX_TELEPORT_GLITCH_WARNINGS))
								#else
								if(ACInfo[playerid][acACAllow][2] && !ACInfo[playerid][acIntEnterExits] &&
								(ACInfo[playerid][acPosZ] > -95.0 || PC_pZ - ACInfo[playerid][acPosZ] < 40.0 ||
								floatsqroot(floatpower(PC_pX - ACInfo[playerid][acPosX], 2.0) + floatpower(PC_pY - ACInfo[playerid][acPosY], 2.0)) >= 180.0 ||
								++ACInfo[playerid][acCheatCount][21] > PC_MAX_TELEPORT_GLITCH_WARNINGS))
								#endif
								{
									#undef PC_MAX_TELEPORT_GLITCH_WARNINGS
									#if defined DEBUG
										printf("AC(debug): Dist: %f, dist set: %f, speed: %d, pos x, y, z: %f, %f, %f, old pos x, y, z: %f, %f, %f",
										PC_dist, PC_dist_set, PC_s, PC_pX, PC_pY, PC_pZ, ACInfo[playerid][acPosX], ACInfo[playerid][acPosY], ACInfo[playerid][acPosZ]);
									#endif
									#if defined OnCheatDetected
										PC_KickWithCode(playerid, "", 0, 2, 2);
										if(ACInfo[playerid][acKicked] > 0) return 0;
										ACInfo[playerid][acCheatCount][21] = 0;
									#else
										return PC_KickWithCode(playerid, "", 0, 2, 2);
									#endif
								}
								else
								{
									ACInfo[playerid][acLastPosX] = PC_pX;
									ACInfo[playerid][acLastPosY] = PC_pY;
								}
							}
							else if(PC_s <= PC_dist * (PC_dist < 1.0 ? 14.0 : 5.0) && PC_gtc > ACInfo[playerid][acGtc][11] + PC_gpp)
							{
								if(PC_s < 3 && (PC_dist >= 30.0 && PC_dist_set >= 30.0 ||
								PC_dist >= 20.0 && PC_dist_set >= 20.0 && PC_gtc < ACInfo[playerid][acUpdateTick] + 1500))
								{
									if(ACInfo[playerid][acACAllow][2])
									{
										#if defined DEBUG
											printf("AC(debug): Speed: %d, dist: %f, dist set: %f", PC_s, PC_dist, PC_dist_set);
										#endif
										#if defined OnCheatDetected
											PC_KickWithCode(playerid, "", 0, 2, 3);
											if(ACInfo[playerid][acKicked] > 0) return 0;
										#else
											return PC_KickWithCode(playerid, "", 0, 2, 3);
										#endif
									}
								}
								else if(ACInfo[playerid][acACAllow][0] && (PC_s || PC_dist >= 3.0))
								{
									if(++ACInfo[playerid][acCheatCount][1] > PC_MAX_AIR_WARNINGS)
									{
										#undef PC_MAX_AIR_WARNINGS
										#if defined DEBUG
											printf("AC(debug): Speed: %d, dist: %f", PC_s, PC_dist);
										#endif
										#if defined OnCheatDetected
											PC_KickWithCode(playerid, "", 0, 0);
											if(ACInfo[playerid][acKicked] > 0) return 0;
											ACInfo[playerid][acCheatCount][1] = 0;
										#else
											return PC_KickWithCode(playerid, "", 0, 0);
										#endif
									}
									#if defined OnCheatWarning
										else OnCheatWarning(playerid, "", 0, 0, 0, ACInfo[playerid][acCheatCount][1]);
									#endif
								}
							}
						}
						if(PC_gtc > ACInfo[playerid][acGtc][10] + PC_gpp)
						{
							if(ACInfo[playerid][acACAllow][9] && ACInfo[playerid][acSpeed] < PC_s)
							{
								if(PC_s > 530)
								{
									#if defined DEBUG
										printf("AC(debug): Speed: %d, old speed: %d", PC_s, ACInfo[playerid][acSpeed]);
									#endif
									#if defined OnCheatDetected
										PC_KickWithCode(playerid, "", 0, 9, 1);
										if(ACInfo[playerid][acKicked] > 0) return 0;
									#else
										return PC_KickWithCode(playerid, "", 0, 9, 1);
									#endif
								}
								else
								{
									PC_i = PC_GetSpeed(PC_vX, PC_vY);
									PC_tmp = PC_pZ - ACInfo[playerid][acPosZ];
									if((PC_s > 257 || PC_i > 180 || floatabs(PC_vZ) > 1.0 && floatabs(PC_tmp) < 2.0) &&
									ACInfo[playerid][acHealth] <= PC_health)
									{
										if(++ACInfo[playerid][acCheatCount][17] > PC_MAX_SPEEDHACK_WARNINGS)
										{
											#if defined DEBUG
												printf("AC(debug): Speed: %d, speed x, y: %d, vel z: %f, pos diff z: %f, old speed: %d",
												PC_s, PC_i, PC_vZ, PC_tmp, ACInfo[playerid][acSpeed]);
											#endif
											#if defined OnCheatDetected
												PC_KickWithCode(playerid, "", 0, 9, 2);
												if(ACInfo[playerid][acKicked] > 0) return 0;
												ACInfo[playerid][acCheatCount][17] = 0;
											#else
												return PC_KickWithCode(playerid, "", 0, 9, 2);
											#endif
										}
										#if defined OnCheatWarning
											else OnCheatWarning(playerid, "", 0, 9, 2, ACInfo[playerid][acCheatCount][17]);
										#endif
									}
									else ACInfo[playerid][acCheatCount][17] = 0;
								}
							}
							ACInfo[playerid][acSpeed] = PC_s;
						}
					}
					else if(PC_gtc > ACInfo[playerid][acGtc][10] + PC_gpp)
					{
						if(ACInfo[playerid][acACAllow][9] && PC_a != INVALID_VEHICLE_ID)
						{
							GetVehicleVelocity(PC_a, PC_vX, PC_vY, PC_vZ);
							new PC_vsp = PC_GetSpeed(PC_vX, PC_vY, PC_vZ);
							if(PC_s > PC_vsp + 180)
							{
								if(++ACInfo[playerid][acCheatCount][17] > PC_MAX_SPEEDHACK_WARNINGS)
								{
									#undef PC_MAX_SPEEDHACK_WARNINGS
									#if defined DEBUG
										printf("AC(debug): Speed: %d, old speed: %d, veh speed: %d",
										PC_s, ACInfo[playerid][acSpeed], PC_vsp);
									#endif
									#if defined OnCheatDetected
										PC_KickWithCode(playerid, "", 0, 9, 3);
										if(ACInfo[playerid][acKicked] > 0) return 0;
										ACInfo[playerid][acCheatCount][17] = 0;
									#else
										return PC_KickWithCode(playerid, "", 0, 9, 3);
									#endif
								}
								#if defined OnCheatWarning
									else OnCheatWarning(playerid, "", 0, 9, 3, ACInfo[playerid][acCheatCount][17]);
								#endif
							}
							else ACInfo[playerid][acCheatCount][17] = 0;
						}
						ACInfo[playerid][acSpeed] = PC_s;
					}
					ACInfo[playerid][acAnim] = PC_sa;
				}
				ACInfo[playerid][acSpecAct] = PC_specact;
				ACInfo[playerid][acHealth] = PC_health;
				ACInfo[playerid][acArmour] = PC_armour;
			}
			ACInfo[playerid][acVeh] = PC_vehid;
			if(PC_gtc > ACInfo[playerid][acGtc][7] + PC_gpp) ACInfo[playerid][acLastWeapon] = PC_w;
			ACInfo[playerid][acPosX] = PC_pX;
			ACInfo[playerid][acPosY] = PC_pY;
			ACInfo[playerid][acPosZ] = PC_pZ;
		}
	#if PC_USE_NPC
		}
	#endif
	PC_gpp = 1;
	ACInfo[playerid][acUpdateTick] = PC_gtc;
	#if defined PC_OnPlayerUpdate
		PC_gpp = PC_OnPlayerUpdate(playerid);
	#endif
	if(ACInfo[playerid][acACAllow][33] && PC_gpp) return ACInfo[playerid][acUnFrozen];
	return PC_gpp;
}

#if defined _ALS_OnPlayerUpdate
	#undef OnPlayerUpdate
#else
	#define _ALS_OnPlayerUpdate
#endif
#define OnPlayerUpdate PC_OnPlayerUpdate
#if defined PC_OnPlayerUpdate
	forward PC_OnPlayerUpdate(playerid);
#endif

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(!(0 <= playerid < MAX_PLAYERS) || ACInfo[playerid][acKicked] > 0) return 0;
	#if PC_USE_NPC
		if(!IsPlayerNPC(playerid))
		{
	#endif
		if((newkeys & KEY_SECONDARY_ATTACK) && ACInfo[playerid][acSpecAct] == SPECIAL_ACTION_USEJETPACK &&
		GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_USEJETPACK)
		{
			ACInfo[playerid][acDropJpX] = ACInfo[playerid][acPosX];
			ACInfo[playerid][acDropJpY] = ACInfo[playerid][acPosY];
			ACInfo[playerid][acDropJpZ] = ACInfo[playerid][acPosZ];
		}
		new PC_w = GetPlayerWeapon(playerid);
		if((newkeys & KEY_CROUCH) && (24 <= PC_w <= 25 || 33 <= PC_w <= 34)) ACInfo[playerid][acCheatCount][14] = 0;
	#if PC_USE_NPC
		}
	#endif
	#if defined PC_OnPlayerKeyStateChange
		return PC_OnPlayerKeyStateChange(playerid, newkeys, oldkeys);
	#else
		return 1;
	#endif
}

#if defined _ALS_OnPlayerKeyStateChange
	#undef OnPlayerKeyStateChange
#else
	#define _ALS_OnPlayerKeyStateChange
#endif
#define OnPlayerKeyStateChange PC_OnPlayerKeyStateChange
#if defined PC_OnPlayerKeyStateChange
	forward PC_OnPlayerKeyStateChange(playerid, newkeys, oldkeys);
#endif

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(ACInfo[playerid][acKicked] > 0) return 1;
	new PC_gtc = GetTickCount();
	if(ACInfo[playerid][acACAllow][49])
	{
		if(PC_gtc < ACInfo[playerid][acCall][2] + PC_Mtfc[2][0]) PC_FloodDetect(playerid, 2);
		else if(PC_gtc < ACInfo[playerid][acCall][27] + PC_Mtfc[27][0]) PC_FloodDetect(playerid, 27);
		else ACInfo[playerid][acFloodCount][2] = ACInfo[playerid][acFloodCount][27] = 0;
	}
	ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][2] = PC_gtc;
	#if defined PC_OnPlayerClickMap
		return PC_OnPlayerClickMap(playerid, fX, fY, fZ);
	#else
		return 0;
	#endif
}

#if defined _ALS_OnPlayerClickMap
	#undef OnPlayerClickMap
#else
	#define _ALS_OnPlayerClickMap
#endif
#define OnPlayerClickMap PC_OnPlayerClickMap
#if defined PC_OnPlayerClickMap
	forward PC_OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ);
#endif

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(ACInfo[playerid][acKicked] > 0) return 1;
	new PC_gtc = GetTickCount();
	if(ACInfo[playerid][acACAllow][49])
	{
		if(PC_gtc < ACInfo[playerid][acCall][3] + PC_Mtfc[3][0])
		{
			PC_FloodDetect(playerid, 3);
			return 1;
		}
		if(PC_gtc < ACInfo[playerid][acCall][27] + PC_Mtfc[27][0]) PC_FloodDetect(playerid, 27);
		else ACInfo[playerid][acFloodCount][3] = ACInfo[playerid][acFloodCount][27] = 0;
	}
	ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][3] = PC_gtc;
	#if defined PC_OnPlayerClickPlayer
		return PC_OnPlayerClickPlayer(playerid, clickedplayerid, source);
	#else
		return 0;
	#endif
}

#if defined _ALS_OnPlayerClickPlayer
	#undef OnPlayerClickPlayer
#else
	#define _ALS_OnPlayerClickPlayer
#endif
#define OnPlayerClickPlayer PC_OnPlayerClickPlayer
#if defined PC_OnPlayerClickPlayer
	forward PC_OnPlayerClickPlayer(playerid, clickedplayerid, source);
#endif

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if(ACInfo[playerid][acKicked] > 0) return 1;
	new PC_gtc = GetTickCount();
	if(ACInfo[playerid][acACAllow][49])
	{
		if(PC_gtc < ACInfo[playerid][acCall][4] + PC_Mtfc[4][0])
		{
			PC_FloodDetect(playerid, 4);
			return 1;
		}
		if(PC_gtc < ACInfo[playerid][acCall][27] + PC_Mtfc[27][0]) PC_FloodDetect(playerid, 27);
		else ACInfo[playerid][acFloodCount][4] = ACInfo[playerid][acFloodCount][27] = 0;
	}
	ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][4] = PC_gtc;
	#if defined PC_OnPlayerClickTextDraw
		return PC_OnPlayerClickTextDraw(playerid, clickedid);
	#else
		return 0;
	#endif
}

#if defined _ALS_OnPlayerClickTextDraw
	#undef OnPlayerClickTextDraw
#else
	#define _ALS_OnPlayerClickTextDraw
#endif
#define OnPlayerClickTextDraw PC_OnPlayerClickTextDraw
#if defined PC_OnPlayerClickTextDraw
	forward PC_OnPlayerClickTextDraw(playerid, Text:clickedid);
#endif

public OnPlayerCommandText(playerid, cmdtext[])
{
	if(ACInfo[playerid][acKicked] > 0) return 1;
	#if PC_USE_NPC
		if(!IsPlayerNPC(playerid))
		{
	#endif
		new PC_gtc = GetTickCount();
		if(ACInfo[playerid][acACAllow][49])
		{
			if(PC_gtc < ACInfo[playerid][acCall][5] + PC_Mtfc[5][0])
			{
				PC_FloodDetect(playerid, 5);
				return 1;
			}
			if(PC_gtc < ACInfo[playerid][acCall][27] + PC_Mtfc[27][0]) PC_FloodDetect(playerid, 27);
			else ACInfo[playerid][acFloodCount][5] = ACInfo[playerid][acFloodCount][27] = 0;
		}
		ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][5] = PC_gtc;
	#if PC_USE_NPC
		}
	#endif
	#if defined PC_OnPlayerCommandText
		return PC_OnPlayerCommandText(playerid, cmdtext);
	#else
		return 0;
	#endif
}

#if defined _ALS_OnPlayerCommandText
	#undef OnPlayerCommandText
#else
	#define _ALS_OnPlayerCommandText
#endif
#define OnPlayerCommandText PC_OnPlayerCommandText
#if defined PC_OnPlayerCommandText
	forward PC_OnPlayerCommandText(playerid, cmdtext[]);
#endif

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(!(0 <= playerid < MAX_PLAYERS) || ACInfo[playerid][acKicked] > 0) return 0;
	new PC_gtc = GetTickCount();
	if(ACInfo[playerid][acACAllow][49])
	{
		if(PC_gtc < ACInfo[playerid][acCall][6] + PC_Mtfc[6][0]) PC_FloodDetect(playerid, 6);
		if(PC_gtc < ACInfo[playerid][acCall][27] + PC_Mtfc[27][0]) PC_FloodDetect(playerid, 27);
		else ACInfo[playerid][acFloodCount][6] = ACInfo[playerid][acFloodCount][27] = 0;
	}
	ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][6] = PC_gtc;
	new PC_model = GetVehicleModel(vehicleid);
	if(ACInfo[playerid][acACAllow][44] && !IsVehicleStreamedIn(vehicleid, playerid) && !PC_IsATrainCarriage(PC_model))
	{
		#if defined DEBUG
			printf("AC(debug): Veh: %d, veh model: %d, ispassenger: %d", vehicleid, PC_model, ispassenger);
		#endif
		return PC_KickWithCode(playerid, "", 0, 44, 1);
	}
	#if defined SetVehicleFakePosForPlayer\
		&& defined SetVehicleFakeZAngleForPlayer
		if(ACInfo[playerid][acACAllow][5] && !PC_IsATrainPart(PC_model))
		{
			new Float:PC_dist = GetVehicleDistanceFromPoint(vehicleid, ACInfo[playerid][acPosX], ACInfo[playerid][acPosY], ACInfo[playerid][acPosZ]);
			if(PC_dist > 25.0 || PC_dist > 15.0 && PC_model != 577 && PC_model != 592)
			{
				#if defined DEBUG
					printf("AC(debug): Veh model: %d, dist: %f, ispassenger: %d, playerid: %d",
					PC_model, PC_dist, ispassenger, playerid);
				#endif
				#if defined OnCheatDetected
					PC_KickWithCode(playerid, "", 0, 5, 3);
					if(ACInfo[playerid][acKicked] > 0) return 0;
				#endif
				SetVehicleFakeZAngleForPlayer(playerid, vehicleid, ACVehInfo[vehicleid][acZAngle]);
				SetVehicleFakePosForPlayer(playerid, vehicleid, ACVehInfo[vehicleid][acPosX], ACVehInfo[vehicleid][acPosY], ACVehInfo[vehicleid][acPosZ]);
			}
		}
	#endif
	new PC_doors, PC_tmp;
	GetVehicleParamsEx(vehicleid, PC_tmp, PC_tmp, PC_tmp, PC_doors, PC_tmp, PC_tmp, PC_tmp);
	if(ispassenger || PC_doors != VEHICLE_PARAMS_ON)
	{
		if(PC_doors != VEHICLE_PARAMS_ON) ACInfo[playerid][acEnterSeat] = -1;
		else ACInfo[playerid][acEnterSeat] = ispassenger;
		if(ACInfo[playerid][acEnterVeh] != vehicleid)
		{
			ACInfo[playerid][acEnterVeh] = vehicleid;
			if(PC_model == 570 || PC_IsABoat(PC_model)) ACInfo[playerid][acEnterVehTick] = 0;
			else ACInfo[playerid][acEnterVehTick] = PC_gtc;
		}
	}
	else
	{
		ACInfo[playerid][acEnterSeat] = -1;
		ACInfo[playerid][acEnterVeh] = 0;
	}
	#if defined PC_OnPlayerEnterVehicle
		return PC_OnPlayerEnterVehicle(playerid, vehicleid, ispassenger);
	#else
		return 1;
	#endif
}

#if defined _ALS_OnPlayerEnterVehicle
	#undef OnPlayerEnterVehicle
#else
	#define _ALS_OnPlayerEnterVehicle
#endif
#define OnPlayerEnterVehicle PC_OnPlayerEnterVehicle
#if defined PC_OnPlayerEnterVehicle
	forward PC_OnPlayerEnterVehicle(playerid, vehicleid, ispassenger);
#endif

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(!(0 <= playerid < MAX_PLAYERS) || ACInfo[playerid][acKicked] > 0) return 0;
	new PC_gtc = GetTickCount();
	if(ACInfo[playerid][acACAllow][49])
	{
		if(PC_gtc < ACInfo[playerid][acCall][7] + PC_Mtfc[7][0]) PC_FloodDetect(playerid, 7);
		if(PC_gtc < ACInfo[playerid][acCall][27] + PC_Mtfc[27][0]) PC_FloodDetect(playerid, 27);
		else ACInfo[playerid][acFloodCount][7] = ACInfo[playerid][acFloodCount][27] = 0;
	}
	ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][7] = PC_gtc;
	if(ACInfo[playerid][acACAllow][44] && !IsVehicleStreamedIn(vehicleid, playerid))
	{
		#if defined DEBUG
			printf("AC(debug): Veh: %d, veh model: %d", vehicleid, GetVehicleModel(vehicleid));
		#endif
		return PC_KickWithCode(playerid, "", 0, 44, 5);
	}
	if(PC_IsAnAircraft(GetVehicleModel(ACInfo[playerid][acVeh]))) ACInfo[playerid][acParachute] = 1;
	else if(ACInfo[playerid][acParachute] != 2) ACInfo[playerid][acParachute] = 0;
	#if defined PC_OnPlayerExitVehicle
		return PC_OnPlayerExitVehicle(playerid, vehicleid);
	#else
		return 1;
	#endif
}

#if defined _ALS_OnPlayerExitVehicle
	#undef OnPlayerExitVehicle
#else
	#define _ALS_OnPlayerExitVehicle
#endif
#define OnPlayerExitVehicle PC_OnPlayerExitVehicle
#if defined PC_OnPlayerExitVehicle
	forward PC_OnPlayerExitVehicle(playerid, vehicleid);
#endif

#if defined OnPlayerPickUpDynamicPickup\
	&& defined Streamer_GetDistanceToItem\
	&& defined Streamer_GetIntData
	#if defined STREAMER_ENABLE_TAGS
		public OnPlayerPickUpDynamicPickup(playerid, STREAMER_TAG_PICKUP:pickupid)
	#else
		public OnPlayerPickUpDynamicPickup(playerid, pickupid)
	#endif
	{
		if(!(0 <= playerid < MAX_PLAYERS) || ACInfo[playerid][acKicked] > 0) return 0;
		new PC_i = GetTickCount();
		if(ACInfo[playerid][acACAllow][49])
		{
			if(PC_i < ACInfo[playerid][acCall][8] + PC_Mtfc[8][0]) PC_FloodDetect(playerid, 8);
			else if(PC_i < ACInfo[playerid][acCall][27] + PC_Mtfc[27][0]) PC_FloodDetect(playerid, 27);
			else ACInfo[playerid][acFloodCount][8] = ACInfo[playerid][acFloodCount][27] = 0;
		}
		if(ACInfo[playerid][acACAllow][6])
		{
			new Float:PC_x, Float:PC_y, Float:PC_z, Float:PC_dist, Float:PC_dist_set;
			GetPlayerPos(playerid, PC_x, PC_y, PC_z);
			Streamer_GetDistanceToItem(PC_x, PC_y, PC_z, STREAMER_TYPE_PICKUP, pickupid, PC_dist);
			Streamer_GetDistanceToItem(ACInfo[playerid][acSetPosX], ACInfo[playerid][acSetPosY], (ACInfo[playerid][acTpToZ] ? PC_z : ACInfo[playerid][acSetPosZ]), STREAMER_TYPE_PICKUP, pickupid, PC_dist_set);
			if(PC_dist > 15.0 && (ACInfo[playerid][acSet][8] == -1 || PC_dist_set > 15.0))
			{
				#if defined DEBUG
					printf("AC(debug): Pickupid: %d, dist: %f, dist set: %f, acSet[8]: %d, playerid: %d",
					_:pickupid, PC_dist, PC_dist_set, ACInfo[playerid][acSet][8], playerid);
				#endif
				#if defined OnCheatDetected
					PC_KickWithCode(playerid, "", 0, 6, 2);
				#endif
				return 0;
			}
		}
		ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][8] = PC_i;
		#if PC_USE_PICKUP_WEAPONS
			switch((PC_i = Streamer_GetIntData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_EXTRA_ID)))
			{
				case 1: ACInfo[playerid][acSpecAct] = SPECIAL_ACTION_USEJETPACK;
				case 2: ACInfo[playerid][acHealth] = 100;
				case 3: ACInfo[playerid][acArmour] = 100;
				default:
				{
					if(PC_i > 100)
					{
						PC_i -= 100;
						new PC_s = PC_wSlot[PC_i];
						if(ACInfo[playerid][acWeapon][PC_s] == PC_i ||
						3 <= PC_s <= 5 && ACInfo[playerid][acWeapon][PC_s] > 0) ACInfo[playerid][acAmmo][PC_s] += PC_pAmmo[PC_i];
					}
				}
			}
		#endif
		ACInfo[playerid][acLastPickup] = _:pickupid + MAX_PICKUPS;
		#if defined PC_OnPlayerPickUpDynamicPickup
			return PC_OnPlayerPickUpDynamicPickup(playerid, pickupid);
		#else
			return 1;
		#endif
	}

	#if defined _ALS_OnPlayerPickUpDynamicPicku\
		|| defined _ALS_OnPlayerPickUpDynPickup\
		|| defined _ALS_OnPlayerPickUpDynamicPick || defined _ALS_OnPlayerPickUpDynamicPUp
		#undef OnPlayerPickUpDynamicPickup
	#else
		#define _ALS_OnPlayerPickUpDynamicPicku
		#define _ALS_OnPlayerPickUpDynPickup
		#define _ALS_OnPlayerPickUpDynamicPick
		#define _ALS_OnPlayerPickUpDynamicPUp
	#endif
	#define OnPlayerPickUpDynamicPickup PC_OnPlayerPickUpDynamicPickup
	#if defined PC_OnPlayerPickUpDynamicPickup
		#if defined STREAMER_ENABLE_TAGS
			forward PC_OnPlayerPickUpDynamicPickup(playerid, STREAMER_TAG_PICKUP:pickupid);
		#else
			forward PC_OnPlayerPickUpDynamicPickup(playerid, pickupid);
		#endif
	#endif
#endif

public OnPlayerPickUpPickup(playerid, pickupid)
{
	if(!(0 <= playerid < MAX_PLAYERS) || ACInfo[playerid][acKicked] > 0 || !(0 <= pickupid < MAX_PICKUPS)) return 0;
	#if defined Streamer_GetItemStreamerID\
		&& defined IsValidDynamicPickup
		#if defined STREAMER_ENABLE_TAGS
			new STREAMER_TAG_PICKUP:streamerid = STREAMER_TAG_PICKUP:Streamer_GetItemStreamerID(playerid, STREAMER_TYPE_PICKUP, pickupid);
		#else
			new streamerid = Streamer_GetItemStreamerID(playerid, STREAMER_TYPE_PICKUP, pickupid);
		#endif
		if(!IsValidDynamicPickup(streamerid))
		{
	#endif
		new PC_i = GetTickCount();
		if(ACInfo[playerid][acACAllow][49])
		{
			if(PC_i < ACInfo[playerid][acCall][8] + PC_Mtfc[8][0]) PC_FloodDetect(playerid, 8);
			else if(PC_i < ACInfo[playerid][acCall][27] + PC_Mtfc[27][0]) PC_FloodDetect(playerid, 27);
			else ACInfo[playerid][acFloodCount][8] = ACInfo[playerid][acFloodCount][27] = 0;
		}
		if(ACInfo[playerid][acACAllow][6])
		{
			#if defined VectorSize
				new Float:PC_dist = GetPlayerDistanceFromPoint(playerid, ACPickInfo[pickupid][acPosX], ACPickInfo[pickupid][acPosY], ACPickInfo[pickupid][acPosZ]),
				Float:PC_dist_set = VectorSize(ACInfo[playerid][acSetPosX] - ACPickInfo[pickupid][acPosX], ACInfo[playerid][acSetPosY] - ACPickInfo[pickupid][acPosY], (ACInfo[playerid][acTpToZ] ? ACPickInfo[pickupid][acPosZ] : ACInfo[playerid][acSetPosZ]) - ACPickInfo[pickupid][acPosZ]);
			#else
				new Float:PC_dist = GetPlayerDistanceFromPoint(playerid, ACPickInfo[pickupid][acPosX], ACPickInfo[pickupid][acPosY], ACPickInfo[pickupid][acPosZ]),
				Float:PC_dist_set = floatsqroot(floatpower(ACInfo[playerid][acSetPosX] - ACPickInfo[pickupid][acPosX], 2.0) + floatpower(ACInfo[playerid][acSetPosY] - ACPickInfo[pickupid][acPosY], 2.0) + floatpower((ACInfo[playerid][acTpToZ] ? ACPickInfo[pickupid][acPosZ] : ACInfo[playerid][acSetPosZ]) - ACPickInfo[pickupid][acPosZ], 2.0));
			#endif
			if(PC_dist > 15.0 && (ACInfo[playerid][acSet][8] == -1 || PC_dist_set > 15.0))
			{
				#if defined DEBUG
					printf("AC(debug): Pickupid: %d, dist: %f, dist set: %f, acSet[8]: %d, playerid: %d",
					pickupid, PC_dist, PC_dist_set, ACInfo[playerid][acSet][8], playerid);
				#endif
				#if defined OnCheatDetected
					PC_KickWithCode(playerid, "", 0, 6, 1);
				#endif
				return 0;
			}
		}
		ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][8] = PC_i;
		#if PC_USE_PICKUP_WEAPONS
			switch(ACPickInfo[pickupid][acType])
			{
				case 1: ACInfo[playerid][acSpecAct] = SPECIAL_ACTION_USEJETPACK;
				case 2: ACInfo[playerid][acHealth] = 100;
				case 3: ACInfo[playerid][acArmour] = 100;
				case 4:
				{
					PC_i = ACPickInfo[pickupid][acWeapon];
					new PC_s = PC_wSlot[PC_i];
					if(ACInfo[playerid][acWeapon][PC_s] == PC_i ||
					3 <= PC_s <= 5 && ACInfo[playerid][acWeapon][PC_s] > 0) ACInfo[playerid][acAmmo][PC_s] += PC_pAmmo[PC_i];
				}
			}
		#endif
		ACInfo[playerid][acLastPickup] = pickupid;
	#if defined Streamer_GetItemStreamerID\
		&& defined IsValidDynamicPickup
		}
	#endif
	#if defined PC_OnPlayerPickUpPickup
		return PC_OnPlayerPickUpPickup(playerid, pickupid);
	#else
		return 1;
	#endif
}

#if defined _ALS_OnPlayerPickUpPickup
	#undef OnPlayerPickUpPickup
#else
	#define _ALS_OnPlayerPickUpPickup
#endif
#define OnPlayerPickUpPickup PC_OnPlayerPickUpPickup
#if defined PC_OnPlayerPickUpPickup
	forward PC_OnPlayerPickUpPickup(playerid, pickupid);
#endif

public OnPlayerRequestClass(playerid, classid)
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	new PC_i;
	#if !defined OnPlayerDamage
		PC_i = GetPlayerState(playerid);
		if(PLAYER_STATE_ONFOOT <= PC_i < PLAYER_STATE_WASTED || PC_i == PLAYER_STATE_SPAWNED) return 0;
	#endif
	#if PC_USE_NPC
		if(!IsPlayerNPC(playerid))
		{
	#endif
		PC_i = GetTickCount();
		if(ACInfo[playerid][acACAllow][49])
		{
			if(PC_i < ACInfo[playerid][acCall][9] + PC_Mtfc[9][0]) PC_FloodDetect(playerid, 9);
			else if(PC_i < ACInfo[playerid][acCall][27] + PC_Mtfc[27][0]) PC_FloodDetect(playerid, 27);
			else ACInfo[playerid][acFloodCount][9] = ACInfo[playerid][acFloodCount][27] = 0;
		}
		ACInfo[playerid][acSpawned] = false;
		ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][9] = PC_i;
		ACInfo[playerid][acSpawnPosX] = PC_ClassPos[classid][0];
		ACInfo[playerid][acSpawnPosY] = PC_ClassPos[classid][1];
		ACInfo[playerid][acSpawnPosZ] = PC_ClassPos[classid][2];
		ACInfo[playerid][acSpawnWeapon1] = PC_ClassWeapon[classid][0];
		ACInfo[playerid][acSpawnAmmo1] = PC_ClassAmmo[classid][0];
		ACInfo[playerid][acSpawnWeapon2] = PC_ClassWeapon[classid][1];
		ACInfo[playerid][acSpawnAmmo2] = PC_ClassAmmo[classid][1];
		ACInfo[playerid][acSpawnWeapon3] = PC_ClassWeapon[classid][2];
		ACInfo[playerid][acSpawnAmmo3] = PC_ClassAmmo[classid][2];
	#if PC_USE_NPC
		}
	#endif
	#if defined PC_OnPlayerRequestClass
		return PC_OnPlayerRequestClass(playerid, classid);
	#else
		return 1;
	#endif
}

#if defined _ALS_OnPlayerRequestClass
	#undef OnPlayerRequestClass
#else
	#define _ALS_OnPlayerRequestClass
#endif
#define OnPlayerRequestClass PC_OnPlayerRequestClass
#if defined PC_OnPlayerRequestClass
	forward PC_OnPlayerRequestClass(playerid, classid);
#endif

public OnPlayerSelectedMenuRow(playerid, row)
{
	if(!(0 <= playerid < MAX_PLAYERS) || ACInfo[playerid][acKicked] > 0) return 0;
	new PC_gtc = GetTickCount();
	if(ACInfo[playerid][acACAllow][49])
	{
		if(PC_gtc < ACInfo[playerid][acCall][10] + PC_Mtfc[10][0]) PC_FloodDetect(playerid, 10);
		else if(PC_gtc < ACInfo[playerid][acCall][27] + PC_Mtfc[27][0]) PC_FloodDetect(playerid, 27);
		else ACInfo[playerid][acFloodCount][10] = ACInfo[playerid][acFloodCount][27] = 0;
	}
	ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][10] = PC_gtc;
	#if defined PC_OnPlayerSelectedMenuRow
		return PC_OnPlayerSelectedMenuRow(playerid, row);
	#else
		return 1;
	#endif
}

#if defined _ALS_OnPlayerSelectedMenuRow
	#undef OnPlayerSelectedMenuRow
#else
	#define _ALS_OnPlayerSelectedMenuRow
#endif
#define OnPlayerSelectedMenuRow PC_OnPlayerSelectedMenuRow
#if defined PC_OnPlayerSelectedMenuRow
	forward PC_OnPlayerSelectedMenuRow(playerid, row);
#endif

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	#if PC_USE_NPC
		if(!IsPlayerNPC(playerid))
		{
	#endif
		new PC_i = GetTickCount(), PC_s = GetPlayerPing(playerid);
		if(ACInfo[playerid][acACAllow][49])
		{
			if(PC_i < ACInfo[playerid][acCall][11] + PC_Mtfc[11][0])
			{
				if(newstate != PLAYER_STATE_ONFOOT || oldstate != PLAYER_STATE_SPAWNED)
				{
					new PC_model;
					if(oldstate == PLAYER_STATE_DRIVER) PC_model = GetVehicleModel(ACInfo[playerid][acVeh]);
					else if(newstate == PLAYER_STATE_DRIVER) PC_model = GetVehicleModel(GetPlayerVehicleID(playerid));
					if(!PC_IsABoat(PC_model)) PC_FloodDetect(playerid, 11);
				}
			}
			else if(PC_i < ACInfo[playerid][acCall][27] + PC_Mtfc[27][0]) PC_FloodDetect(playerid, 27);
			else ACInfo[playerid][acFloodCount][11] = ACInfo[playerid][acFloodCount][27] = 0;
		}
		ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][11] = PC_i;
		switch(oldstate)
		{
			case PLAYER_STATE_NONE, PLAYER_STATE_WASTED:
			{
				if(ACInfo[playerid][acACAllow][48] && !(PLAYER_STATE_SPAWNED <= newstate <= PLAYER_STATE_SPECTATING))
				{
					#if defined DEBUG
						printf("AC(debug): Newstate: %d, oldstate: %d", newstate, oldstate);
					#endif
					PC_KickWithCode(playerid, "", 0, 48, 2);
				}
			}
			case PLAYER_STATE_DRIVER:
			{
				new PC_t;
				if(ACVehInfo[ACInfo[playerid][acVeh]][acDriver] == playerid) ACVehInfo[ACInfo[playerid][acVeh]][acDriver] = INVALID_PLAYER_ID;
				GetPlayerWeaponData(playerid, 4, PC_t, PC_t);
				if(PC_t < ACInfo[playerid][acAmmo][4] && !(PC_t < 0 <= ACInfo[playerid][acAmmo][4])) ACInfo[playerid][acAmmo][4] = PC_t;
				PC_t = GetVehicleModel(ACInfo[playerid][acVeh]);
				if(1 <= ACInfo[playerid][acHealth] < 5 && PC_IsABike(PC_t)) ACInfo[playerid][acHealth] = 5;
				new Float:PC_x, Float:PC_y, Float:PC_z;
				GetPlayerPos(playerid, PC_x, PC_y, PC_z);
				#if defined VectorSize
				if(ACInfo[playerid][acACAllow][2] &&
				newstate == PLAYER_STATE_ONFOOT && PC_i > ACInfo[playerid][acGtc][11] + PC_s &&
				(ACInfo[playerid][acPosZ] > -95.0 || PC_z - ACInfo[playerid][acPosZ] < 40.0 ||
				VectorSize(PC_x - ACInfo[playerid][acPosX], PC_y - ACInfo[playerid][acPosY], 0.0) >= 180.0))
				#else
				if(ACInfo[playerid][acACAllow][2] &&
				newstate == PLAYER_STATE_ONFOOT && PC_i > ACInfo[playerid][acGtc][11] + PC_s &&
				(ACInfo[playerid][acPosZ] > -95.0 || PC_z - ACInfo[playerid][acPosZ] < 40.0 ||
				floatsqroot(floatpower(PC_x - ACInfo[playerid][acPosX], 2.0) + floatpower(PC_y - ACInfo[playerid][acPosY], 2.0)) >= 180.0))
				#endif
				{
					if(!PC_IsAnAircraft(PC_t)) PC_z = ACInfo[playerid][acPosZ];
					if((PC_x = GetPlayerDistanceFromPoint(playerid, ACInfo[playerid][acPosX], ACInfo[playerid][acPosY], PC_z)) >= 50.0)
					{
						#if defined DEBUG
							printf("AC(debug): Veh model: %d, dist: %f", PC_t, PC_x);
						#endif
						PC_KickWithCode(playerid, "", 0, 2, 4);
					}
				}
				GetPlayerVelocity(playerid, PC_x, PC_y, PC_z);
				ACInfo[playerid][acSpeed] = PC_GetSpeed(PC_x, PC_y, PC_z);
				if(ACInfo[playerid][acSet][8] == 3) ACInfo[playerid][acSet][8] = -1;
				ACInfo[playerid][acGtc][18] = ACInfo[playerid][acGtc][10] = PC_i + 1650;
			}
			case PLAYER_STATE_PASSENGER:
			{
				new Float:PC_x, Float:PC_y, Float:PC_z;
				GetPlayerPos(playerid, PC_x, PC_y, PC_z);
				#if defined VectorSize
				if(ACInfo[playerid][acACAllow][2] &&
				newstate == PLAYER_STATE_ONFOOT && PC_i > ACInfo[playerid][acGtc][11] + PC_s &&
				(ACInfo[playerid][acPosZ] > -95.0 || PC_z - ACInfo[playerid][acPosZ] < 40.0 ||
				VectorSize(PC_x - ACInfo[playerid][acPosX], PC_y - ACInfo[playerid][acPosY], 0.0) >= 180.0))
				#else
				if(ACInfo[playerid][acACAllow][2] &&
				newstate == PLAYER_STATE_ONFOOT && PC_i > ACInfo[playerid][acGtc][11] + PC_s &&
				(ACInfo[playerid][acPosZ] > -95.0 || PC_z - ACInfo[playerid][acPosZ] < 40.0 ||
				floatsqroot(floatpower(PC_x - ACInfo[playerid][acPosX], 2.0) + floatpower(PC_y - ACInfo[playerid][acPosY], 2.0)) >= 180.0))
				#endif
				{
					new PC_model = GetVehicleModel(ACInfo[playerid][acVeh]);
					PC_s = ACVehInfo[ACInfo[playerid][acVeh]][acDriver];
					PC_x = GetPlayerDistanceFromPoint(playerid, ACInfo[playerid][acPosX], ACInfo[playerid][acPosY], ACInfo[playerid][acPosZ]);
					if(PC_x >= 180.0 || PC_x >= 50.0 && (PC_s == INVALID_PLAYER_ID || PC_i < ACInfo[PC_s][acUpdateTick] + 2000) && !PC_IsATrainPart(PC_model))
					{
						#if defined DEBUG
							if(PC_s == INVALID_PLAYER_ID) printf("AC(debug): Veh model: %d, dist: %f", PC_model, PC_x);
							else printf("AC(debug): Veh model: %d, driver AFK time: %d, dist: %f", PC_model, PC_i - ACInfo[PC_s][acUpdateTick], PC_x);
						#endif
						PC_KickWithCode(playerid, "", 0, 2, 5);
					}
				}
				GetPlayerVelocity(playerid, PC_x, PC_y, PC_z);
				ACInfo[playerid][acSpeed] = PC_GetSpeed(PC_x, PC_y, PC_z);
				ACInfo[playerid][acGtc][18] = ACInfo[playerid][acGtc][10] = PC_i + 1650;
			}
		}
		switch(newstate)
		{
			case PLAYER_STATE_ONFOOT:
			{
				ACInfo[playerid][acSet][11] = -1;
				if(PLAYER_STATE_DRIVER <= oldstate <= PLAYER_STATE_PASSENGER)
				{
					GetPlayerPos(playerid, ACInfo[playerid][acPosX], ACInfo[playerid][acPosY], ACInfo[playerid][acPosZ]);
					ACInfo[playerid][acLastPosX] = ACInfo[playerid][acPosX];
					ACInfo[playerid][acLastPosY] = ACInfo[playerid][acPosY];
				}
			}
			case PLAYER_STATE_DRIVER, PLAYER_STATE_PASSENGER:
			{
				ACInfo[playerid][acSet][11] = -1;
				ACInfo[playerid][acCheatCount][3] = ACInfo[playerid][acCheatCount][4] = 0;
				new PC_vehid = GetPlayerVehicleID(playerid), PC_seat = GetPlayerVehicleSeat(playerid);
				PC_s = GetVehicleModel(PC_vehid);
				if(PC_s < 400)
				{
					if(ACInfo[playerid][acACAllow][44])
					{
						#if defined DEBUG
							printf("AC(debug): Veh model: %d, seatid: %d", PC_s, PC_seat);
						#endif
						PC_KickWithCode(playerid, "", 0, 44, 2);
					}
				}
				else if(ACInfo[playerid][acSet][9] == -1)
				{
					if(ACInfo[playerid][acACAllow][44])
					{
						new PC_maxseats = PC_GetMaxPassengers(PC_s);
						if(newstate == PLAYER_STATE_DRIVER)
						{
							if(PC_seat != 0 || PC_maxseats == 15)
							{
								#if defined DEBUG
									printf("AC(debug): Veh model: %d, seatid: %d", PC_s, PC_seat);
								#endif
								PC_KickWithCode(playerid, "", 0, 44, 3);
							}
						}
						else if(PC_seat < 1 || PC_maxseats == 15 || PC_seat > PC_maxseats && !PC_IsABus(PC_s) && PC_s != 570)
						{
							#if defined DEBUG
								printf("AC(debug): Veh model: %d, max seats: %d, seatid: %d", PC_s, PC_maxseats, PC_seat);
							#endif
							PC_KickWithCode(playerid, "", 0, 44, 4);
						}
					}
					if(ACInfo[playerid][acACAllow][4])
					{
						if(ACInfo[playerid][acEnterVeh] != PC_vehid ||
						ACInfo[playerid][acEnterSeat] != -1 && ACInfo[playerid][acEnterSeat] != _:!!PC_seat ||
						PC_i < ACInfo[playerid][acEnterVehTick] + 300)
						{
							#if defined DEBUG
								printf("AC(debug): Entered veh: %d, veh: %d, entered seat: %d, seat: %d, veh model: %d, enter time: %d",
								ACInfo[playerid][acEnterVeh], PC_vehid, ACInfo[playerid][acEnterSeat], PC_seat, PC_s, PC_i - ACInfo[playerid][acEnterVehTick]);
							#endif
							PC_KickWithCode(playerid, "", 0, 4, 1);
						}
						else
						{
							new Float:PC_dist = GetPlayerDistanceFromPoint(playerid, ACInfo[playerid][acPosX], ACInfo[playerid][acPosY], ACInfo[playerid][acPosZ]);
							if(newstate == PLAYER_STATE_DRIVER)
							{
								if(PC_dist > 25.0 || PC_dist > 15.0 && PC_s != 577 && PC_s != 592)
								{
									#if defined DEBUG
										printf("AC(debug): Veh model: %d, dist: %f", PC_s, PC_dist);
									#endif
									PC_KickWithCode(playerid, "", 0, 4, 3);
								}
							}
							else if(PC_dist > 80.0 || PC_dist > 30.0 && PC_i >= ACInfo[playerid][acUpdateTick] + 1500)
							{
								#if defined DEBUG
									printf("AC(debug): Veh model: %d, AFK time: %d, dist: %f", PC_s, PC_i - ACInfo[playerid][acUpdateTick], PC_dist);
								#endif
								PC_KickWithCode(playerid, "", 0, 4, 4);
							}
							#if defined SetVehicleFakePosForPlayer\
								&& defined SetVehicleFakeZAngleForPlayer
								if(ACInfo[playerid][acKicked] < 1 && !PC_IsATrainPart(PC_s))
								{
									PC_dist = GetPlayerDistanceFromPoint(playerid, ACVehInfo[PC_vehid][acPosX], ACVehInfo[PC_vehid][acPosY], ACVehInfo[PC_vehid][acPosZ]);
									if(newstate == PLAYER_STATE_DRIVER)
									{
										if(PC_dist > 25.0 || PC_dist > 15.0 && PC_s != 577 && PC_s != 592)
										{
											#if defined DEBUG
												printf("AC(debug): Veh model: %d, dist: %f", PC_s, PC_dist);
											#endif
											PC_KickWithCode(playerid, "", 0, 4, 5);
										}
									}
									else if(PC_dist > 80.0 || PC_dist > 30.0 && PC_i >= ACInfo[playerid][acUpdateTick] + 1500)
									{
										#if defined DEBUG
											printf("AC(debug): Veh model: %d, AFK time: %d, dist: %f", PC_s, PC_i - ACInfo[playerid][acUpdateTick], PC_dist);
										#endif
										PC_KickWithCode(playerid, "", 0, 4, 6);
									}
								}
							#endif
						}
					}
					if(newstate == PLAYER_STATE_DRIVER && ACInfo[playerid][acKicked] < 1)
					{
						ACVehInfo[PC_vehid][acDriver] = playerid;
						GetPlayerPos(playerid, ACInfo[playerid][acPosX], ACInfo[playerid][acPosY], ACInfo[playerid][acPosZ]);
						ACInfo[playerid][acLastPosX] = ACInfo[playerid][acPosX];
						ACInfo[playerid][acLastPosY] = ACInfo[playerid][acPosY];
						ACInfo[playerid][acSetVehHealth] = -1.0;
						ACInfo[playerid][acCheatCount][11] = 0;
						ACInfo[playerid][acVehDmgRes] = false;
					}
					ACInfo[playerid][acEnterSeat] = -1;
					ACInfo[playerid][acEnterVeh] = 0;
				}
			}
			case PLAYER_STATE_SPAWNED:
			{
				ACInfo[playerid][acPosX] = ACInfo[playerid][acSpawnPosX];
				ACInfo[playerid][acPosY] = ACInfo[playerid][acSpawnPosY];
				ACInfo[playerid][acPosZ] = ACInfo[playerid][acSpawnPosZ];
				ACInfo[playerid][acLastPosX] = ACInfo[playerid][acPosX];
				ACInfo[playerid][acLastPosY] = ACInfo[playerid][acPosY];
			}
			case PLAYER_STATE_SPECTATING:
			{
				if(ACInfo[playerid][acACAllow][21] && !ACInfo[playerid][acSpec] &&
				ACInfo[playerid][acSet][6] == -1) PC_KickWithCode(playerid, "", 0, 21);
				if(ACInfo[playerid][acKicked] < 1)
				{
					ACInfo[playerid][acHealth] = 100;
					ACInfo[playerid][acSet][6] = -1;
					ACInfo[playerid][acSpec] = true;
				}
			}
		}
	#if PC_USE_NPC
		}
	#endif
	#if defined PC_OnPlayerStateChange
		return PC_OnPlayerStateChange(playerid, newstate, oldstate);
	#else
		return 1;
	#endif
}

#if defined _ALS_OnPlayerStateChange
	#undef OnPlayerStateChange
#else
	#define _ALS_OnPlayerStateChange
#endif
#define OnPlayerStateChange PC_OnPlayerStateChange
#if defined PC_OnPlayerStateChange
	forward PC_OnPlayerStateChange(playerid, newstate, oldstate);
#endif

#if defined OnPlayerWeaponShot
	public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
	{
		if(ACInfo[playerid][acKicked] > 0 || ACInfo[playerid][acDead]) return 0;
		if(ACInfo[playerid][acACAllow][22] && !PC_LagCompMode)
		{
			#if defined OnCheatDetected
				PC_KickWithCode(playerid, "", 0, 22);
			#endif
			return 0;
		}
		if(ACInfo[playerid][acACAllow][47] &&
		(!(BULLET_HIT_TYPE_NONE <= hittype <= BULLET_HIT_TYPE_PLAYER_OBJECT) ||
		hittype == BULLET_HIT_TYPE_PLAYER && !(0 <= hitid < MAX_PLAYERS) ||
		hittype == BULLET_HIT_TYPE_VEHICLE && !(1 <= hitid < MAX_VEHICLES) ||
		hittype == BULLET_HIT_TYPE_OBJECT && !(1 <= hitid < MAX_OBJECTS) ||
		hittype == BULLET_HIT_TYPE_PLAYER_OBJECT && !(1 <= hitid < MAX_OBJECTS) ||
		!PC_IsBulletWeapon(weaponid)))
		{
			#if defined DEBUG
				printf("AC(debug): Hittype: %d, hitid: %d, weaponid: %d", hittype, hitid, weaponid);
			#endif
			return PC_KickWithCode(playerid, "", 0, 47, 1);
		}
		new Float:PC_oX, Float:PC_oY, Float:PC_oZ, Float:PC_hX, Float:PC_hY, Float:PC_hZ;
		GetPlayerLastShotVectors(playerid, PC_oX, PC_oY, PC_oZ, PC_hX, PC_hY, PC_hZ);
		if(ACInfo[playerid][acACAllow][34])
		{
			new Float:PC_dist = GetPlayerDistanceFromPoint(playerid, PC_oX, PC_oY, PC_oZ);
			if(PC_dist > 50.0 || PC_dist > 15.0 && !IsPlayerInAnyVehicle(playerid) &&
			!IsVehicleStreamedIn(GetPlayerSurfingVehicleID(playerid), playerid) &&
			GetPlayerSurfingObjectID(playerid) == INVALID_OBJECT_ID)
			{
				if(++ACInfo[playerid][acCheatCount][5] > PC_MAX_AFK_GHOST_WARNINGS)
				{
					#undef PC_MAX_AFK_GHOST_WARNINGS
					#if defined DEBUG
						printf("AC(debug): Origin dist: %f", PC_dist);
					#endif
					#if defined OnCheatDetected
						PC_KickWithCode(playerid, "", 0, 34);
						if(ACInfo[playerid][acKicked] > 0) return 0;
						ACInfo[playerid][acCheatCount][5] = 0;
					#else
						return PC_KickWithCode(playerid, "", 0, 34);
					#endif
				}
				#if defined OnCheatWarning
					else OnCheatWarning(playerid, "", 0, 34, 0, ACInfo[playerid][acCheatCount][5]);
				#endif
			}
			else ACInfo[playerid][acCheatCount][5] = 0;
		}
		new PC_gtc = GetTickCount(), PC_gpp = GetPlayerPing(playerid);
		if(ACInfo[playerid][acACAllow][29])
		{
			if(hittype > BULLET_HIT_TYPE_NONE)
			{
				new Float:PC_pX, Float:PC_pY, Float:PC_pZ;
				GetPlayerPos(playerid, PC_pX, PC_pY, PC_pZ);
				if(fX == 0.0 && fY == 0.0 && fZ == 0.0 || PC_oX == PC_hX && PC_oY == PC_hY ||
				PC_oX == PC_pX || PC_oY == PC_pY || floatabs(PC_oZ - PC_pZ) < 0.01)
				{
					if(++ACInfo[playerid][acCheatCount][13] > PC_MAX_SILENT_AIM_WARNINGS)
					{
						#undef PC_MAX_SILENT_AIM_WARNINGS
						#if defined DEBUG
							printf("AC(debug): Hittype: %d, weaponid: %d, pZ: %f, oZ: %f, fX, fY, fZ: %f, %f, %f",
							hittype, weaponid, PC_pZ, PC_oZ, fX, fY, fZ);
						#endif
						#if defined OnCheatDetected
							PC_KickWithCode(playerid, "", 0, 29, 1);
							if(ACInfo[playerid][acKicked] > 0) return 0;
							ACInfo[playerid][acCheatCount][13] = 0;
						#else
							return PC_KickWithCode(playerid, "", 0, 29, 1);
						#endif
					}
					#if defined OnCheatWarning
						else OnCheatWarning(playerid, "", 0, 29, 1, ACInfo[playerid][acCheatCount][13]);
					#endif
				}
				else
				{
					if(hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID &&
					!ACInfo[hitid][acDead] && PC_gtc > ACInfo[hitid][acSetPosTick] + PC_gpp &&
					PC_gtc < ACInfo[hitid][acUpdateTick] + 1500)
					{
						new Float:PC_dist = GetPlayerDistanceFromPoint(hitid, PC_hX, PC_hY, PC_hZ);
						if(PC_dist > 50.0 || PC_dist > 20.0 && !IsPlayerInAnyVehicle(hitid) &&
						!IsVehicleStreamedIn(GetPlayerSurfingVehicleID(hitid), hitid) &&
						GetPlayerSurfingObjectID(hitid) == INVALID_OBJECT_ID)
						{
							if(++ACInfo[playerid][acCheatCount][6] > PC_MAX_PRO_AIM_WARNINGS)
							{
								#undef PC_MAX_PRO_AIM_WARNINGS
								#if defined DEBUG
									printf("AC(debug): Hit dist: %f", PC_dist);
								#endif
								#if defined OnCheatDetected
									PC_KickWithCode(playerid, "", 0, 29, 2);
									if(ACInfo[playerid][acKicked] > 0) return 0;
									ACInfo[playerid][acCheatCount][6] = 0;
								#else
									return PC_KickWithCode(playerid, "", 0, 29, 2);
								#endif
							}
							#if defined OnCheatWarning
								else OnCheatWarning(playerid, "", 0, 29, 2, ACInfo[playerid][acCheatCount][6]);
							#endif
						}
						else ACInfo[playerid][acCheatCount][6] = 0;
					}
					ACInfo[playerid][acCheatCount][13] = 0;
				}
			}
			else ACInfo[playerid][acCheatCount][13] = 0;
		}
		new PC_i, PC_t, bool:PC_ur, bool:PC_ur2;
		switch(hittype)
		{
			case BULLET_HIT_TYPE_PLAYER:
			{
				#if PC_USE_NPC
					if(hitid != INVALID_PLAYER_ID && !IsPlayerNPC(hitid) &&
					ACInfo[hitid][acACAllow][19] && ACInfo[hitid][acUnFrozen] &&
					!ACInfo[hitid][acDead] && PC_gtc > ACInfo[hitid][acSetPosTick] + PC_gpp &&
					IsPlayerInRangeOfPoint(hitid, PC_wMinRange[weaponid - 22], PC_oX, PC_oY, PC_oZ) &&
					!(SPECIAL_ACTION_ENTER_VEHICLE <= GetPlayerSpecialAction(hitid) <= SPECIAL_ACTION_EXIT_VEHICLE))
				#else
					if(hitid != INVALID_PLAYER_ID && ACInfo[hitid][acACAllow][19] && ACInfo[hitid][acUnFrozen] &&
					!ACInfo[hitid][acDead] && PC_gtc > ACInfo[hitid][acSetPosTick] + PC_gpp &&
					IsPlayerInRangeOfPoint(hitid, PC_wMinRange[weaponid - 22], PC_oX, PC_oY, PC_oZ) &&
					!(SPECIAL_ACTION_ENTER_VEHICLE <= GetPlayerSpecialAction(hitid) <= SPECIAL_ACTION_EXIT_VEHICLE))
				#endif
				{
					PC_t = GetPlayerTeam(playerid);
					if(PC_t == NO_TEAM || PC_t != GetPlayerTeam(hitid))
					{
						#if PC_USE_RESTAURANTS || PC_USE_AMMUNATIONS || PC_USE_CASINOS
							PC_i = GetPlayerInterior(hitid);
						#endif
						#if PC_USE_RESTAURANTS
							if(!PC_InRestaurant(hitid, PC_i))
							{
						#endif
							#if PC_USE_AMMUNATIONS
								if(!PC_InAmmuNation(hitid, PC_i))
								{
							#endif
								#if PC_USE_CASINOS
									if(!PC_InCasino(hitid, PC_i))
									{
								#endif
									PC_ur = true;
								#if PC_USE_CASINOS
									}
								#endif
							#if PC_USE_AMMUNATIONS
								}
							#endif
						#if PC_USE_RESTAURANTS
							}
						#endif
					}
				}
			}
			case BULLET_HIT_TYPE_VEHICLE:
			{
				if(hitid != INVALID_VEHICLE_ID)
				{
					PC_i = ACVehInfo[hitid][acDriver];
					#if PC_USE_NPC
						if(PC_i != INVALID_PLAYER_ID && !IsPlayerNPC(PC_i) &&
						ACInfo[PC_i][acACAllow][20] && ACInfo[PC_i][acUnFrozen] &&
						ACVehInfo[hitid][acHealth] >= 250.0 && PC_gtc > ACInfo[PC_i][acSetPosTick] + PC_gpp)
					#else
						if(PC_i != INVALID_PLAYER_ID && ACInfo[PC_i][acACAllow][20] && ACInfo[PC_i][acUnFrozen] &&
						ACVehInfo[hitid][acHealth] >= 250.0 && PC_gtc > ACInfo[PC_i][acSetPosTick] + PC_gpp)
					#endif
					{
						PC_t = GetPlayerTeam(playerid);
						if(!PC_VehFriendlyFire || PC_t == NO_TEAM || PC_t != GetPlayerTeam(PC_i))
						{
							PC_t = GetVehicleModel(hitid);
							new Float:PC_wX, Float:PC_wY, Float:PC_wZ;
							GetVehicleModelInfo(PC_t, VEHICLE_MODEL_INFO_WHEELSFRONT, PC_hX, PC_hY, PC_hZ);
							GetVehicleModelInfo(PC_t, VEHICLE_MODEL_INFO_WHEELSREAR, PC_oX, PC_oY, PC_oZ);
							GetVehicleModelInfo(PC_t, VEHICLE_MODEL_INFO_WHEELSMID, PC_wX, PC_wY, PC_wZ);
							#if defined VectorSize
								if(VectorSize(PC_hX - fX, PC_hY - fY, PC_hZ - fZ) > 1.2 &&
								VectorSize(-PC_hX - fX, PC_hY - fY, PC_hZ - fZ) > 1.2 &&
								VectorSize(PC_oX - fX, PC_oY - fY, PC_oZ - fZ) > 1.2 &&
								VectorSize(-PC_oX - fX, PC_oY - fY, PC_oZ - fZ) > 1.2 &&
								(PC_wX == 0.0 && PC_wY == 0.0 && PC_wZ == 0.0 || VectorSize(PC_wX - fX, PC_wY - fY, PC_wZ - fZ) > 1.2 &&
								VectorSize(-PC_wX - fX, PC_wY - fY, PC_wZ - fZ) > 1.2)) PC_ur2 = true;
							#else
								if(floatsqroot(floatpower(PC_hX - fX, 2.0) + floatpower(PC_hY - fY, 2.0) + floatpower(PC_hZ - fZ, 2.0)) > 1.2 &&
								floatsqroot(floatpower(-PC_hX - fX, 2.0) + floatpower(PC_hY - fY, 2.0) + floatpower(PC_hZ - fZ, 2.0)) > 1.2 &&
								floatsqroot(floatpower(PC_oX - fX, 2.0) + floatpower(PC_oY - fY, 2.0) + floatpower(PC_oZ - fZ, 2.0)) > 1.2 &&
								floatsqroot(floatpower(-PC_oX - fX, 2.0) + floatpower(PC_oY - fY, 2.0) + floatpower(PC_oZ - fZ, 2.0)) > 1.2 &&
								(PC_wX == 0.0 && PC_wY == 0.0 && PC_wZ == 0.0 || floatsqroot(floatpower(PC_wX - fX, 2.0) + floatpower(PC_wY - fY, 2.0) + floatpower(PC_wZ - fZ, 2.0)) > 1.2 &&
								floatsqroot(floatpower(-PC_wX - fX, 2.0) + floatpower(PC_wY - fY, 2.0) + floatpower(PC_wZ - fZ, 2.0)) > 1.2)) PC_ur2 = true;
							#endif
						}
					}
				}
			}
		}
		if((PC_t = GetPlayerState(playerid)) != PLAYER_STATE_DRIVER)
		{
			new PC_s = PC_wSlot[weaponid];
			if(ACInfo[playerid][acACAllow][47])
			{
				PC_i = GetPlayerWeapon(playerid);
				if(PC_i != weaponid && PC_t != PLAYER_STATE_PASSENGER ||
				ACInfo[playerid][acWeapon][PC_s] != weaponid && ACInfo[playerid][acSetWeapon][PC_s] != weaponid)
				{
					if(++ACInfo[playerid][acCheatCount][18] > PC_MAX_FAKE_WEAPON_WARNINGS)
					{
						#undef PC_MAX_FAKE_WEAPON_WARNINGS
						#if defined DEBUG
							printf("AC(debug): Armed weapon: %d, AC weapon: %d, weaponid: %d, state: %d",
							PC_i, ACInfo[playerid][acWeapon][PC_s], weaponid, PC_t);
						#endif
						PC_KickWithCode(playerid, "", 0, 47, 2);
						#if defined OnCheatDetected
							ACInfo[playerid][acCheatCount][18] = 0;
						#endif
					}
					#if defined OnCheatWarning
						else OnCheatWarning(playerid, "", 0, 47, 2, ACInfo[playerid][acCheatCount][18]);
					#endif
					return 0;
				}
				else ACInfo[playerid][acCheatCount][18] = 0;
			}
			if(ACInfo[playerid][acACAllow][26])
			{
				PC_i = PC_gtc - ACInfo[playerid][acShotTick];
				if(ACInfo[playerid][acLastShot] == weaponid)
				{
					if(weaponid != 38 && PC_t != PLAYER_STATE_PASSENGER)
					{
						if(PC_gtc < ACInfo[playerid][acReloadTick] + 110)
						{
							#if defined DEBUG
								printf("AC(debug): Weaponid: %d, Reload time: %d, state: %d",
								weaponid, PC_gtc - ACInfo[playerid][acReloadTick], PC_t);
							#endif
							#if defined OnCheatDetected
								PC_KickWithCode(playerid, "", 0, 26, 4);
								if(ACInfo[playerid][acKicked] > 0) return 0;
								ACInfo[playerid][acReloadTick] = 0;
							#else
								return PC_KickWithCode(playerid, "", 0, 26, 4);
							#endif
						}
						else if(PC_i < 30 || PC_i < 50 && PC_s != 4)
						{
							if(++ACInfo[playerid][acCheatCount][8] > PC_MAX_RAPID_FIRE_WARNINGS)
							{
								#undef PC_MAX_RAPID_FIRE_WARNINGS
								#if defined DEBUG
									printf("AC(debug): Fire rate: %d, weaponid: %d", PC_i, weaponid);
								#endif
								#if defined OnCheatDetected
									PC_KickWithCode(playerid, "", 0, 26, 1);
									if(ACInfo[playerid][acKicked] > 0) return 0;
									ACInfo[playerid][acCheatCount][8] = 0;
								#else
									return PC_KickWithCode(playerid, "", 0, 26, 1);
								#endif
							}
							#if defined OnCheatWarning
								else OnCheatWarning(playerid, "", 0, 26, 1, ACInfo[playerid][acCheatCount][8]);
							#endif
						}
						else ACInfo[playerid][acCheatCount][8] = 0;
						if(weaponid == 25 && PC_i < 600 || (weaponid == 24 || 33 <= weaponid <= 34) && PC_i < 380)
						{
							if(++ACInfo[playerid][acCheatCount][14] > PC_MAX_AUTO_C_WARNINGS)
							{
								#undef PC_MAX_AUTO_C_WARNINGS
								#if defined DEBUG
									printf("AC(debug): Fire rate: %d, weaponid: %d", PC_i, weaponid);
								#endif
								#if defined OnCheatDetected
									PC_KickWithCode(playerid, "", 0, 26, 2);
									if(ACInfo[playerid][acKicked] > 0) return 0;
									ACInfo[playerid][acCheatCount][14] = 0;
								#else
									return PC_KickWithCode(playerid, "", 0, 26, 2);
								#endif
							}
							#if defined OnCheatWarning
								else OnCheatWarning(playerid, "", 0, 26, 2, ACInfo[playerid][acCheatCount][14]);
							#endif
						}
					}
				}
				else if(PC_i < 30)
				{
					#if defined DEBUG
						printf("AC(debug): Fire rate: %d, weaponid: %d, last weapon: %d",
						PC_i, weaponid, ACInfo[playerid][acLastShot]);
					#endif
					#if defined OnCheatDetected
						PC_KickWithCode(playerid, "", 0, 26, 3);
						if(ACInfo[playerid][acKicked] > 0) return 0;
					#else
						return PC_KickWithCode(playerid, "", 0, 26, 3);
					#endif
				}
				if(GetPlayerWeaponState(playerid) == WEAPONSTATE_LAST_BULLET) ACInfo[playerid][acReloadTick] = PC_gtc;
			}
			if(ACInfo[playerid][acACAllow][17] && PC_t != PLAYER_STATE_PASSENGER &&
			ACInfo[playerid][acGiveAmmo][PC_s] == -65535 && PC_gtc > ACInfo[playerid][acGtc][7] + PC_gpp)
			{
				PC_t = GetPlayerAmmo(playerid);
				if(ACInfo[playerid][acAmmo][PC_s] == 0)
				{
					#if defined DEBUG
						printf("AC(debug): Weaponid: %d, AC ammo: %d, ammo: %d", weaponid, ACInfo[playerid][acAmmo][PC_s], PC_t);
					#endif
					#if defined OnCheatDetected
						PC_KickWithCode(playerid, "", 0, 17, 1);
						if(ACInfo[playerid][acKicked] > 0) return 0;
						ACInfo[playerid][acAmmo][PC_s] = PC_t;
					#else
						return PC_KickWithCode(playerid, "", 0, 17, 1);
					#endif
				}
				if(ACInfo[playerid][acAmmo][PC_s] < PC_t)
				{
					switch(weaponid)
					{
						case 38:
						{
							if(++ACInfo[playerid][acCheatCount][7] > 9)
							{
								#if defined DEBUG
									printf("AC(debug): Weaponid: %d, AC ammo: %d, ammo: %d, acCheatCount[7]: %d",
									weaponid, ACInfo[playerid][acAmmo][PC_s], PC_t, ACInfo[playerid][acCheatCount][7]);
								#endif
								#if defined OnCheatDetected
									PC_KickWithCode(playerid, "", 0, 17, 2);
									if(ACInfo[playerid][acKicked] > 0) return 0;
									ACInfo[playerid][acCheatCount][7] = 0;
									ACInfo[playerid][acAmmo][PC_s] = PC_t;
								#else
									return PC_KickWithCode(playerid, "", 0, 17, 2);
								#endif
							}
							#if defined OnCheatWarning
								else OnCheatWarning(playerid, "", 0, 17, 2, ACInfo[playerid][acCheatCount][7]);
							#endif
						}
						default:
						{
							if(PC_t > ACInfo[playerid][acAmmo][PC_s] + 6)
							{
								#if defined DEBUG
									printf("AC(debug): Weaponid: %d, AC ammo: %d, ammo: %d",
									weaponid, ACInfo[playerid][acAmmo][PC_s], PC_t);
								#endif
								#if defined OnCheatDetected
									PC_KickWithCode(playerid, "", 0, 17, 3);
									if(ACInfo[playerid][acKicked] > 0) return 0;
									ACInfo[playerid][acCheatCount][7] = 0;
									ACInfo[playerid][acAmmo][PC_s] = PC_t;
								#else
									return PC_KickWithCode(playerid, "", 0, 17, 3);
								#endif
							}
						}
					}
				}
				else ACInfo[playerid][acCheatCount][7] = 0;
			}
			if(ACInfo[playerid][acAmmo][PC_s] != 0)
			{
				ACInfo[playerid][acAmmo][PC_s]--;
				if(ACInfo[playerid][acAmmo][PC_s] == 0 && ACInfo[playerid][acSet][3] == weaponid)
				{
					ACInfo[playerid][acSet][3] =
					ACInfo[playerid][acSetWeapon][PC_s] = -1;
				}
			}
			if(ACInfo[playerid][acAmmo][PC_s] < -32768) ACInfo[playerid][acAmmo][PC_s] += 65536;
		}
		ACInfo[playerid][acLastShot] = weaponid;
		ACInfo[playerid][acShotTick] = PC_gtc;
		PC_i = 1;
		#if defined PC_OnPlayerWeaponShot
			PC_i = PC_OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, fX, fY, fZ);
		#endif
		if(PC_i)
		{
			if(PC_ur)
			{
				if(ACInfo[hitid][acArmour] > 0) ACInfo[hitid][acDmgRes] = 2;
				else ACInfo[hitid][acDmgRes] = 1;
				ACInfo[hitid][acGtc][14] = PC_gtc + 165;
			}
			if(PC_ur2)
			{
				ACInfo[ACVehInfo[hitid][acDriver]][acVehDmgRes] = true;
				ACInfo[ACVehInfo[hitid][acDriver]][acGtc][16] = PC_gtc + 165;
			}
		}
		return PC_i;
	}

	#if defined _ALS_OnPlayerWeaponShot
		#undef OnPlayerWeaponShot
	#else
		#define _ALS_OnPlayerWeaponShot
	#endif
	#define OnPlayerWeaponShot PC_OnPlayerWeaponShot
	#if defined PC_OnPlayerWeaponShot
		forward PC_OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ);
	#endif
#endif

public OnVehicleMod(playerid, vehicleid, componentid)
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	new PC_i = GetTickCount();
	if(ACInfo[playerid][acACAllow][49])
	{
		if(PC_i < ACInfo[playerid][acCall][12] + PC_Mtfc[12][0]) return PC_FloodDetect(playerid, 12);
		if(PC_i < ACInfo[playerid][acCall][27] + PC_Mtfc[27][0]) PC_FloodDetect(playerid, 27);
		else ACInfo[playerid][acFloodCount][12] = ACInfo[playerid][acFloodCount][27] = 0;
	}
	if(ACInfo[playerid][acACAllow][23] && !ACInfo[playerid][acModShop])
	{
		#if defined OnCheatDetected
			PC_KickWithCode(playerid, "", 0, 23, 2);
			if(ACInfo[playerid][acKicked] > 0) return 0;
		#else
			return PC_KickWithCode(playerid, "", 0, 23, 2);
		#endif
	}
	ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][12] = PC_i;
	#if PC_USE_TUNING_GARAGES
		ACInfo[playerid][acGtc][17] = PC_i + 3250;
	#endif
	if(ACInfo[playerid][acACAllow][43] && !PC_IsCompatible((PC_i = GetVehicleModel(vehicleid)), componentid))
	{
		#if defined DEBUG
			printf("AC(debug): Veh model: %d, componentid: %d", PC_i, componentid);
		#endif
		return PC_KickWithCode(playerid, "", 0, 43, 1);
	}
	#if PC_USE_TUNING_GARAGES
		PC_i = componentid - 1000;
		if(ACInfo[playerid][acSet][12] != -1) ACInfo[playerid][acSet][12] += PC_cPrice[PC_i];
		else ACInfo[playerid][acSet][12] = PC_cPrice[PC_i];
		ACInfo[playerid][acCheatCount][12] = 0;
	#endif
	#if defined PC_OnVehicleMod
		return PC_OnVehicleMod(playerid, vehicleid, componentid);
	#else
		return 1;
	#endif
}

#if defined _ALS_OnVehicleMod
	#undef OnVehicleMod
#else
	#define _ALS_OnVehicleMod
#endif
#define OnVehicleMod PC_OnVehicleMod
#if defined PC_OnVehicleMod
	forward PC_OnVehicleMod(playerid, vehicleid, componentid);
#endif

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	new PC_gtc = GetTickCount();
	if(ACInfo[playerid][acACAllow][49])
	{
		if(PC_gtc < ACInfo[playerid][acCall][13] + PC_Mtfc[13][0]) PC_FloodDetect(playerid, 13);
		else if(PC_gtc < ACInfo[playerid][acCall][27] + PC_Mtfc[27][0]) PC_FloodDetect(playerid, 27);
		else ACInfo[playerid][acFloodCount][13] = ACInfo[playerid][acFloodCount][27] = 0;
	}
	if(ACInfo[playerid][acACAllow][43] && !(0 <= paintjobid <= 2) && paintjobid != 255)
	{
		#if defined DEBUG
			printf("AC(debug): Veh model: %d, paintjobid: %d", GetVehicleModel(vehicleid), paintjobid);
		#endif
		PC_KickWithCode(playerid, "", 0, 43, 2);
	}
	else if(ACInfo[playerid][acACAllow][23] && !ACInfo[playerid][acModShop]) PC_KickWithCode(playerid, "", 0, 23, 4);
	if(ACInfo[playerid][acKicked] < 1)
	{
		if(paintjobid == 255) ACVehInfo[vehicleid][acPaintJob] = 3;
		else ACVehInfo[vehicleid][acPaintJob] = paintjobid;
	}
	ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][13] = PC_gtc;
	#if defined PC_OnVehiclePaintjob
		return PC_OnVehiclePaintjob(playerid, vehicleid, paintjobid);
	#else
		return 1;
	#endif
}

#if defined _ALS_OnVehiclePaintjob
	#undef OnVehiclePaintjob
#else
	#define _ALS_OnVehiclePaintjob
#endif
#define OnVehiclePaintjob PC_OnVehiclePaintjob
#if defined PC_OnVehiclePaintjob
	forward PC_OnVehiclePaintjob(playerid, vehicleid, paintjobid);
#endif

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	new PC_gtc = GetTickCount();
	if(ACInfo[playerid][acACAllow][49])
	{
		if(PC_gtc < ACInfo[playerid][acCall][14] + PC_Mtfc[14][0]) return PC_FloodDetect(playerid, 14);
		if(PC_gtc < ACInfo[playerid][acCall][27] + PC_Mtfc[27][0]) PC_FloodDetect(playerid, 27);
		else ACInfo[playerid][acFloodCount][14] = ACInfo[playerid][acFloodCount][27] = 0;
	}
	#if !PC_USE_TUNING_GARAGES && !PC_USE_PAYNSPRAY
		if(ACInfo[playerid][acACAllow][23])
		{
			#if defined DEBUG
				printf("AC(debug): Veh model: %d, color1: %d, color2: %d", GetVehicleModel(vehicleid), color1, color2);
			#endif
			#if defined OnCheatDetected
				PC_KickWithCode(playerid, "", 0, 23, 5);
				if(ACInfo[playerid][acKicked] > 0) return 0;
			#else
				return PC_KickWithCode(playerid, "", 0, 23, 5);
			#endif
		}
	#endif
	ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][14] = PC_gtc;
	#if defined PC_OnVehicleRespray
		return PC_OnVehicleRespray(playerid, vehicleid, color1, color2);
	#else
		return 1;
	#endif
}

#if defined _ALS_OnVehicleRespray
	#undef OnVehicleRespray
#else
	#define _ALS_OnVehicleRespray
#endif
#define OnVehicleRespray PC_OnVehicleRespray
#if defined PC_OnVehicleRespray
	forward PC_OnVehicleRespray(playerid, vehicleid, color1, color2);
#endif

public OnVehicleSpawn(vehicleid)
{
	ACVehInfo[vehicleid][acPaintJob] = 3;
	ACVehInfo[vehicleid][acSpawned] = true;
	ACVehInfo[vehicleid][acHealth] = 1000.0;
	ACVehInfo[vehicleid][acPosDiff] =
	ACVehInfo[vehicleid][acVelX] =
	ACVehInfo[vehicleid][acVelY] =
	ACVehInfo[vehicleid][acVelZ] = 0.0;
	ACVehInfo[vehicleid][acLastSpeed] =
	ACVehInfo[vehicleid][acSpeedDiff] = 0;
	ACVehInfo[vehicleid][acPosX] = ACVehInfo[vehicleid][acSpawnPosX];
	ACVehInfo[vehicleid][acPosY] = ACVehInfo[vehicleid][acSpawnPosY];
	ACVehInfo[vehicleid][acPosZ] = ACVehInfo[vehicleid][acSpawnPosZ];
	ACVehInfo[vehicleid][acZAngle] = ACVehInfo[vehicleid][acSpawnZAngle];
	ACVehInfo[vehicleid][acDriver] = INVALID_PLAYER_ID;
	new PC_gtc = GetTickCount() + 2650;
	#if defined foreach
		foreach(new PC_i : Player)
		{
			if(ACInfo[PC_i][acVeh] == vehicleid) ACInfo[PC_i][acSetPosTick] = ACInfo[PC_i][acGtc][11] = PC_gtc;
		}
	#else
		#if defined GetPlayerPoolSize
			for(new PC_i = GetPlayerPoolSize(); PC_i >= 0; --PC_i)
		#else
			for(new PC_i = MAX_PLAYERS - 1; PC_i >= 0; --PC_i)
		#endif
		{
			if(IsPlayerInVehicle(PC_i, vehicleid)) ACInfo[PC_i][acSetPosTick] = ACInfo[PC_i][acGtc][11] = PC_gtc;
		}
	#endif
	#if defined PC_OnVehicleSpawn
		return PC_OnVehicleSpawn(vehicleid);
	#else
		return 1;
	#endif
}

#if defined _ALS_OnVehicleSpawn
	#undef OnVehicleSpawn
#else
	#define _ALS_OnVehicleSpawn
#endif
#define OnVehicleSpawn PC_OnVehicleSpawn
#if defined PC_OnVehicleSpawn
	forward PC_OnVehicleSpawn(vehicleid);
#endif

public OnVehicleDeath(vehicleid, killerid)
{
	#if PC_USE_NPC
	if(0 <= killerid < MAX_PLAYERS && !IsPlayerNPC(killerid))
	#else
	if(0 <= killerid < MAX_PLAYERS)
	#endif
	{
		new PC_gtc = GetTickCount();
		if(ACInfo[killerid][acACAllow][49])
		{
			if(PC_gtc < ACInfo[killerid][acCall][15] + PC_Mtfc[15][0]) PC_FloodDetect(killerid, 15);
			else if(PC_gtc < ACInfo[killerid][acCall][27] + PC_Mtfc[27][0]) PC_FloodDetect(killerid, 27);
			else ACInfo[killerid][acFloodCount][15] = ACInfo[killerid][acFloodCount][27] = 0;
		}
		ACInfo[killerid][acCall][27] = ACInfo[killerid][acCall][15] = PC_gtc;
	}
	new Float:PC_vHealth;
	GetVehicleHealth(vehicleid, PC_vHealth);
	if(PC_vHealth < 250.0) ACVehInfo[vehicleid][acSpawned] = false;
	#if defined PC_OnVehicleDeath
		return PC_OnVehicleDeath(vehicleid, killerid);
	#else
		return 1;
	#endif
}

#if defined _ALS_OnVehicleDeath
	#undef OnVehicleDeath
#else
	#define _ALS_OnVehicleDeath
#endif
#define OnVehicleDeath PC_OnVehicleDeath
#if defined PC_OnVehicleDeath
	forward PC_OnVehicleDeath(vehicleid, killerid);
#endif

public OnPlayerText(playerid, text[])
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	#if PC_USE_NPC
		if(!IsPlayerNPC(playerid))
		{
	#endif
		new PC_gtc = GetTickCount();
		if(ACInfo[playerid][acACAllow][49])
		{
			if(PC_gtc < ACInfo[playerid][acCall][16] + PC_Mtfc[16][0]) return PC_FloodDetect(playerid, 16);
			if(PC_gtc < ACInfo[playerid][acCall][27] + PC_Mtfc[27][0]) PC_FloodDetect(playerid, 27);
			else ACInfo[playerid][acFloodCount][16] = ACInfo[playerid][acFloodCount][27] = 0;
		}
		ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][16] = PC_gtc;
	#if PC_USE_NPC
		}
	#endif
	#if defined PC_OnPlayerText
		return PC_OnPlayerText(playerid, text);
	#else
		return 1;
	#endif
}

#if defined _ALS_OnPlayerText
	#undef OnPlayerText
#else
	#define _ALS_OnPlayerText
#endif
#define OnPlayerText PC_OnPlayerText
#if defined PC_OnPlayerText
	forward PC_OnPlayerText(playerid, text[]);
#endif

public OnPlayerEnterCheckpoint(playerid)
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	#if PC_USE_NPC
		if(!IsPlayerNPC(playerid))
		{
	#endif
		new PC_gtc = GetTickCount();
		if(ACInfo[playerid][acACAllow][49])
		{
			if(PC_gtc < ACInfo[playerid][acCall][17] + PC_Mtfc[17][0]) PC_FloodDetect(playerid, 17);
			else if(PC_gtc < ACInfo[playerid][acCall][27] + PC_Mtfc[27][0]) PC_FloodDetect(playerid, 27);
			else ACInfo[playerid][acFloodCount][17] = ACInfo[playerid][acFloodCount][27] = 0;
		}
		ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][17] = PC_gtc;
	#if PC_USE_NPC
		}
	#endif
	#if defined PC_OnPlayerEnterCheckpoint
		return PC_OnPlayerEnterCheckpoint(playerid);
	#else
		return 1;
	#endif
}

#if defined _ALS_OnPlayerEnterCheckpoint
	#undef OnPlayerEnterCheckpoint
#else
	#define _ALS_OnPlayerEnterCheckpoint
#endif
#define OnPlayerEnterCheckpoint PC_OnPlayerEnterCheckpoint
#if defined PC_OnPlayerEnterCheckpoint
	forward PC_OnPlayerEnterCheckpoint(playerid);
#endif

public OnPlayerLeaveCheckpoint(playerid)
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	#if PC_USE_NPC
		if(!IsPlayerNPC(playerid))
		{
	#endif
		new PC_gtc = GetTickCount();
		if(ACInfo[playerid][acACAllow][49])
		{
			if(PC_gtc < ACInfo[playerid][acCall][18] + PC_Mtfc[18][0]) PC_FloodDetect(playerid, 18);
			else if(PC_gtc < ACInfo[playerid][acCall][27] + PC_Mtfc[27][0]) PC_FloodDetect(playerid, 27);
			else ACInfo[playerid][acFloodCount][18] = ACInfo[playerid][acFloodCount][27] = 0;
		}
		ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][18] = PC_gtc;
	#if PC_USE_NPC
		}
	#endif
	#if defined PC_OnPlayerLeaveCheckpoint
		return PC_OnPlayerLeaveCheckpoint(playerid);
	#else
		return 1;
	#endif
}

#if defined _ALS_OnPlayerLeaveCheckpoint
	#undef OnPlayerLeaveCheckpoint
#else
	#define _ALS_OnPlayerLeaveCheckpoint
#endif
#define OnPlayerLeaveCheckpoint PC_OnPlayerLeaveCheckpoint
#if defined PC_OnPlayerLeaveCheckpoint
	forward PC_OnPlayerLeaveCheckpoint(playerid);
#endif

public OnPlayerRequestSpawn(playerid)
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	new PC_gtc;
	#if PC_USE_NPC
		if(!IsPlayerNPC(playerid))
		{
	#endif
		PC_gtc = GetTickCount();
		if(ACInfo[playerid][acACAllow][49])
		{
			if(PC_gtc < ACInfo[playerid][acCall][19] + PC_Mtfc[19][0]) PC_FloodDetect(playerid, 19);
			else if(PC_gtc < ACInfo[playerid][acCall][27] + PC_Mtfc[27][0]) PC_FloodDetect(playerid, 27);
			else ACInfo[playerid][acFloodCount][19] = ACInfo[playerid][acFloodCount][27] = 0;
		}
	#if PC_USE_NPC
		}
	#endif
	if(!ACInfo[playerid][acSpawned])
	{
		new PC_i = 1;
		#if defined PC_OnPlayerRequestSpawn
			PC_i = PC_OnPlayerRequestSpawn(playerid);
		#endif
		if(PC_i)
		{
			ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][19] = PC_gtc;
			ACInfo[playerid][acSpawnTick] = ACInfo[playerid][acNOPCount][9] = 0;
			ACInfo[playerid][acSpawnRes] = 1;
			ACInfo[playerid][acSet][7] = 3;
		}
		return PC_i;
	}
	else ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][19] = PC_gtc;
	return 0;
}

#if defined _ALS_OnPlayerRequestSpawn
	#undef OnPlayerRequestSpawn
#else
	#define _ALS_OnPlayerRequestSpawn
#endif
#define OnPlayerRequestSpawn PC_OnPlayerRequestSpawn
#if defined PC_OnPlayerRequestSpawn
	forward PC_OnPlayerRequestSpawn(playerid);
#endif

public OnPlayerExitedMenu(playerid)
{
	if(!(0 <= playerid < MAX_PLAYERS) || ACInfo[playerid][acKicked] > 0) return 0;
	new PC_gtc = GetTickCount();
	if(ACInfo[playerid][acACAllow][49])
	{
		if(PC_gtc < ACInfo[playerid][acCall][20] + PC_Mtfc[20][0]) PC_FloodDetect(playerid, 20);
		else if(PC_gtc < ACInfo[playerid][acCall][27] + PC_Mtfc[27][0]) PC_FloodDetect(playerid, 27);
		else ACInfo[playerid][acFloodCount][20] = ACInfo[playerid][acFloodCount][27] = 0;
	}
	ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][20] = PC_gtc;
	#if defined PC_OnPlayerExitedMenu
		return PC_OnPlayerExitedMenu(playerid);
	#else
		return 1;
	#endif
}

#if defined _ALS_OnPlayerExitedMenu
	#undef OnPlayerExitedMenu
#else
	#define _ALS_OnPlayerExitedMenu
#endif
#define OnPlayerExitedMenu PC_OnPlayerExitedMenu
#if defined PC_OnPlayerExitedMenu
	forward PC_OnPlayerExitedMenu(playerid);
#endif

public OnPlayerEnterRaceCheckpoint(playerid)
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	#if PC_USE_NPC
		if(!IsPlayerNPC(playerid))
		{
	#endif
		new PC_gtc = GetTickCount();
		if(ACInfo[playerid][acACAllow][49])
		{
			if(PC_gtc < ACInfo[playerid][acCall][21] + PC_Mtfc[21][0]) PC_FloodDetect(playerid, 21);
			else if(PC_gtc < ACInfo[playerid][acCall][27] + PC_Mtfc[27][0]) PC_FloodDetect(playerid, 27);
			else ACInfo[playerid][acFloodCount][21] = ACInfo[playerid][acFloodCount][27] = 0;
		}
		ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][21] = PC_gtc;
	#if PC_USE_NPC
		}
	#endif
	#if defined PC_OnPlayerEnterRaceCheckpoint
		return PC_OnPlayerEnterRaceCheckpoint(playerid);
	#else
		return 1;
	#endif
}

#if defined _ALS_OnPlayerEnterRaceCheckpoin\
	|| defined _ALS_OnPlayerEnterRaceCP
	#undef OnPlayerEnterRaceCheckpoint
#else
	#define _ALS_OnPlayerEnterRaceCheckpoin
	#define _ALS_OnPlayerEnterRaceCP
#endif
#define OnPlayerEnterRaceCheckpoint PC_OnPlayerEnterRaceCheckpoint
#if defined PC_OnPlayerEnterRaceCheckpoint
	forward PC_OnPlayerEnterRaceCheckpoint(playerid);
#endif

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	#if PC_USE_NPC
		if(!IsPlayerNPC(playerid))
		{
	#endif
		new PC_gtc = GetTickCount();
		if(ACInfo[playerid][acACAllow][49])
		{
			if(PC_gtc < ACInfo[playerid][acCall][22] + PC_Mtfc[22][0]) PC_FloodDetect(playerid, 22);
			else if(PC_gtc < ACInfo[playerid][acCall][27] + PC_Mtfc[27][0]) PC_FloodDetect(playerid, 27);
			else ACInfo[playerid][acFloodCount][22] = ACInfo[playerid][acFloodCount][27] = 0;
		}
		ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][22] = PC_gtc;
	#if PC_USE_NPC
		}
	#endif
	#if defined PC_OnPlayerLeaveRaceCheckpoint
		return PC_OnPlayerLeaveRaceCheckpoint(playerid);
	#else
		return 1;
	#endif
}

#if defined _ALS_OnPlayerLeaveRaceCheckpoin\
	|| defined _ALS_OnPlayerLeaveRaceCP
	#undef OnPlayerLeaveRaceCheckpoint
#else
	#define _ALS_OnPlayerLeaveRaceCheckpoin
	#define _ALS_OnPlayerLeaveRaceCP
#endif
#define OnPlayerLeaveRaceCheckpoint PC_OnPlayerLeaveRaceCheckpoint
#if defined PC_OnPlayerLeaveRaceCheckpoint
	forward PC_OnPlayerLeaveRaceCheckpoint(playerid);
#endif

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(ACInfo[playerid][acKicked] > 0) return 1;
	new PC_gtc = GetTickCount();
	if(ACInfo[playerid][acACAllow][49])
	{
		if(PC_gtc < ACInfo[playerid][acCall][23] + PC_Mtfc[23][0])
		{
			PC_FloodDetect(playerid, 23);
			return 1;
		}
		if(PC_gtc < ACInfo[playerid][acCall][27] + PC_Mtfc[27][0]) PC_FloodDetect(playerid, 27);
		else ACInfo[playerid][acFloodCount][23] = ACInfo[playerid][acFloodCount][27] = 0;
	}
	ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][23] = PC_gtc;
	#if defined PC_OnPlayerClickPlayerTD
        return PC_OnPlayerClickPlayerTD(playerid, PlayerText:playertextid);
    #else
        return false;
    #endif
}	
#if defined _H_OnPlayerClickPlayerTextDraw
    #undef OnPlayerClickPlayerTextDraw
#else
    #define _H_OnPlayerClickPlayerTextDraw
#endif
#define OnPlayerClickPlayerTextDraw PC_OnPlayerClickPlayerTD
#if defined PC_OnPlayerClickPlayerTD
    forward PC_OnPlayerClickPlayerTD(playerid, PlayerText:playertextid);
#endif

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	if(ACInfo[playerid][acKicked] > 0) return 1;
	new PC_gtc = GetTickCount();
	if(ACInfo[playerid][acACAllow][49])
	{
		if(PC_gtc < ACInfo[playerid][acCall][24] + PC_Mtfc[24][0]) PC_FloodDetect(playerid, 24);
		else if(PC_gtc < ACInfo[playerid][acCall][27] + PC_Mtfc[27][0]) PC_FloodDetect(playerid, 27);
		else
		{
			if(ACInfo[playerid][acFloodCount][24] > 0) ACInfo[playerid][acFloodCount][24]--;
			ACInfo[playerid][acFloodCount][27] = 0;
		}
	}
	ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][24] = PC_gtc;
	#if defined PC_OnVehicleDamageStatusUpdate
		return PC_OnVehicleDamageStatusUpdate(vehicleid, playerid);
	#else
		return 0;
	#endif
}

#if defined _ALS_OnVehicleDamageStatusUpdat\
	|| defined _ALS_OnVehicleDamageStatusUpd
	#undef OnVehicleDamageStatusUpdate
#else
	#define _ALS_OnVehicleDamageStatusUpdat
	#define _ALS_OnVehicleDamageStatusUpd
#endif
#define OnVehicleDamageStatusUpdate PC_OnVehicleDamageStatusUpdate
#if defined PC_OnVehicleDamageStatusUpdate
	forward PC_OnVehicleDamageStatusUpdate(vehicleid, playerid);
#endif

#if defined OnVehicleSirenStateChange
	public OnVehicleSirenStateChange(playerid, vehicleid, newstate)
	{
		if(ACInfo[playerid][acKicked] > 0) return 1;
		#if PC_USE_NPC
			if(!IsPlayerNPC(playerid))
			{
		#endif
			new PC_gtc = GetTickCount();
			if(ACInfo[playerid][acACAllow][49])
			{
				if(PC_gtc < ACInfo[playerid][acCall][25] + PC_Mtfc[25][0]) PC_FloodDetect(playerid, 25);
				else if(PC_gtc < ACInfo[playerid][acCall][27] + PC_Mtfc[27][0]) PC_FloodDetect(playerid, 27);
				else ACInfo[playerid][acFloodCount][25] = ACInfo[playerid][acFloodCount][27] = 0;
			}
			ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][25] = PC_gtc;
		#if PC_USE_NPC
			}
		#endif
		#undef PC_USE_NPC
		#if defined PC_OnVehicleSirenStateChange
			return PC_OnVehicleSirenStateChange(playerid, vehicleid, newstate);
		#else
			return 0;
		#endif
	}

	#if defined _ALS_OnVehicleSirenStateChange
		#undef OnVehicleSirenStateChange
	#else
		#define _ALS_OnVehicleSirenStateChange
	#endif
	#define OnVehicleSirenStateChange PC_OnVehicleSirenStateChange
	#if defined PC_OnVehicleSirenStateChange
		forward PC_OnVehicleSirenStateChange(playerid, vehicleid, newstate);
	#endif
#endif

#if defined OnPlayerSelectDynamicObject
	#if defined STREAMER_ENABLE_TAGS
		public OnPlayerSelectDynamicObject(playerid, STREAMER_TAG_OBJECT:objectid, modelid, Float:x, Float:y, Float:z)
	#else
		public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z)
	#endif
	{
		if(ACInfo[playerid][acKicked] > 0) return 0;
		new PC_gtc = GetTickCount();
		if(ACInfo[playerid][acACAllow][49])
		{
			if(PC_gtc < ACInfo[playerid][acCall][26] + PC_Mtfc[26][0]) PC_FloodDetect(playerid, 26);
			else if(PC_gtc < ACInfo[playerid][acCall][27] + PC_Mtfc[27][0]) PC_FloodDetect(playerid, 27);
			else ACInfo[playerid][acFloodCount][26] = ACInfo[playerid][acFloodCount][27] = 0;
		}
		ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][26] = PC_gtc;
		#if defined PC_OnPlayerSelectDynamicObject
			return PC_OnPlayerSelectDynamicObject(playerid, objectid, modelid, x, y, z);
		#else
			return 1;
		#endif
	}

	#if defined _ALS_OnPlayerSelectDynamicObjec\
		|| defined _ALS_OnPlayerSelectDynObject || defined _ALS_OnPlayerSelectDynamicObj
		#undef OnPlayerSelectDynamicObject
	#else
		#define _ALS_OnPlayerSelectDynamicObjec
		#define _ALS_OnPlayerSelectDynObject
		#define _ALS_OnPlayerSelectDynamicObj
	#endif
	#define OnPlayerSelectDynamicObject PC_OnPlayerSelectDynamicObject
	#if defined PC_OnPlayerSelectDynamicObject
		#if defined STREAMER_ENABLE_TAGS
			forward PC_OnPlayerSelectDynamicObject(playerid, STREAMER_TAG_OBJECT:objectid, modelid, Float:x, Float:y, Float:z);
		#else
			forward PC_OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z);
		#endif
	#endif
#endif

public OnPlayerSelectObject(playerid, type, objectid, modelid, Float:fX, Float:fY, Float:fZ)
{
	if(ACInfo[playerid][acKicked] > 0) return 1;
	new PC_gtc = GetTickCount();
	if(ACInfo[playerid][acACAllow][49])
	{
		if(PC_gtc < ACInfo[playerid][acCall][26] + PC_Mtfc[26][0])
		{
			PC_FloodDetect(playerid, 26);
			return 1;
		}
		if(PC_gtc < ACInfo[playerid][acCall][27] + PC_Mtfc[27][0]) PC_FloodDetect(playerid, 27);
		else ACInfo[playerid][acFloodCount][26] = ACInfo[playerid][acFloodCount][27] = 0;
	}
	ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][26] = PC_gtc;
	#if defined PC_OnPlayerSelectObject
		return PC_OnPlayerSelectObject(playerid, type, objectid, modelid, fX, fY, fZ);
	#else
		return 0;
	#endif
}

#if defined _ALS_OnPlayerSelectObject
	#undef OnPlayerSelectObject
#else
	#define _ALS_OnPlayerSelectObject
#endif
#define OnPlayerSelectObject PC_OnPlayerSelectObject
#if defined PC_OnPlayerSelectObject
	forward PC_OnPlayerSelectObject(playerid, type, objectid, modelid, Float:fX, Float:fY, Float:fZ);
#endif

#if defined OnTrailerUpdate
	public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
#elseif defined GetServerTickRate
	public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z)
#else
	public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat)
#endif
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	#if defined OnTrailerUpdate
		if(ACInfo[playerid][acACAllow][31] &&
		(new_x != new_x || new_y != new_y || new_z != new_z || vel_x != vel_x || vel_y != vel_y || vel_z != vel_z ||
		floatabs(new_x) >= 25000.0 || floatabs(new_y) >= 25000.0 || floatabs(new_z) >= 25000.0 ||
		floatabs(vel_x) >= 100.0 || floatabs(vel_y) >= 100.0 || floatabs(vel_z) >= 100.0 ||
		floatabs(vel_x) - floatabs(ACVehInfo[vehicleid][acVelX]) >= 4.0 ||
		floatabs(vel_y) - floatabs(ACVehInfo[vehicleid][acVelY]) >= 4.0 ||
		floatabs(vel_z) - floatabs(ACVehInfo[vehicleid][acVelZ]) >= 4.0))
		{
			#if defined DEBUG
				printf("AC(debug): Pos x, y, z: %f, %f, %f, vel x, y, z: %f, %f, %f", new_x, new_y, new_z, vel_x, vel_y, vel_z);
			#endif
			return PC_KickWithCode(playerid, "", 0, 31, 2);
		}
	#elseif defined GetServerTickRate
		if(ACInfo[playerid][acACAllow][31] &&
		(new_x != new_x || new_y != new_y || new_z != new_z ||
		floatabs(new_x) >= 25000.0 || floatabs(new_y) >= 25000.0 || floatabs(new_z) >= 25000.0))
		{
			#if defined DEBUG
				printf("AC(debug): Pos x, y, z: %f, %f, %f", new_x, new_y, new_z);
			#endif
			return PC_KickWithCode(playerid, "", 0, 31, 2);
		}
	#endif
	#if defined GetServerTickRate
		new Float:PC_x, Float:PC_y, Float:PC_z, Float:PC_dist = GetVehicleDistanceFromPoint(vehicleid, new_x, new_y, new_z);
		GetVehiclePos(vehicleid, PC_x, PC_y, PC_z);
		if(passenger_seat > 0)
		{
			new Float:PC_zDiff = new_z - PC_z;
			#if defined OnTrailerUpdate
			if(ACInfo[playerid][acACAllow][31] &&
			((vel_z > ACVehInfo[vehicleid][acVelZ] || PC_zDiff >= -0.8) &&
			(floatabs(vel_x) >= floatabs(ACVehInfo[vehicleid][acVelX]) && floatabs(ACVehInfo[vehicleid][acVelX]) >= 0.3 ||
			floatabs(vel_y) >= floatabs(ACVehInfo[vehicleid][acVelY]) && floatabs(ACVehInfo[vehicleid][acVelY]) >= 0.3) ||
			PC_zDiff >= -5.0 && (floatabs(new_x - PC_x) >= 12.0 || floatabs(new_y - PC_y) >= 12.0) ||
			vel_z >= 0.0 && PC_zDiff <= -3.0 || vel_z <= 0.0 && PC_zDiff >= 3.0))
			{
				if(++ACInfo[playerid][acCheatCount][4] > PC_MAX_CARSHOT_WARNINGS)
				{
					#if defined DEBUG
						printf("AC(debug): Vel x, y, z: %f, %f, %f, old vel x, y: %f, %f, pos diff x, y, z: %f, %f, %f, veh: %d",
						vel_x, vel_y, vel_z, ACVehInfo[vehicleid][acVelX], ACVehInfo[vehicleid][acVelY], new_x - PC_x, new_y - PC_y, PC_zDiff, vehicleid);
					#endif
					#if defined OnCheatDetected
						PC_KickWithCode(playerid, "", 0, 31, 1);
						if(ACInfo[playerid][acKicked] > 0) return 0;
						ACInfo[playerid][acCheatCount][4] = 0;
					#else
						return PC_KickWithCode(playerid, "", 0, 31, 1);
					#endif
				}
				#if defined OnCheatWarning
					else OnCheatWarning(playerid, "", 0, 31, 1, ACInfo[playerid][acCheatCount][4]);
				#endif
			}
			#else
			if(ACInfo[playerid][acACAllow][31] &&
			PC_zDiff >= -5.0 && (floatabs(new_x - PC_x) >= 12.0 || floatabs(new_y - PC_y) >= 12.0))
			{
				if(++ACInfo[playerid][acCheatCount][4] > PC_MAX_CARSHOT_WARNINGS)
				{
					#if defined DEBUG
						printf("AC(debug): Pos diff x, y, z: %f, %f, %f, veh: %d",
						new_x - PC_x, new_y - PC_y, PC_zDiff, vehicleid);
					#endif
					#if defined OnCheatDetected
						PC_KickWithCode(playerid, "", 0, 31, 1);
						if(ACInfo[playerid][acKicked] > 0) return 0;
						ACInfo[playerid][acCheatCount][4] = 0;
					#else
						return PC_KickWithCode(playerid, "", 0, 31, 1);
					#endif
				}
				#if defined OnCheatWarning
					else OnCheatWarning(playerid, "", 0, 31, 1, ACInfo[playerid][acCheatCount][4]);
				#endif
			}
			#endif
			#if defined OnTrailerUpdate
			else if(ACInfo[playerid][acACAllow][8] &&
			vel_z >= 0.1 && vel_z > ACVehInfo[vehicleid][acVelZ] &&
			floatabs(PC_x - new_x) < PC_zDiff / 2.0 && floatabs(PC_y - new_y) < PC_zDiff / 2.0)
			{
				if(++ACInfo[playerid][acCheatCount][3] > PC_MAX_FLYHACK_VEH_WARNINGS)
				{
					#if defined DEBUG
						printf("AC(debug): Vel z: %f, old vel z: %f, pos diff x, y, z: %f, %f, %f, veh: %d",
						vel_z, ACVehInfo[vehicleid][acVelZ], PC_x - new_x, PC_y - new_y, PC_zDiff, vehicleid);
					#endif
					#if defined OnCheatDetected
						PC_KickWithCode(playerid, "", 0, 8, 2);
						if(ACInfo[playerid][acKicked] > 0) return 0;
						ACInfo[playerid][acCheatCount][3] = 0;
					#else
						return PC_KickWithCode(playerid, "", 0, 8, 2);
					#endif
				}
				#if defined OnCheatWarning
					else OnCheatWarning(playerid, "", 0, 8, 2, ACInfo[playerid][acCheatCount][3]);
				#endif
			}
			#endif
			else
			{
				if(ACInfo[playerid][acCheatCount][4] > 0) ACInfo[playerid][acCheatCount][4]--;
				ACInfo[playerid][acCheatCount][3] = 0;
			}
		}
		if(ACInfo[playerid][acACAllow][5] &&
		(PC_dist >= 25.0 || PC_dist >= 15.0 && GetTickCount() > ACInfo[playerid][acGtc][18] + GetPlayerPing(playerid)) &&
		PC_dist > ACVehInfo[vehicleid][acPosDiff] + ((PC_dist / 3.0) * 1.6) &&
		(PC_z > -45.0 || VectorSize(new_x - PC_x, new_y - PC_y, 0.0) >= 180.0))
		{
			#if defined DEBUG
				printf("AC(debug): Dist: %f, old pos diff: %f, old pos z: %f, veh: %d, playerid: %d",
				PC_dist, ACVehInfo[vehicleid][acPosDiff], PC_z, vehicleid, playerid);
			#endif
			#if defined OnCheatDetected
				PC_KickWithCode(playerid, "", 0, 5, 1);
			#endif
			GetVehicleZAngle(vehicleid, ACVehInfo[vehicleid][acZAngle]);
			#if defined SetVehicleFakeZAngleForPlayer
				SetVehicleFakeZAngleForPlayer(playerid, vehicleid, ACVehInfo[vehicleid][acZAngle]);
			#else
				SetVehicleZAngle(vehicleid, ACVehInfo[vehicleid][acZAngle]);
			#endif
			#if defined SetVehicleFakePosForPlayer
				SetVehicleFakePosForPlayer(playerid, vehicleid, PC_x, PC_y, PC_z);
			#else
				SetVehiclePos(vehicleid, PC_x, PC_y, PC_z);
			#endif
			return 0;
		}
	#else
		new Float:PC_x, Float:PC_y, Float:PC_z, Float:PC_dist = GetVehicleDistanceFromPoint(vehicleid, ACVehInfo[vehicleid][acPosX], ACVehInfo[vehicleid][acPosY], ACVehInfo[vehicleid][acPosZ]);
		GetVehiclePos(vehicleid, PC_x, PC_y, PC_z);
		if(passenger_seat > 0)
		{
			new Float:PC_zDiff = PC_z - ACVehInfo[vehicleid][acPosZ];
			if(ACInfo[playerid][acACAllow][31] && PC_zDiff >= -5.0 &&
			(floatabs(PC_x - ACVehInfo[vehicleid][acPosX]) >= 12.0 || floatabs(PC_y - ACVehInfo[vehicleid][acPosY]) >= 12.0))
			{
				if(++ACInfo[playerid][acCheatCount][4] > PC_MAX_CARSHOT_WARNINGS)
				{
					#if defined DEBUG
						printf("AC(debug): Pos diff x, y, z: %f, %f, %f, veh: %d",
						PC_x - ACVehInfo[vehicleid][acPosX], PC_y - ACVehInfo[vehicleid][acPosY], PC_zDiff, vehicleid);
					#endif
					#if defined OnCheatDetected
						PC_KickWithCode(playerid, "", 0, 31, 1);
						if(ACInfo[playerid][acKicked] > 0) return 0;
						ACInfo[playerid][acCheatCount][4] = 0;
					#else
						return PC_KickWithCode(playerid, "", 0, 31, 1);
					#endif
				}
				#if defined OnCheatWarning
					else OnCheatWarning(playerid, "", 0, 31, 1, ACInfo[playerid][acCheatCount][4]);
				#endif
			}
			else if(ACInfo[playerid][acCheatCount][4] > 0) ACInfo[playerid][acCheatCount][4]--;
		}
		#if defined VectorSize
		if(ACInfo[playerid][acACAllow][5] &&
		(PC_dist >= 25.0 || PC_dist >= 15.0 && GetTickCount() > ACInfo[playerid][acGtc][18] + GetPlayerPing(playerid)) &&
		PC_dist > ACVehInfo[vehicleid][acPosDiff] + ((PC_dist / 3.0) * 1.6) &&
		(ACVehInfo[vehicleid][acPosZ] > -45.0 || VectorSize(PC_x - ACVehInfo[vehicleid][acPosX], PC_y - ACVehInfo[vehicleid][acPosY], 0.0) >= 180.0))
		#else
		if(ACInfo[playerid][acACAllow][5] &&
		(PC_dist >= 25.0 || PC_dist >= 15.0 && GetTickCount() > ACInfo[playerid][acGtc][18] + GetPlayerPing(playerid)) &&
		PC_dist > ACVehInfo[vehicleid][acPosDiff] + ((PC_dist / 3.0) * 1.6) &&
		(ACVehInfo[vehicleid][acPosZ] > -45.0 || floatsqroot(floatpower(PC_x - ACVehInfo[vehicleid][acPosX], 2.0) + floatpower(PC_y - ACVehInfo[vehicleid][acPosY], 2.0)) >= 180.0))
		#endif
		{
			#if defined DEBUG
				printf("AC(debug): Dist: %f, old pos diff: %f, old pos z: %f, veh: %d, playerid: %d",
				PC_dist, ACVehInfo[vehicleid][acPosDiff], ACVehInfo[vehicleid][acPosZ], vehicleid, playerid);
			#endif
			#if defined OnCheatDetected
				PC_KickWithCode(playerid, "", 0, 5, 1);
			#endif
			SetVehicleZAngle(vehicleid, ACVehInfo[vehicleid][acZAngle]);
			SetVehiclePos(vehicleid, ACVehInfo[vehicleid][acPosX], ACVehInfo[vehicleid][acPosY], ACVehInfo[vehicleid][acPosZ]);
			return 0;
		}
	#endif
	#undef PC_MAX_FLYHACK_VEH_WARNINGS
	#undef PC_MAX_CARSHOT_WARNINGS
	new PC_a = 1;
	#if defined PC_OnUnoccupiedVehicleUpdate
		#if defined OnTrailerUpdate
			PC_a = PC_OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, new_x, new_y, new_z, vel_x, vel_y, vel_z);
		#elseif defined GetServerTickRate
			PC_a = PC_OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, new_x, new_y, new_z);
		#else
			PC_a = PC_OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat);
		#endif
	#endif
	#if defined OnTrailerUpdate
		if(PC_a)
		{
			ACVehInfo[vehicleid][acSpeedDiff] = PC_GetSpeed(vel_x, vel_y, vel_z) - PC_GetSpeed(ACVehInfo[vehicleid][acVelX], ACVehInfo[vehicleid][acVelY], ACVehInfo[vehicleid][acVelZ]);
			ACVehInfo[vehicleid][acPosDiff] = PC_dist;
			ACVehInfo[vehicleid][acPosX] = new_x;
			ACVehInfo[vehicleid][acPosY] = new_y;
			ACVehInfo[vehicleid][acPosZ] = new_z;
			ACVehInfo[vehicleid][acVelX] = vel_x;
			ACVehInfo[vehicleid][acVelY] = vel_y;
			ACVehInfo[vehicleid][acVelZ] = vel_z;
		}
	#elseif defined GetServerTickRate
		if(PC_a)
		{
			ACVehInfo[vehicleid][acPosDiff] = PC_dist;
			ACVehInfo[vehicleid][acPosX] = new_x;
			ACVehInfo[vehicleid][acPosY] = new_y;
			ACVehInfo[vehicleid][acPosZ] = new_z;
		}
	#else
		GetVehicleZAngle(vehicleid, ACVehInfo[vehicleid][acZAngle]);
		ACVehInfo[vehicleid][acPosDiff] = PC_dist;
		ACVehInfo[vehicleid][acPosX] = PC_x;
		ACVehInfo[vehicleid][acPosY] = PC_y;
		ACVehInfo[vehicleid][acPosZ] = PC_z;
	#endif
	return PC_a;
}

#if defined _ALS_OnUnoccupiedVehicleUpdate
	#undef OnUnoccupiedVehicleUpdate
#else
	#define _ALS_OnUnoccupiedVehicleUpdate
#endif
#define OnUnoccupiedVehicleUpdate PC_OnUnoccupiedVehicleUpdate
#if defined PC_OnUnoccupiedVehicleUpdate
	#if defined OnTrailerUpdate
		forward PC_OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z);
	#elseif defined GetServerTickRate
		forward PC_OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z);
	#else
		forward PC_OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat);
	#endif
#endif

#if defined OnTrailerUpdate
	public OnTrailerUpdate(playerid, vehicleid)
	{
		if(ACInfo[playerid][acKicked] > 0) return 0;
		#if defined PC_OnTrailerUpdate
			return PC_OnTrailerUpdate(playerid, vehicleid);
		#else
			return 1;
		#endif
	}

	#if defined _ALS_OnTrailerUpdate
		#undef OnTrailerUpdate
	#else
		#define _ALS_OnTrailerUpdate
	#endif
	#define OnTrailerUpdate PC_OnTrailerUpdate
	#if defined PC_OnTrailerUpdate
		forward PC_OnTrailerUpdate(playerid, vehicleid);
	#endif
#endif

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(ACInfo[playerid][acKicked] > 0) return 1;
	if(ACInfo[playerid][acACAllow][46] && 384 <= modelid <= 393)
	{
		#if defined DEBUG
			printf("AC(debug): Object modelid: %d", modelid);
		#endif
		PC_KickWithCode(playerid, "", 0, 46);
		return 1;
	}
	#if defined PC_OnPlayerEditAttachedObject
		return PC_OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
	#else
		return 0;
	#endif
}

#if defined _ALS_OnPlayerEditAttachedObject
	#undef OnPlayerEditAttachedObject
#else
	#define _ALS_OnPlayerEditAttachedObject
#endif
#define OnPlayerEditAttachedObject PC_OnPlayerEditAttachedObject
#if defined PC_OnPlayerEditAttachedObject
	forward PC_OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ);
#endif

#if defined PAWNRAKNET_INC_
	public OnIncomingPacket(playerid, packetid, BitStream:bs)
	{
		if(ACInfo[playerid][acKicked] > 0) return 0;
		switch(packetid)
		{
			case 200:
			{
				if(ACInfo[playerid][acACAllow][44])
				{
					new PC_cData[PR_InCarSync];
					BS_IgnoreBits(bs, 8);
					BS_ReadInCarSync(bs, PC_cData);
					if(!(1 <= PC_cData[PR_vehicleId] < MAX_VEHICLES))
					{
						#if defined DEBUG
							printf("AC(debug): Veh: %d", PC_cData[PR_vehicleId]);
						#endif
						#if defined OnCheatDetected
							PC_KickWithCode(playerid, "", 0, 44, 7);
							if(ACInfo[playerid][acKicked] > 0) return 0;
						#else
							return PC_KickWithCode(playerid, "", 0, 44, 7);
						#endif
					}
					BS_ResetReadPointer(bs);
				}
			}
			case 203:
			{
				new PC_aData[PR_AimSync];
				BS_IgnoreBits(bs, 8);
				BS_ReadAimSync(bs, PC_aData);
				if(PC_aData[PR_aimZ] != PC_aData[PR_aimZ])
				{
					PC_aData[PR_aimZ] = 0.0;
					BS_SetWriteOffset(bs, 8);
					BS_WriteAimSync(bs, PC_aData);
					BS_ResetWritePointer(bs);
				}
				BS_ResetReadPointer(bs);
			}
			case 207:
			{
				new PC_fData[PR_OnFootSync];
				BS_IgnoreBits(bs, 8);
				BS_ReadOnFootSync(bs, PC_fData);
				if(PC_fData[PR_surfingOffsets][0] != PC_fData[PR_surfingOffsets][0] ||
				PC_fData[PR_surfingOffsets][1] != PC_fData[PR_surfingOffsets][1] ||
				PC_fData[PR_surfingOffsets][2] != PC_fData[PR_surfingOffsets][2])
				{
					PC_fData[PR_surfingOffsets][0] =
					PC_fData[PR_surfingOffsets][1] =
					PC_fData[PR_surfingOffsets][2] = 0.0;
					PC_fData[PR_surfingVehicleId] = 0;
					BS_SetWriteOffset(bs, 8);
					BS_WriteOnFootSync(bs, PC_fData);
					BS_ResetWritePointer(bs);
				}
				BS_ResetReadPointer(bs);
			}
			case 209:
			{
				new PC_uData[PR_UnoccupiedSync];
				BS_IgnoreBits(bs, 8);
				BS_ReadUnoccupiedSync(bs, PC_uData);
				if(PC_uData[PR_seatId] > 0 &&
				(PC_uData[PR_seatId] != GetPlayerVehicleSeat(playerid) || !IsPlayerInVehicle(playerid, PC_uData[PR_vehicleId])) ||
				PC_uData[PR_roll][0] != PC_uData[PR_roll][0] ||
				PC_uData[PR_roll][1] != PC_uData[PR_roll][1] ||
				PC_uData[PR_roll][2] != PC_uData[PR_roll][2] ||
				PC_uData[PR_direction][0] != PC_uData[PR_direction][0] ||
				PC_uData[PR_direction][1] != PC_uData[PR_direction][1] ||
				PC_uData[PR_direction][2] != PC_uData[PR_direction][2] ||
				PC_uData[PR_angularVelocity][0] != PC_uData[PR_angularVelocity][0] ||
				PC_uData[PR_angularVelocity][1] != PC_uData[PR_angularVelocity][1] ||
				PC_uData[PR_angularVelocity][2] != PC_uData[PR_angularVelocity][2] ||
				floatabs(PC_uData[PR_roll][0]) >= 1.0 ||
				floatabs(PC_uData[PR_roll][1]) >= 1.0 ||
				floatabs(PC_uData[PR_roll][2]) >= 1.0 ||
				floatabs(PC_uData[PR_direction][0]) >= 1.0 ||
				floatabs(PC_uData[PR_direction][1]) >= 1.0 ||
				floatabs(PC_uData[PR_direction][2]) >= 1.0 ||
				floatabs(PC_uData[PR_angularVelocity][0]) >= 1.0 ||
				floatabs(PC_uData[PR_angularVelocity][1]) >= 1.0 ||
				floatabs(PC_uData[PR_angularVelocity][2]) >= 1.0) return 0;
				BS_ResetReadPointer(bs);
			}
			case 210:
			{
				new PC_tData[PR_TrailerSync];
				BS_IgnoreBits(bs, 8);
				BS_ReadTrailerSync(bs, PC_tData);
				if(!(1 <= PC_tData[PR_trailerId] < MAX_VEHICLES) ||
				ACVehInfo[PC_tData[PR_trailerId]][acDriver] != INVALID_PLAYER_ID) return 0;
				else if(ACInfo[playerid][acACAllow][5])
				{
					new Float:PC_dist = GetVehicleDistanceFromPoint(PC_tData[PR_trailerId], PC_tData[PR_position][0], PC_tData[PR_position][1], PC_tData[PR_position][2]);
					if(PC_dist >= 80.0)
					{
						new Float:PC_x, Float:PC_y, Float:PC_z;
						GetVehiclePos(PC_tData[PR_trailerId], PC_x, PC_y, PC_z);
						#if defined DEBUG
							printf("AC(debug): Dist: %f, old pos z: %f, veh: %d, playerid: %d",
							PC_dist, PC_z, PC_tData[PR_trailerId], playerid);
						#endif
						#if defined OnCheatDetected
							PC_KickWithCode(playerid, "", 0, 5, 2);
						#endif
						GetVehicleZAngle(PC_tData[PR_trailerId], ACVehInfo[PC_tData[PR_trailerId]][acZAngle]);
						#if defined SetVehicleFakeZAngleForPlayer
							SetVehicleFakeZAngleForPlayer(playerid, PC_tData[PR_trailerId], ACVehInfo[PC_tData[PR_trailerId]][acZAngle]);
						#else
							SetVehicleZAngle(PC_tData[PR_trailerId], ACVehInfo[PC_tData[PR_trailerId]][acZAngle]);
						#endif
						#if defined SetVehicleFakePosForPlayer
							SetVehicleFakePosForPlayer(playerid, PC_tData[PR_trailerId], PC_x, PC_y, PC_z);
						#else
							SetVehiclePos(PC_tData[PR_trailerId], PC_x, PC_y, PC_z);
						#endif
						return 0;
					}
				}
				BS_ResetReadPointer(bs);
			}
			case 211:
			{
				if(ACInfo[playerid][acACAllow][44])
				{
					new PC_pData[PR_PassengerSync];
					BS_IgnoreBits(bs, 8);
					BS_ReadPassengerSync(bs, PC_pData);
					if(PC_pData[PR_seatId] < 1 || !(1 <= PC_pData[PR_vehicleId] < MAX_VEHICLES))
					{
						#if defined DEBUG
							printf("AC(debug): AC seat: %d, seat: %d, veh: %d",
							ACInfo[playerid][acSeat], PC_pData[PR_seatId], PC_pData[PR_vehicleId]);
						#endif
						#if defined OnCheatDetected
							PC_KickWithCode(playerid, "", 0, 44, 6);
							if(ACInfo[playerid][acKicked] > 0) return 0;
						#else
							return PC_KickWithCode(playerid, "", 0, 44, 6);
						#endif
					}
					BS_ResetReadPointer(bs);
				}
			}
		}
		#if defined PC_OnIncomingPacket
			return PC_OnIncomingPacket(playerid, packetid, bs);
		#else
			return 1;
		#endif
	}

	#if defined _ALS_OnIncomingPacket
		#undef OnIncomingPacket
	#else
		#define _ALS_OnIncomingPacket
	#endif
	#define OnIncomingPacket PC_OnIncomingPacket
	#if defined PC_OnIncomingPacket
		forward PC_OnIncomingPacket(playerid, packetid, BitStream:bs);
	#endif

	public OnIncomingRPC(playerid, rpcid, BitStream:bs)
	{
		if(ACInfo[playerid][acKicked] > 0 && ACInfo[playerid][acOnline]) return 0;
		#if defined PC_OnIncomingRPC
			return PC_OnIncomingRPC(playerid, rpcid, bs);
		#else
			return 1;
		#endif
	}

	#if defined _ALS_OnIncomingRPC
		#undef OnIncomingRPC
	#else
		#define _ALS_OnIncomingRPC
	#endif
	#define OnIncomingRPC PC_OnIncomingRPC
	#if defined PC_OnIncomingRPC
		forward PC_OnIncomingRPC(playerid, rpcid, BitStream:bs);
	#endif

	static SetVehicleFakePosForPlayer(playerid, vehicleid, Float:x, Float:y, Float:z)
	{
		if(!IsPlayerConnected(playerid) || GetVehicleModel(vehicleid) <= 0) return 0;
		new BitStream:bs = BS_New();
		BS_WriteValue(bs, PR_UINT16, vehicleid, PR_FLOAT, x, PR_FLOAT, y, PR_FLOAT, z);
		#if defined BS_SendRPC
			BS_SendRPC(bs, playerid, 159);
		#else
			BS_RPC(bs, playerid, 159);
		#endif
		BS_Delete(bs);
		return 1;
	}

	static SetVehicleFakeZAngleForPlayer(playerid, vehicleid, Float:z_angle)
	{
		if(!IsPlayerConnected(playerid) || GetVehicleModel(vehicleid) <= 0) return 0;
		new BitStream:bs = BS_New();
		BS_WriteValue(bs, PR_UINT16, vehicleid, PR_FLOAT, z_angle);
		#if defined BS_SendRPC
			BS_SendRPC(bs, playerid, 160);
		#else
			BS_RPC(bs, playerid, 160);
		#endif
		BS_Delete(bs);
		return 1;
	}
#endif

PC_fpublic PC_Timer(playerid)
{
	if(!IsPlayerConnected(playerid) || ACInfo[playerid][acKicked] > 0) return 0;
	new PC_gpp;
	#if defined NetStats_MessagesRecvPerSecond
		if(ACInfo[playerid][acACAllow][51] && (PC_gpp = NetStats_MessagesRecvPerSecond(playerid)) > PC_MAX_MSGS_REC_DIFF)
		{
			#if defined DEBUG
				printf("AC(debug): Max msgs per sec: %d, msgs per sec: %d", PC_MAX_MSGS_REC_DIFF, PC_gpp);
			#endif
			PC_KickWithCode(playerid, "", 0, 51);
		}
	#endif
	#undef PC_MAX_MSGS_REC_DIFF
	PC_gpp = GetPlayerPing(playerid);
	if(ACInfo[playerid][acACAllow][38])
	{
		if(PC_gpp > PC_MAX_PING && PC_gpp != 65535)
		{
			if(++ACInfo[playerid][acCheatCount][0] > PC_MAX_PING_WARNINGS)
			{
				#if defined DEBUG
					printf("AC(debug): Max ping: %d, ping: %d", PC_MAX_PING, PC_gpp);
				#endif
				#undef PC_MAX_PING
				#undef PC_MAX_PING_WARNINGS
				PC_KickWithCode(playerid, "", 0, 38);
				#if defined OnCheatDetected
					ACInfo[playerid][acCheatCount][0] = 0;
				#endif
			}
			#if defined OnCheatWarning
				else OnCheatWarning(playerid, "", 0, 38, 0, ACInfo[playerid][acCheatCount][0]);
			#endif
		}
		else ACInfo[playerid][acCheatCount][0] = 0;
	}
	new PC_gtc = GetTickCount();
	if(PC_gtc < ACInfo[playerid][acUpdateTick] + 1500)
	{
		new PC_t, PC_s;
		#if PC_USE_AMMUNATIONS || PC_USE_CASINOS
			new PC_int = GetPlayerInterior(playerid);
		#endif
		#if PC_USE_PICKUP_WEAPONS\
			&& defined Streamer_GetDistanceToItem\
			&& defined Streamer_GetIntData
			new Float:PC_pick_dist;
			if(ACInfo[playerid][acLastPickup] > MAX_PICKUPS)
			{
				new Float:PC_x, Float:PC_y, Float:PC_z;
				GetPlayerPos(playerid, PC_x, PC_y, PC_z);
				Streamer_GetDistanceToItem(PC_x, PC_y, PC_z, STREAMER_TYPE_PICKUP, ACInfo[playerid][acLastPickup] - MAX_PICKUPS, PC_pick_dist);
				PC_t = Streamer_GetIntData(STREAMER_TYPE_PICKUP, ACInfo[playerid][acLastPickup] - MAX_PICKUPS, E_STREAMER_EXTRA_ID) - 100;
			}
		#endif
		if(!ACInfo[playerid][acDead] && (PC_s = GetPlayerWeapon(playerid)) != -1 && PC_gtc > ACInfo[playerid][acGtc][7] + PC_gpp)
		{
			#if PC_USE_AMMUNATIONS
				new PC_m;
			#endif
			PC_s = PC_wSlot[PC_s];
			for(new PC_i, PC_w, PC_a, bool:PC_cw; PC_i <= 12; ++PC_i)
			{
				GetPlayerWeaponData(playerid, PC_i, PC_w, PC_a);
				if(PC_w == 39) PC_cw = true;
				if(PC_s != PC_i)
				{
					if(ACInfo[playerid][acSetWeapon][PC_i] != -1)
					{
						if(ACInfo[playerid][acSetWeapon][PC_i] == PC_w)
						{
							if(ACInfo[playerid][acSet][3] == PC_w) ACInfo[playerid][acSet][3] = -1;
							ACInfo[playerid][acSetWeapon][PC_i] = -1;
							ACInfo[playerid][acWeapon][PC_i] = PC_w;
						}
						else if(PC_gtc > ACInfo[playerid][acGtcSetWeapon][PC_i] + PC_gpp)
						{
							#if defined _inc_fixes
							if(ACInfo[playerid][acACAllow][52] && ACInfo[playerid][acNOPAllow][0] &&
							ACInfo[playerid][acGiveAmmo][PC_i] != 0)
							#else
							if(ACInfo[playerid][acACAllow][52] && ACInfo[playerid][acNOPAllow][0])
							#endif
							{
								if(++ACInfo[playerid][acNOPCount][0] > PC_MAX_NOP_TIMER_WARNINGS)
								{
									#if defined DEBUG
										printf(DEBUG_CODE_5, playerid, "GivePlayerWeapon");
										printf("AC(debug): AC weapon: %d, weaponid: %d", ACInfo[playerid][acSetWeapon][PC_i], PC_w);
									#endif
									PC_KickWithCode(playerid, "", 0, 52, 13);
									#if defined OnCheatDetected
										if(ACInfo[playerid][acSet][3] == ACInfo[playerid][acSetWeapon][PC_i]) ACInfo[playerid][acSet][3] = -1;
										ACInfo[playerid][acSetWeapon][PC_i] = -1;
									#endif
								}
								#if defined OnNOPWarning
									else OnNOPWarning(playerid, 13, ACInfo[playerid][acNOPCount][0]);
								#endif
							}
							else if(++ACInfo[playerid][acNOPCount][0] > PC_MAX_NOP_TIMER_WARNINGS)
							{
								if(ACInfo[playerid][acSet][3] == ACInfo[playerid][acSetWeapon][PC_i]) ACInfo[playerid][acSet][3] = -1;
								ACInfo[playerid][acSetWeapon][PC_i] = -1;
							}
						}
					}
					else
					{
						if(ACInfo[playerid][acWeapon][PC_i] != PC_w)
						{
							#if PC_USE_PICKUP_WEAPONS
								#if defined Streamer_GetDistanceToItem\
									&& defined Streamer_GetIntData
								if(0 <= ACInfo[playerid][acLastPickup] < MAX_PICKUPS &&
								ACPickInfo[ACInfo[playerid][acLastPickup]][acWeapon] == PC_w &&
								PC_a <= (3 <= PC_i <= 5 ? (ACInfo[playerid][acAmmo][PC_i] + PC_pAmmo[PC_w]) : PC_pAmmo[PC_w]) &&
								IsPlayerInRangeOfPoint(playerid, 15.0, ACPickInfo[ACInfo[playerid][acLastPickup]][acPosX],
								ACPickInfo[ACInfo[playerid][acLastPickup]][acPosY], ACPickInfo[ACInfo[playerid][acLastPickup]][acPosZ]) ||
								ACInfo[playerid][acLastPickup] > MAX_PICKUPS && PC_t == PC_w &&
								PC_a <= (3 <= PC_i <= 5 ? (ACInfo[playerid][acAmmo][PC_i] + PC_pAmmo[PC_w]) : PC_pAmmo[PC_w]) && PC_pick_dist <= 15.0)
								#else
								if(0 <= ACInfo[playerid][acLastPickup] < MAX_PICKUPS &&
								ACPickInfo[ACInfo[playerid][acLastPickup]][acWeapon] == PC_w &&
								PC_a <= (3 <= PC_i <= 5 ? (ACInfo[playerid][acAmmo][PC_i] + PC_pAmmo[PC_w]) : PC_pAmmo[PC_w]) &&
								IsPlayerInRangeOfPoint(playerid, 15.0, ACPickInfo[ACInfo[playerid][acLastPickup]][acPosX],
								ACPickInfo[ACInfo[playerid][acLastPickup]][acPosY], ACPickInfo[ACInfo[playerid][acLastPickup]][acPosZ]))
								#endif
								{
									ACInfo[playerid][acWeapon][PC_i] = PC_w;
									ACInfo[playerid][acAmmo][PC_i] = PC_a;
								}
								else
								{
							#endif
								if(PC_w == 0 || PC_w == 40 && PC_cw ||
								PC_w == 46 && ACInfo[playerid][acVeh] > 0 && ACInfo[playerid][acParachute] > 0)
								{
									ACInfo[playerid][acWeapon][PC_i] = PC_w;
									ACInfo[playerid][acAmmo][PC_i] = PC_a;
									ACInfo[playerid][acParachute] = 0;
								}
								else if(ACInfo[playerid][acACAllow][15] && !(16 <= PC_w <= 43 && PC_a == 0))
								{
									#if defined DEBUG
										printf("AC(debug): AC weaponid: %d, AC ammo: %d, weaponid: %d, ammo: %d",
										ACInfo[playerid][acWeapon][PC_i], ACInfo[playerid][acAmmo][PC_i], PC_w, PC_a);
									#endif
									PC_KickWithCode(playerid, "", 0, 15, 2);
									#if defined OnCheatDetected
										if(ACInfo[playerid][acKicked] < 1)
										{
											ACInfo[playerid][acWeapon][PC_i] = PC_w;
											ACInfo[playerid][acAmmo][PC_i] = PC_a;
										}
									#endif
								}
							#if PC_USE_PICKUP_WEAPONS
								}
							#endif
							#undef PC_USE_PICKUP_WEAPONS
						}
						if(ACInfo[playerid][acGiveAmmo][PC_i] != -65535)
						{
							if(ACInfo[playerid][acGiveAmmo][PC_i] == PC_a ||
							ACInfo[playerid][acGiveAmmo][PC_i] > PC_a && !(PC_a < 0 <= ACInfo[playerid][acGiveAmmo][PC_i]) &&
							PC_gtc > ACInfo[playerid][acGtcGiveAmmo][PC_i] + PC_gpp)
							{
								ACInfo[playerid][acGiveAmmo][PC_i] = -65535;
								ACInfo[playerid][acAmmo][PC_i] = PC_a;
							}
							else if(PC_gtc > ACInfo[playerid][acGtcGiveAmmo][PC_i] + PC_gpp)
							{
								if(ACInfo[playerid][acACAllow][52] && ACInfo[playerid][acNOPAllow][1])
								{
									if(++ACInfo[playerid][acNOPCount][1] > PC_MAX_NOP_TIMER_WARNINGS)
									{
										#if defined DEBUG
											printf(DEBUG_CODE_5, playerid, "SetPlayerAmmo");
											printf("AC(debug): AC ammo: %d, ammo: %d, weaponid: %d",
											ACInfo[playerid][acGiveAmmo][PC_i], PC_a, PC_w);
										#endif
										PC_KickWithCode(playerid, "", 0, 52, 14);
										#if defined OnCheatDetected
											ACInfo[playerid][acGiveAmmo][PC_i] = -65535;
										#endif
									}
									#if defined OnNOPWarning
										else OnNOPWarning(playerid, 14, ACInfo[playerid][acNOPCount][1]);
									#endif
								}
								else if(++ACInfo[playerid][acNOPCount][1] > PC_MAX_NOP_TIMER_WARNINGS) ACInfo[playerid][acGiveAmmo][PC_i] = -65535;
							}
						}
						else if(16 <= PC_w <= 43)
						{
							if(PC_a == 0) ACInfo[playerid][acAmmo][PC_i] = 0;
							else if(ACInfo[playerid][acACAllow][16] && PC_w != 40 &&
							(PC_a > ACInfo[playerid][acAmmo][PC_i] || PC_a < 0 <= ACInfo[playerid][acAmmo][PC_i]) &&
							(!PC_LagCompMode || !PC_IsBulletWeapon(PC_w) || PC_gtc > ACInfo[playerid][acShotTick] + 3650))
							{
								#if defined DEBUG
									printf("AC(debug): AC ammo: %d, ammo: %d, weaponid: %d",
									ACInfo[playerid][acAmmo][PC_i], PC_a, PC_w);
								#endif
								PC_KickWithCode(playerid, "", 0, 16, 2);
								#if defined OnCheatDetected
									if(ACInfo[playerid][acKicked] < 1) ACInfo[playerid][acAmmo][PC_i] = PC_a;
								#endif
							}
						}
					}
				}
				else if(PC_IsBulletWeapon(PC_w))
				{
					if(PC_a > ACInfo[playerid][acAmmo][PC_i] || PC_a < 0 <= ACInfo[playerid][acAmmo][PC_i])
					{
						if(ACInfo[playerid][acGiveAmmo][PC_i] == -65535)
						{
							#if PC_USE_AMMUNATIONS
								if(PC_w <= 32 && PC_InAmmuNation(playerid, PC_int) &&
								(PC_m = PC_a - ACInfo[playerid][acAmmo][PC_i]) % PC_AmmuNationInfo[PC_w - 22][1] == 0)
								{
									if(ACInfo[playerid][acSet][10] != -1) ACInfo[playerid][acSet][10] += PC_AmmuNationInfo[PC_w - 22][0] * (PC_m / PC_AmmuNationInfo[PC_w - 22][1]);
									else ACInfo[playerid][acSet][10] = PC_AmmuNationInfo[PC_w - 22][0] * (PC_m / PC_AmmuNationInfo[PC_w - 22][1]);
									ACInfo[playerid][acAmmo][PC_i] += PC_m;
									ACInfo[playerid][acGtc][15] = PC_gtc + 2650;
									ACInfo[playerid][acCheatCount][10] = 0;
								}
								else
								{
							#endif
								if(ACInfo[playerid][acACAllow][16] && (!PC_LagCompMode || PC_gtc > ACInfo[playerid][acShotTick] + 3650))
								{
									#if defined DEBUG
										printf("AC(debug): AC ammo: %d, ammo: %d, weaponid: %d",
										ACInfo[playerid][acAmmo][PC_i], PC_a, PC_w);
									#endif
									PC_KickWithCode(playerid, "", 0, 16, 3);
									#if defined OnCheatDetected
										if(ACInfo[playerid][acKicked] < 1) ACInfo[playerid][acAmmo][PC_i] = PC_a;
									#endif
								}
							#if PC_USE_AMMUNATIONS
								}
							#endif
						}
					}
					else if(ACInfo[playerid][acAmmo][PC_i] != 0) ACInfo[playerid][acAmmo][PC_i] = PC_a;
				}
			}
		}
		if((PC_s = GetPlayerState(playerid)) == PLAYER_STATE_DRIVER)
		{
			PC_t = GetPlayerVehicleID(playerid);
			new Float:PC_pX, Float:PC_pY, Float:PC_pZ, Float:PC_vX, Float:PC_vY, Float:PC_vZ;
			GetPlayerPos(playerid, PC_pX, PC_pY, PC_pZ);
			GetVehicleVelocity(PC_t, PC_vX, PC_vY, PC_vZ);
			if(ACInfo[playerid][acACAllow][35] && GetPlayerCameraMode(playerid) == 55) PC_KickWithCode(playerid, "", 0, 35);
			if(ACInfo[playerid][acACAllow][3] && ACInfo[playerid][acSet][9] == -1)
			{
				new Float:PC_time, Float:PC_maxdist = 140.0,
				Float:PC_dist = GetPlayerDistanceFromPoint(playerid, ACInfo[playerid][acLastPosX], ACInfo[playerid][acLastPosY], PC_pZ),
				Float:PC_dist_set = GetPlayerDistanceFromPoint(playerid, ACInfo[playerid][acSetPosX], ACInfo[playerid][acSetPosY], PC_pZ);
				if((PC_time = (PC_gtc - ACInfo[playerid][acTimerTick]) / 1000.0) > 1.0) PC_maxdist *= PC_time;
				if(PC_dist >= PC_maxdist && (ACInfo[playerid][acSet][8] == -1 || PC_dist_set >= PC_maxdist))
				{
					#if defined DEBUG
						printf("AC(debug): Dist: %f, dist set: %f, acSet[8]: %d, speed: %d, veh: %d",
						PC_dist, PC_dist_set, ACInfo[playerid][acSet][8], PC_GetSpeed(PC_vX, PC_vY, PC_vZ), PC_t);
					#endif
					PC_KickWithCode(playerid, "", 0, 3, 3);
				}
			}
			ACInfo[playerid][acLastPosX] = PC_pX;
			ACInfo[playerid][acLastPosY] = PC_pY;
			PC_s = PC_GetSpeed(PC_vX, PC_vY);
			if(ACInfo[playerid][acACAllow][10] && PC_gtc > ACInfo[playerid][acGtc][9] + PC_gpp)
			{
				new PC_model = GetVehicleModel(PC_t), Float:PC_time, PC_maxdiff = 80;
				if((PC_time = (PC_gtc - ACInfo[playerid][acTimerTick]) / 1100.0) > 1.0) PC_maxdiff = floatround(PC_maxdiff * PC_time);
				if(PC_s >= ACVehInfo[PC_t][acLastSpeed] + PC_maxdiff && PC_model != 449 && !PC_IsATrainLoco(PC_model))
				{
					ACInfo[playerid][acCheatCount][20] += (1 * PC_SPEEDHACK_VEH_RESET_DELAY);
					if(ACInfo[playerid][acCheatCount][20] > PC_MAX_SPEEDHACK_VEH_WARNINGS)
					{
						#undef PC_MAX_SPEEDHACK_VEH_WARNINGS
						#if defined DEBUG
							printf("AC(debug): Speed: %d, last speed: %d, veh model: %d",
							PC_s, ACVehInfo[PC_t][acLastSpeed], PC_model);
						#endif
						PC_KickWithCode(playerid, "", 0, 10, 4);
						#if defined OnCheatDetected
							ACInfo[playerid][acCheatCount][20] = 0;
						#endif
					}
					#if defined OnCheatWarning
						else OnCheatWarning(playerid, "", 0, 10, 4, floatround(ACInfo[playerid][acCheatCount][20] / PC_SPEEDHACK_VEH_RESET_DELAY));
					#endif
					#undef PC_SPEEDHACK_VEH_RESET_DELAY
				}
			}
			ACVehInfo[PC_t][acLastSpeed] = PC_s;
		}
		else if(PC_s == PLAYER_STATE_ONFOOT)
		{
			new Float:PC_pX, Float:PC_pY, Float:PC_pZ;
			GetPlayerPos(playerid, PC_pX, PC_pY, PC_pZ);
			if(ACInfo[playerid][acACAllow][2] && ACInfo[playerid][acSet][9] == -1 &&
			!IsVehicleStreamedIn(GetPlayerSurfingVehicleID(playerid), playerid) &&
			GetPlayerSurfingObjectID(playerid) == INVALID_OBJECT_ID)
			{
				new Float:PC_time, Float:PC_maxdist = 80.0,
				Float:PC_dist = GetPlayerDistanceFromPoint(playerid, ACInfo[playerid][acLastPosX], ACInfo[playerid][acLastPosY], PC_pZ),
				Float:PC_dist_set = GetPlayerDistanceFromPoint(playerid, ACInfo[playerid][acSetPosX], ACInfo[playerid][acSetPosY], PC_pZ);
				if((PC_time = (PC_gtc - ACInfo[playerid][acTimerTick]) / 1000.0) > 1.0) PC_maxdist *= PC_time;
				if(PC_dist >= PC_maxdist && (ACInfo[playerid][acSet][8] == -1 || PC_dist_set >= PC_maxdist))
				{
					#if defined DEBUG
						new Float:PC_vX, Float:PC_vY, Float:PC_vZ;
						GetPlayerVelocity(playerid, PC_vX, PC_vY, PC_vZ);
						printf("AC(debug): Dist: %f, dist set: %f, acSet[8]: %d, speed: %d, old pos x, y: %f, %f",
						PC_dist, PC_dist_set, ACInfo[playerid][acSet][8], PC_GetSpeed(PC_vX, PC_vY, PC_vZ), ACInfo[playerid][acLastPosX], ACInfo[playerid][acLastPosY]);
					#endif
					PC_KickWithCode(playerid, "", 0, 2, 6);
				}
			}
			ACInfo[playerid][acLastPosX] = PC_pX;
			ACInfo[playerid][acLastPosY] = PC_pY;
		}
		PC_t = orig_GetPlayerMoney(playerid);
		#if PC_USE_AMMUNATIONS
			if(ACInfo[playerid][acSet][10] != -1)
			{
				if(PC_t < ACInfo[playerid][acMoney] &&
				ACInfo[playerid][acSet][10] <= ACInfo[playerid][acMoney] - PC_t) ACInfo[playerid][acSet][10] = -1;
				else if(PC_gtc > ACInfo[playerid][acGtc][15] + PC_gpp)
				{
					if(ACInfo[playerid][acACAllow][15])
					{
						if(++ACInfo[playerid][acCheatCount][10] > PC_MAX_NOP_TIMER_WARNINGS)
						{
							#if defined DEBUG
								printf("AC(debug): Money: %d, old money: %d, price: %d",
								PC_t, ACInfo[playerid][acMoney], ACInfo[playerid][acSet][10]);
							#endif
							PC_KickWithCode(playerid, "", 0, 15, 4);
							#if defined OnCheatDetected
								ACInfo[playerid][acSet][10] = -1;
							#endif
						}
						#if defined OnCheatWarning
							else OnCheatWarning(playerid, "", 0, 15, 4, ACInfo[playerid][acCheatCount][10]);
						#endif
					}
					else if(++ACInfo[playerid][acCheatCount][10] > PC_MAX_NOP_TIMER_WARNINGS) ACInfo[playerid][acSet][10] = -1;
				}
			}
		#endif
		#if PC_USE_TUNING_GARAGES
			if(ACInfo[playerid][acSet][12] != -1)
			{
				if(PC_t < ACInfo[playerid][acMoney] &&
				ACInfo[playerid][acSet][12] <= ACInfo[playerid][acMoney] - PC_t) ACInfo[playerid][acSet][12] = -1;
				else if(PC_gtc > ACInfo[playerid][acGtc][17] + PC_gpp)
				{
					if(ACInfo[playerid][acACAllow][23])
					{
						if(++ACInfo[playerid][acCheatCount][12] > PC_MAX_NOP_TIMER_WARNINGS)
						{
							#if defined DEBUG
								printf("AC(debug): Money: %d, old money: %d, component price: %d",
								PC_t, ACInfo[playerid][acMoney], ACInfo[playerid][acSet][12]);
							#endif
							PC_KickWithCode(playerid, "", 0, 23, 6);
							#if defined OnCheatDetected
								ACInfo[playerid][acSet][12] = -1;
							#endif
						}
						#if defined OnCheatWarning
							else OnCheatWarning(playerid, "", 0, 23, 6, ACInfo[playerid][acCheatCount][12]);
						#endif
					}
					else if(++ACInfo[playerid][acCheatCount][12] > PC_MAX_NOP_TIMER_WARNINGS) ACInfo[playerid][acSet][12] = -1;
				}
			}
		#endif
		#undef PC_USE_TUNING_GARAGES
		#undef PC_MAX_NOP_TIMER_WARNINGS
		if(ACInfo[playerid][acNOPCount][11] > 0) ACInfo[playerid][acNOPCount][11]--;
		else
		{
			if(ACInfo[playerid][acACAllow][14] && PC_t > ACInfo[playerid][acMoney] &&
			(!ACInfo[playerid][acStuntBonus] || ACInfo[playerid][acVeh] == 0 && PC_gtc > ACInfo[playerid][acGtc][18] + PC_gpp))
			{
				#if PC_USE_CASINOS
					if(!PC_InCasino(playerid, PC_int))
					{
				#endif
					#if defined DEBUG
						printf("AC(debug): AC money: %d, money: %d, stunt bonus: %d, veh: %d, playerid: %d",
						ACInfo[playerid][acMoney], PC_t, ACInfo[playerid][acStuntBonus], ACInfo[playerid][acVeh], playerid);
					#endif
					#if defined OnCheatDetected
						PC_KickWithCode(playerid, "", 0, 14);
					#endif
					PC_t = ACInfo[playerid][acMoney];
					ResetPlayerMoney(playerid);
					GivePlayerMoney(playerid, PC_t);
				#if PC_USE_CASINOS
					}
				#endif
			}
			ACInfo[playerid][acMoney] = PC_t;
		}
	}
	else if(ACInfo[playerid][acSet][11] != -1) ACInfo[playerid][acGtc][8] += (PC_gtc - ACInfo[playerid][acTimerTick]);
	else if(PC_gtc <= ACInfo[playerid][acGtc][10] + PC_gpp) ACInfo[playerid][acGtc][10] += (PC_gtc - ACInfo[playerid][acTimerTick]);
	else if(PC_gtc <= ACInfo[playerid][acGtc][9] + PC_gpp) ACInfo[playerid][acGtc][9] += (PC_gtc - ACInfo[playerid][acTimerTick]);
	else if(PC_gtc <= ACInfo[playerid][acGtc][7] + PC_gpp) ACInfo[playerid][acGtc][7] += (PC_gtc - ACInfo[playerid][acTimerTick]);
	ACInfo[playerid][acCheatCount][1] = ACInfo[playerid][acCheatCount][2] = ACInfo[playerid][acCheatCount][21] = 0;
	if(ACInfo[playerid][acCheatCount][16] > 0) ACInfo[playerid][acCheatCount][16]--;
	if(ACInfo[playerid][acCheatCount][20] > 0) ACInfo[playerid][acCheatCount][20]--;
	if(ACInfo[playerid][acKicked] < 1)
	{
		ACInfo[playerid][acTimerTick] = PC_gtc;
		ACInfo[playerid][acTimerID] = SetTimerEx("PC_Timer", 1000, false, "i", playerid);
	}
	return 1;
}

#if !defined OnCheatDetected
	//Don't make changes in this public
	//To customize punishments, declare 'OnCheatDetected' in your script
	PC_fpublic PC_OnCheatDetected(playerid, const ip_address[], type, code)
	{
		if(type)
		{
			#if defined BlockIpAddress
				BlockIpAddress(ip_address, 0);
			#else
				new PC_strtmp[32];
				format(PC_strtmp, sizeof PC_strtmp, "banip %s", ip_address);
				SendRconCommand(PC_strtmp);
			#endif
		}
		else
		{
			switch(code)
			{
				case 40: SendClientMessage(playerid, PC_DEFAULT_COLOR, MAX_CONNECTS_MSG);
				case 41: SendClientMessage(playerid, PC_DEFAULT_COLOR, UNKNOWN_CLIENT_MSG);
				default:
				{
					static PC_strtmp[sizeof KICK_MSG];
					format(PC_strtmp, sizeof PC_strtmp, KICK_MSG, code);
					SendClientMessage(playerid, PC_DEFAULT_COLOR, PC_strtmp);
					#undef PC_DEFAULT_COLOR
				}
			}
			AntiCheatKickWithDesync(playerid, code);
		}
		return 1;
	}
#endif

PC_fpublic PC_KickTimer(playerid) return Kick(playerid);

#undef PC_fpublic

stock AntiCheatGetHealth(playerid, &Float:health)
{
	if(!IsPlayerConnected(playerid)) return 0;
	health = ACInfo[playerid][acHealth];
	return 1;
}

stock AntiCheatGetArmour(playerid, &Float:armour)
{
	if(!IsPlayerConnected(playerid)) return 0;
	armour = ACInfo[playerid][acArmour];
	return 1;
}

stock AntiCheatGetVehicleHealth(vehicleid, &Float:health)
{
	if(GetVehicleModel(vehicleid) <= 0) return 0;
	health = ACVehInfo[vehicleid][acHealth];
	return 1;
}

stock AntiCheatGetWeaponData(playerid, slot, &weapons, &ammo)
{
	if(!IsPlayerConnected(playerid)) return 0;
	if(!(0 <= slot <= 12)) return -1;
	weapons = ACInfo[playerid][acWeapon][slot];
	ammo = ACInfo[playerid][acAmmo][slot];
	return 1;
}

stock AntiCheatGetSpawnPos(playerid, &Float:x, &Float:y, &Float:z)
{
	if(!IsPlayerConnected(playerid)) return 0;
	x = ACInfo[playerid][acSpawnPosX];
	y = ACInfo[playerid][acSpawnPosY];
	z = ACInfo[playerid][acSpawnPosZ];
	return 1;
}

stock AntiCheatGetSpawnWeapon(playerid, &weapon1, &weapon1_ammo, &weapon2, &weapon2_ammo, &weapon3, &weapon3_ammo)
{
	if(!IsPlayerConnected(playerid)) return 0;
	weapon1 = ACInfo[playerid][acSpawnWeapon1];
	weapon1_ammo = ACInfo[playerid][acSpawnAmmo1];
	weapon2 = ACInfo[playerid][acSpawnWeapon2];
	weapon2_ammo = ACInfo[playerid][acSpawnAmmo2];
	weapon3 = ACInfo[playerid][acSpawnWeapon3];
	weapon3_ammo = ACInfo[playerid][acSpawnAmmo3];
	return 1;
}

stock AntiCheatGetPos(playerid, &Float:x, &Float:y, &Float:z)
{
	if(!IsPlayerConnected(playerid)) return 0;
	x = ACInfo[playerid][acPosX];
	y = ACInfo[playerid][acPosY];
	z = ACInfo[playerid][acPosZ];
	return 1;
}

stock AntiCheatGetVehicleVelocity(vehicleid, &Float:x, &Float:y, &Float:z)
{
	if(GetVehicleModel(vehicleid) <= 0) return 0;
	x = ACVehInfo[vehicleid][acVelX];
	y = ACVehInfo[vehicleid][acVelY];
	z = ACVehInfo[vehicleid][acVelZ];
	return 1;
}

stock AntiCheatGetVehiclePos(vehicleid, &Float:x, &Float:y, &Float:z)
{
	if(GetVehicleModel(vehicleid) <= 0) return 0;
	x = ACVehInfo[vehicleid][acPosX];
	y = ACVehInfo[vehicleid][acPosY];
	z = ACVehInfo[vehicleid][acPosZ];
	return 1;
}

stock AntiCheatGetVehicleZAngle(vehicleid, &Float:z_angle)
{
	if(GetVehicleModel(vehicleid) <= 0) return 0;
	z_angle = ACVehInfo[vehicleid][acZAngle];
	return 1;
}

stock AntiCheatGetVehicleSpawnPos(vehicleid, &Float:x, &Float:y, &Float:z)
{
	if(GetVehicleModel(vehicleid) <= 0) return 0;
	x = ACVehInfo[vehicleid][acSpawnPosX];
	y = ACVehInfo[vehicleid][acSpawnPosY];
	z = ACVehInfo[vehicleid][acSpawnPosZ];
	return 1;
}

stock AntiCheatGetVehicleSpawnZAngle(vehicleid, &Float:z_angle)
{
	if(GetVehicleModel(vehicleid) <= 0) return 0;
	z_angle = ACVehInfo[vehicleid][acSpawnZAngle];
	return 1;
}

static PC_IsAnAircraft(modelid) return (modelid > 0 && 1 <= PC_vType[modelid - 400] <= 2);

static PC_IsABoat(modelid) return (modelid > 0 && PC_vType[modelid - 400] == 3);

static PC_IsABmx(modelid) return (modelid > 0 && PC_vType[modelid - 400] == 4);

static PC_IsABike(modelid) return (modelid > 0 && 4 <= PC_vType[modelid - 400] <= 5);

static PC_IsABus(modelid) return (modelid > 0 && PC_vType[modelid - 400] == 6);

static PC_IsATrainLoco(modelid) return (modelid > 0 && PC_vType[modelid - 400] == 8);

static PC_IsATrainCarriage(modelid) return (modelid > 0 && PC_vType[modelid - 400] == 9);

static PC_IsATrainPart(modelid) return (modelid > 0 && 7 <= PC_vType[modelid - 400] <= 9);

static PC_IsValidDamageReason(weaponid) return (0 <= weaponid <= 18 || 22 <= weaponid <= 46 || 49 <= weaponid <= 54);

static PC_IsValidWeapon(weaponid) return (0 <= weaponid <= 18 || 22 <= weaponid <= 46);

static PC_IsBulletWeapon(weaponid) return (weaponid == 38 || 22 <= weaponid <= 34);

#if defined VectorSize
	static PC_GetSpeed(Float:PC_x, Float:PC_y, Float:PC_z = 0.0) return )floatround(VectorSize(PC_x, PC_y, PC_z) * 179.28625;
#else
	static PC_GetSpeed(Float:PC_x, Float:PC_y, Float:PC_z = 0.0) return floatround(floatsqroot(floatpower(PC_x, 2.0) + floatpower(PC_y, 2.0) + floatpower(PC_z, 2.0)) * 179.28625);
#endif

static PC_IsVehicleSeatOccupied(vehicleid, seat)
{
	#if defined foreach
		foreach(new PC_i : Player)
		{
			if(ACInfo[PC_i][acVeh] == vehicleid && ACInfo[PC_i][acSeat] == seat) return 1;
		}
	#else
		#if defined GetPlayerPoolSize
			for(new PC_i = GetPlayerPoolSize(); PC_i >= 0; --PC_i)
		#else
			for(new PC_i = MAX_PLAYERS - 1; PC_i >= 0; --PC_i)
		#endif
		{
			if(IsPlayerInVehicle(PC_i, vehicleid) && ACInfo[PC_i][acSeat] == seat) return 1;
		}
	#endif
	return 0;
}

#if PC_USE_RESTAURANTS
	static PC_InRestaurant(playerid, interiorid)
	{
		new PC_i;
		switch(interiorid)
		{
			case 5: PC_i = 0;
			case 9: PC_i = 1;
			case 10: PC_i = 2;
			default: return 0;
		}
		return IsPlayerInRangeOfPoint(playerid, 3.0, PC_Restaurants[PC_i][0], PC_Restaurants[PC_i][1], PC_Restaurants[PC_i][2]);
	}
#endif
#undef PC_USE_RESTAURANTS

#if PC_USE_AMMUNATIONS
	static PC_InAmmuNation(playerid, interiorid)
	{
		new PC_i, PC_s;
		switch(interiorid)
		{
			case 1: PC_i = 0, PC_s = -1;
			case 4: PC_i = 1, PC_s = 0;
			case 6: PC_i = 3, PC_s = 1;
			default: return 0;
		}
		for(; PC_i > PC_s; --PC_i)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, PC_AmmuNations[PC_i][0],
			PC_AmmuNations[PC_i][1], PC_AmmuNations[PC_i][2])) return 1;
		}
		return 0;
	}
#endif
#undef PC_USE_AMMUNATIONS

#if PC_USE_PAYNSPRAY
	static PC_InPayNSpray(playerid, interiorid)
	{
		if(interiorid == 0)
		{
			for(new PC_i = sizeof(PC_PayNSpray) - 1; PC_i >= 0; --PC_i)
			{
				if(IsPlayerInRangeOfPoint(playerid, 7.5, PC_PayNSpray[PC_i][0], PC_PayNSpray[PC_i][1], PC_PayNSpray[PC_i][2])) return 1;
			}
		}
		return 0;
	}
#endif
#undef PC_USE_PAYNSPRAY

#if PC_USE_VENDING_MACHINES
	static PC_NearVendingMachine(playerid, interiorid)
	{
		new PC_i, PC_s;
		switch(interiorid)
		{
			case 0: PC_i = 44, PC_s = -1;
			case 1: PC_i = 51, PC_s = 44;
			case 2: PC_i = 52, PC_s = 51;
			case 3: PC_i = 58, PC_s = 52;
			case 6: PC_i = 60, PC_s = 58;
			case 7: PC_i = 61, PC_s = 60;
			case 15: PC_i = 62, PC_s = 61;
			case 16: PC_i = 65, PC_s = 62;
			case 17: PC_i = 72, PC_s = 65;
			case 18: PC_i = 74, PC_s = 72;
			default: return 0;
		}
		for(; PC_i > PC_s; --PC_i)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.5, PC_vMachines[PC_i][0], PC_vMachines[PC_i][1], PC_vMachines[PC_i][2])) return 1;
		}
		return 0;
	}
#endif
#undef PC_USE_VENDING_MACHINES

#if PC_USE_CASINOS
	static PC_InCasino(playerid, interiorid)
	{
		new PC_i, PC_s;
		switch(interiorid)
		{
			case 1: PC_i = 41, PC_s = -1;
			case 10: PC_i = 61, PC_s = 41;
			case 12: PC_i = 70, PC_s = 61;
			default: return 0;
		}
		for(; PC_i > PC_s; --PC_i)
		{
			if(IsPlayerInRangeOfPoint(playerid, PC_Casinos[PC_i][3], PC_Casinos[PC_i][0],
			PC_Casinos[PC_i][1], PC_Casinos[PC_i][2])) return 1;
		}
		return 0;
	}
#endif
#undef PC_USE_CASINOS

static PC_IsCompatible(modelid, componentid)
{
	if(400 <= modelid <= 611)
	{
		switch(componentid)
		{
			case 1000..1191:
			{
				componentid -= 1000;
				if(PC_vMods[(modelid - 400) * 6 + (componentid >>> 5)] & 1 << (componentid & 0b00011111)) return 1;
			}
			case 1192, 1193:
			{
				if(modelid == 576) return 1;
			}
		}
	}
	return 0;
}

static PC_GetMaxPassengers(modelid)
{
	if(400 <= modelid <= 611)
	{
		modelid -= 400;
		return ((PC_MaxPassengers[modelid >>> 3] >>> ((modelid & 7) << 2)) & 0xF);
	}
	return 0xF;
}

static PC_IpToInt(const ip[])
{
	#if defined sscanf
		new PC_b0, PC_b1, PC_b2, PC_b3;
		sscanf(ip, "p<.>iiii", PC_b3, PC_b2, PC_b1, PC_b0);
		return (PC_b0 | PC_b1 << 8 | PC_b2 << 16 | PC_b3 << 24);
	#else
		new PC_bytes[1], PC_pos;
		PC_bytes{0} = strval(ip[PC_pos]);
		while(PC_pos < 15 && ip[PC_pos++] != '.'){}
		PC_bytes{1} = strval(ip[PC_pos]);
		while(PC_pos < 15 && ip[PC_pos++] != '.'){}
		PC_bytes{2} = strval(ip[PC_pos]);
		while(PC_pos < 15 && ip[PC_pos++] != '.'){}
		PC_bytes{3} = strval(ip[PC_pos]);
		return PC_bytes[0];
	#endif
}

static PC_FloodDetect(playerid, publicid)
{
	if(ACInfo[playerid][acKicked] < 1)
	{
		if(++ACInfo[playerid][acFloodCount][publicid] > PC_Mtfc[publicid][1])
		{
			#if defined DEBUG
				printf(DEBUG_CODE_1, playerid, PC_Mtfc[publicid][1], publicid);
				#if !defined mysql_included
					#undef DEBUG
				#endif
			#endif
			#if defined OnCheatDetected
				PC_KickWithCode(playerid, "", 0, 49, publicid);
				ACInfo[playerid][acFloodCount][publicid] = ACInfo[playerid][acFloodCount][27] = 0;
			#else
				return PC_KickWithCode(playerid, "", 0, 49, publicid);
			#endif
		}
		#if defined OnFloodWarning
			else OnFloodWarning(playerid, publicid, ACInfo[playerid][acFloodCount][publicid]);
		#endif
	}
	return 0;
}

static PC_KickWithCode(playerid, const ip_address[], type, code, code2 = 0)
{
	if(type == 0 && (!IsPlayerConnected(playerid) || ACInfo[playerid][acKicked] > 0)) return 0;
	#pragma unused code2
	#if defined OnCheatDetected
		OnCheatDetected(playerid, ip_address, type, code);
	#else
		PC_OnCheatDetected(playerid, ip_address, type, code);
	#endif 
	return 0;
}
#endif
